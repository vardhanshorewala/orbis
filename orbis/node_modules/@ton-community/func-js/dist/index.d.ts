export type SourcesMap = {
    [filename: string]: string;
};
export type SourceEntry = {
    filename: string;
    content: string;
};
export type SourcesArray = SourceEntry[];
export type SourceResolver = (path: string) => string;
export type Sources = SourcesMap | SourcesArray | SourceResolver;
export declare const mapSourceResolver: (map: SourcesMap) => SourceResolver;
export declare const arraySourceResolver: (arr: SourcesArray) => SourceResolver;
export declare const sourcesResolver: (sources: Sources) => SourceResolver;
export type CompilerConfig = {
    optLevel?: number;
    debugInfo?: boolean;
} & ({
    targets: string[];
    sources: SourceResolver | SourcesMap;
} | {
    targets?: string[];
    sources: SourcesArray;
});
export type LocationEntry = {
    file: string;
    line: number;
    pos: number;
    vars?: string[];
    func: string;
    first_stmt?: true;
    ret?: true;
    try_catch_ctx_id?: number;
    is_try_end?: true;
    ctx_id: number;
    req_ctx_id?: number;
    branch_true_ctx_id?: number;
    branch_false_ctx_id?: number;
};
export type GlobalVarEntry = {
    name: string;
};
export type DebugInfo = {
    globals: GlobalVarEntry[];
    locations: LocationEntry[];
};
export type SuccessResult = {
    status: "ok";
    codeBoc: string;
    fiftCode: string;
    warnings: string;
    snapshot: SourcesArray;
    debugInfo?: DebugInfo;
    debugMarksBoc?: string;
};
export type ErrorResult = {
    status: "error";
    message: string;
    snapshot: SourcesArray;
};
export type CompileResult = SuccessResult | ErrorResult;
export type CompilerVersion = {
    funcVersion: string;
};
export declare class FuncCompiler {
    private module;
    private wasmBinary;
    private inputFuncVersion;
    private debuggerModule?;
    private debuggerGzipPatchBase64?;
    private debuggerBinary?;
    constructor(funcWASMObject: any);
    private getDebuggerBinary;
    private createModule;
    private createDebuggerModule;
    compilerVersion: () => Promise<CompilerVersion>;
    validateVersion: () => Promise<boolean>;
    compileFunc: (compileConfig: CompilerConfig) => Promise<CompileResult>;
}
export declare const latestCompiler: FuncCompiler;
export declare const compilerVersion: () => Promise<CompilerVersion>;
export declare const compileFunc: (compileConfig: CompilerConfig) => Promise<CompileResult>;
