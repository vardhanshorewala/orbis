import type * as Ast from "../ast/ast";
import type { FactoryAst } from "../ast/ast-helpers";
import type { CompilerContext } from "../context/context";
import type { ConstantDescription, FunctionDescription, TypeDescription, TypeRef } from "./types";
export declare function verifyMapType(mapTy: Ast.MapType, isValTypeStruct: boolean): void;
export declare const toBounced: (type: string) => string;
export declare function resolveTypeRef(ctx: CompilerContext, type: Ast.Type): TypeRef;
/**
 * Collect global variables usage **per project**, not per contract!
 */
export declare function computeGlobalVariablesUsages(ctx: CompilerContext): CompilerContext;
export declare function resolveDescriptors(ctx: CompilerContext, Ast: FactoryAst): CompilerContext;
export declare function getTypeOrUndefined(ctx: CompilerContext, ident: Ast.Id | Ast.TypeId | string): TypeDescription | undefined;
export declare function getType(ctx: CompilerContext, ident: Ast.Id | Ast.TypeId | string): TypeDescription;
export declare function getAllTypes(ctx: CompilerContext): TypeDescription[];
export declare function getContracts(ctx: CompilerContext): TypeDescription[];
export declare function getStaticFunction(ctx: CompilerContext, name: string): FunctionDescription;
export declare function hasStaticFunction(ctx: CompilerContext, name: string): boolean;
export declare function getStaticConstant(ctx: CompilerContext, name: string): ConstantDescription;
export declare function hasStaticConstant(ctx: CompilerContext, name: string): boolean;
export declare function getAllStaticFunctions(ctx: CompilerContext): FunctionDescription[];
export declare function getAllStaticConstants(ctx: CompilerContext): ConstantDescription[];
