import { CodeBuilder } from "../runtime/builder";
export declare function findCommonPrefix(src: string[], startPos?: number): string;
type Node<T> = {
    type: "fork";
    left: Edge<T>;
    right: Edge<T>;
} | {
    type: "leaf";
    value: T;
};
type Edge<T> = {
    label: string;
    node: Node<T>;
};
export declare function buildTree<T>(src: Map<bigint, T>, keyLength: number): Edge<T>;
export declare function writeLabelShort(src: string, to: CodeBuilder): CodeBuilder;
export declare function writeLabelLong(src: string, keyLength: number, to: CodeBuilder): CodeBuilder;
export declare function writeLabelSame(value: number | boolean, length: number, keyLength: number, to: CodeBuilder): void;
export declare function detectLabelType(src: string, keyLength: number): "short" | "long" | "same";
export declare function serializeDict<T>(src: Map<bigint, T>, keyLength: number, serializer: (src: T, cell: CodeBuilder) => void, to: CodeBuilder): void;
export {};
