"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateCoverage = void 0;
const path_1 = require("path");
const parse_log_1 = require("../../logs/parse-log");
const index_1 = require("./index");
const fs = __importStar(require("node:fs"));
const calculateCoverage = async (dir, contract) => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
    const logs = (0, path_1.join)(dir, "output", "log.yaml");
    const parsedLogs = await (0, parse_log_1.readLog)(logs);
    const code = contract.init?.code;
    if (!code) {
        throw new Error("expected code in contract init, but not found");
    }
    const logsString = parsedLogs.join("\n\nNext transaction\n\n");
    const { lines, summary } = (0, index_1.collectAsmCoverage)(code, logsString);
    const shortSummary = (0, index_1.generateShortSummary)(summary);
    console.log(shortSummary);
    const report = (0, index_1.generateHtml)(lines);
    fs.writeFileSync((0, path_1.join)(dir, `coverage-${nowTime()}.html`), report);
};
exports.calculateCoverage = calculateCoverage;
function nowTime() {
    const now = new Date();
    const hh = String(now.getHours()).padStart(2, "0");
    const mm = String(now.getMinutes()).padStart(2, "0");
    const ss = String(now.getSeconds()).padStart(2, "0");
    const ms = String(now.getMilliseconds()).padStart(3, "0");
    return `${hh}:${mm}:${ss}.${ms}`;
}
