import * as $ from "@tonstudio/parser-runtime";
export declare namespace $ast {
    type VmLoc = $.Located<{
        readonly $: "VmLoc";
        readonly hash: hex;
        readonly offset: $number;
    }>;
    type VmStack = $.Located<{
        readonly $: "VmStack";
        readonly stack: string;
    }>;
    type VmExecute = $.Located<{
        readonly $: "VmExecute";
        readonly instr: string;
    }>;
    type VmLimitChanged = $.Located<{
        readonly $: "VmLimitChanged";
        readonly limit: $number;
    }>;
    type VmGasRemaining = $.Located<{
        readonly $: "VmGasRemaining";
        readonly gas: $number;
    }>;
    type VmException = $.Located<{
        readonly $: "VmException";
        readonly errno: $number;
        readonly message: string;
    }>;
    type VmExceptionHandler = $.Located<{
        readonly $: "VmExceptionHandler";
        readonly errno: $number;
    }>;
    type VmFinalC5 = $.Located<{
        readonly $: "VmFinalC5";
        readonly value: Cell;
    }>;
    type VmUnknown = $.Located<{
        readonly $: "VmUnknown";
        readonly text: string;
    }>;
    type vmLine = VmLoc | VmStack | VmExecute | VmLimitChanged | VmGasRemaining | VmException | VmExceptionHandler | VmFinalC5 | VmUnknown;
    type VmParsedStack = $.Located<{
        readonly $: "VmParsedStack";
        readonly values: readonly VmStackValue[];
    }>;
    type VmStackValue = $.Located<{
        readonly $: "VmStackValue";
        readonly value: Null | NaN | Integer | Tuple | TupleParen | Cell | Continuation | Builder | CellSlice | Unknown;
    }>;
    type Null = $.Located<{
        readonly $: "Null";
    }>;
    type NaN = $.Located<{
        readonly $: "NaN";
    }>;
    type Integer = $.Located<{
        readonly $: "Integer";
        readonly value: $number;
    }>;
    type Tuple = $.Located<{
        readonly $: "Tuple";
        readonly elements: readonly VmStackValue[];
    }>;
    type TupleParen = $.Located<{
        readonly $: "TupleParen";
        readonly elements: readonly VmStackValue[];
    }>;
    type Cell = $.Located<{
        readonly $: "Cell";
        readonly value: hex;
    }>;
    type Continuation = $.Located<{
        readonly $: "Continuation";
        readonly value: string;
    }>;
    type Builder = $.Located<{
        readonly $: "Builder";
        readonly value: hex;
    }>;
    type Unknown = $.Located<{
        readonly $: "Unknown";
    }>;
    type CellSlice = $.Located<{
        readonly $: "CellSlice";
        readonly body: CellSliceBody | CellSliceShortBody;
    }>;
    type CellSliceBody = $.Located<{
        readonly $: "CellSliceBody";
        readonly value: hex;
        readonly bits: CellSliceBits;
        readonly refs: CellSliceRefs;
    }>;
    type CellSliceBits = $.Located<{
        readonly $: "CellSliceBits";
        readonly start: $number;
        readonly end: $number;
    }>;
    type CellSliceRefs = $.Located<{
        readonly $: "CellSliceRefs";
        readonly start: $number;
        readonly end: $number;
    }>;
    type CellSliceShortBody = $.Located<{
        readonly $: "CellSliceShortBody";
        readonly value: hex;
    }>;
    type $number = {
        readonly op: "-" | undefined;
        readonly value: string;
    };
    type digit = string;
    type hexDigit = string | string | string;
    type hex = string;
    type space = " " | "\t" | "\r" | "\n";
}
export declare const VmLoc: $.Parser<$ast.VmLoc>;
export declare const VmStack: $.Parser<$ast.VmStack>;
export declare const VmExecute: $.Parser<$ast.VmExecute>;
export declare const VmLimitChanged: $.Parser<$ast.VmLimitChanged>;
export declare const VmGasRemaining: $.Parser<$ast.VmGasRemaining>;
export declare const VmException: $.Parser<$ast.VmException>;
export declare const VmExceptionHandler: $.Parser<$ast.VmExceptionHandler>;
export declare const VmFinalC5: $.Parser<$ast.VmFinalC5>;
export declare const VmUnknown: $.Parser<$ast.VmUnknown>;
export declare const vmLine: $.Parser<$ast.vmLine>;
export declare const VmParsedStack: $.Parser<$ast.VmParsedStack>;
export declare const VmStackValue: $.Parser<$ast.VmStackValue>;
export declare const Null: $.Parser<$ast.Null>;
export declare const NaN: $.Parser<$ast.NaN>;
export declare const Integer: $.Parser<$ast.Integer>;
export declare const Tuple: $.Parser<$ast.Tuple>;
export declare const TupleParen: $.Parser<$ast.TupleParen>;
export declare const Cell: $.Parser<$ast.Cell>;
export declare const Continuation: $.Parser<$ast.Continuation>;
export declare const Builder: $.Parser<$ast.Builder>;
export declare const Unknown: $.Parser<$ast.Unknown>;
export declare const CellSlice: $.Parser<$ast.CellSlice>;
export declare const CellSliceBody: $.Parser<$ast.CellSliceBody>;
export declare const CellSliceBits: $.Parser<$ast.CellSliceBits>;
export declare const CellSliceRefs: $.Parser<$ast.CellSliceRefs>;
export declare const CellSliceShortBody: $.Parser<$ast.CellSliceShortBody>;
export declare const $number: $.Parser<$ast.$number>;
export declare const digit: $.Parser<$ast.digit>;
export declare const hexDigit: $.Parser<$ast.hexDigit>;
export declare const hex: $.Parser<$ast.hex>;
export declare const space: $.Parser<$ast.space>;
