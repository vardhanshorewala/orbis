"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.space = exports.hex = exports.hexDigit = exports.digit = exports.$number = exports.CellSliceShortBody = exports.CellSliceRefs = exports.CellSliceBits = exports.CellSliceBody = exports.CellSlice = exports.Unknown = exports.Builder = exports.Continuation = exports.Cell = exports.TupleParen = exports.Tuple = exports.Integer = exports.NaN = exports.Null = exports.VmStackValue = exports.VmParsedStack = exports.vmLine = exports.VmUnknown = exports.VmFinalC5 = exports.VmExceptionHandler = exports.VmException = exports.VmGasRemaining = exports.VmLimitChanged = exports.VmExecute = exports.VmStack = exports.VmLoc = void 0;
/* Generated. Do not edit. */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-redundant-type-constituents */
/* eslint-disable @typescript-eslint/no-duplicate-type-constituents */
/* eslint-disable @typescript-eslint/no-unused-vars */
const $ = __importStar(require("@tonstudio/parser-runtime"));
exports.VmLoc = $.loc($.field($.pure("VmLoc"), "$", $.right($.str("code cell hash:"), $.field($.lazy(() => exports.hex), "hash", $.right($.str("offset:"), $.field($.lazy(() => exports.$number), "offset", $.eps))))));
exports.VmStack = $.loc($.field($.pure("VmStack"), "$", $.right($.str("stack: "), $.field($.stry($.plus($.regex("^\\n", $.negateExps([$.ExpString("\n")])))), "stack", $.eps))));
exports.VmExecute = $.loc($.field($.pure("VmExecute"), "$", $.right($.str("execute "), $.field($.stry($.plus($.regex("^\\n", $.negateExps([$.ExpString("\n")])))), "instr", $.eps))));
exports.VmLimitChanged = $.loc($.field($.pure("VmLimitChanged"), "$", $.right($.str("changing gas limit to "), $.field($.lazy(() => exports.$number), "limit", $.eps))));
exports.VmGasRemaining = $.loc($.field($.pure("VmGasRemaining"), "$", $.right($.str("gas remaining: "), $.field($.lazy(() => exports.$number), "gas", $.eps))));
exports.VmException = $.loc($.field($.pure("VmException"), "$", $.right($.str("handling exception code "), $.field($.lazy(() => exports.$number), "errno", $.right($.str(": "), $.field($.stry($.star($.regex("^\\n", $.negateExps([$.ExpString("\n")])))), "message", $.eps))))));
exports.VmExceptionHandler = $.loc($.field($.pure("VmExceptionHandler"), "$", $.right($.str("default exception handler, terminating vm with exit code"), $.field($.lazy(() => exports.$number), "errno", $.eps))));
exports.VmFinalC5 = $.loc($.field($.pure("VmFinalC5"), "$", $.right($.str("final c5:"), $.field($.lazy(() => exports.Cell), "value", $.eps))));
exports.VmUnknown = $.loc($.field($.pure("VmUnknown"), "$", $.right($.lookNeg($.str("stack")), $.field($.stry($.plus($.regex("^\\n", $.negateExps([$.ExpString("\n")])))), "text", $.right($.str("\n"), $.eps)))));
exports.vmLine = $.alt(exports.VmLoc, $.alt(exports.VmStack, $.alt(exports.VmExecute, $.alt(exports.VmLimitChanged, $.alt(exports.VmGasRemaining, $.alt(exports.VmException, $.alt(exports.VmExceptionHandler, $.alt(exports.VmFinalC5, exports.VmUnknown))))))));
exports.VmParsedStack = $.loc($.field($.pure("VmParsedStack"), "$", $.right($.str("["), $.field($.star($.lazy(() => exports.VmStackValue)), "values", $.right($.str("]"), $.eps)))));
exports.VmStackValue = $.loc($.field($.pure("VmStackValue"), "$", $.field($.alt($.lazy(() => exports.Null), $.alt($.lazy(() => exports.NaN), $.alt($.lazy(() => exports.Integer), $.alt($.lazy(() => exports.Tuple), $.alt($.lazy(() => exports.TupleParen), $.alt($.lazy(() => exports.Cell), $.alt($.lazy(() => exports.Continuation), $.alt($.lazy(() => exports.Builder), $.alt($.lazy(() => exports.CellSlice), $.lazy(() => exports.Unknown)))))))))), "value", $.eps)));
exports.Null = $.loc($.field($.pure("Null"), "$", $.right($.alt($.str("()"), $.str("(null)")), $.eps)));
exports.NaN = $.loc($.field($.pure("NaN"), "$", $.right($.str("NaN"), $.eps)));
exports.Integer = $.loc($.field($.pure("Integer"), "$", $.field($.lazy(() => exports.$number), "value", $.eps)));
exports.Tuple = $.loc($.field($.pure("Tuple"), "$", $.right($.str("["), $.field($.star(exports.VmStackValue), "elements", $.right($.str("]"), $.eps)))));
exports.TupleParen = $.loc($.field($.pure("TupleParen"), "$", $.right($.str("("), $.field($.star(exports.VmStackValue), "elements", $.right($.str(")"), $.eps)))));
exports.Cell = $.loc($.field($.pure("Cell"), "$", $.right($.str("C{"), $.field($.lazy(() => exports.hex), "value", $.right($.str("}"), $.eps)))));
exports.Continuation = $.loc($.field($.pure("Continuation"), "$", $.right($.str("Cont{"), $.field($.stry($.lex($.star($.regex("A-Za-z_0-9", [
    $.ExpRange("A", "Z"),
    $.ExpRange("a", "z"),
    $.ExpString("_"),
    $.ExpRange("0", "9"),
])))), "value", $.right($.str("}"), $.eps)))));
exports.Builder = $.loc($.field($.pure("Builder"), "$", $.right($.str("BC{"), $.field($.lazy(() => exports.hex), "value", $.right($.str("}"), $.eps)))));
exports.Unknown = $.loc($.field($.pure("Unknown"), "$", $.right($.str("???"), $.eps)));
exports.CellSlice = $.loc($.field($.pure("CellSlice"), "$", $.right($.str("CS{"), $.field($.alt($.lazy(() => exports.CellSliceBody), $.lazy(() => exports.CellSliceShortBody)), "body", $.right($.str("}"), $.eps)))));
exports.CellSliceBody = $.loc($.field($.pure("CellSliceBody"), "$", $.right($.str("Cell{"), $.field($.lazy(() => exports.hex), "value", $.right($.str("}"), $.field($.lazy(() => exports.CellSliceBits), "bits", $.right($.str(";"), $.field($.lazy(() => exports.CellSliceRefs), "refs", $.eps))))))));
exports.CellSliceBits = $.loc($.field($.pure("CellSliceBits"), "$", $.right($.str("bits:"), $.field($.lazy(() => exports.$number), "start", $.right($.str(".."), $.field($.lazy(() => exports.$number), "end", $.eps))))));
exports.CellSliceRefs = $.loc($.field($.pure("CellSliceRefs"), "$", $.right($.str("refs:"), $.field($.lazy(() => exports.$number), "start", $.right($.str(".."), $.field($.lazy(() => exports.$number), "end", $.eps))))));
exports.CellSliceShortBody = $.loc($.field($.pure("CellSliceShortBody"), "$", $.field($.lazy(() => exports.hex), "value", $.eps)));
exports.$number = $.field($.opt($.str("-")), "op", $.field($.lex($.stry($.plus($.lazy(() => exports.digit)))), "value", $.eps));
exports.digit = $.regex("0-9", [
    $.ExpRange("0", "9"),
]);
exports.hexDigit = $.named("hexadecimal digit", $.regex("0-9a-fA-F", [
    $.ExpRange("0", "9"),
    $.ExpRange("a", "f"),
    $.ExpRange("A", "F"),
]));
exports.hex = $.stry($.lex($.field($.star(exports.hexDigit), "value", $.eps)));
exports.space = $.named("space", $.regex(" \\t\\r\\n", [
    $.ExpString(" "),
    $.ExpString("\t"),
    $.ExpString("\r"),
    $.ExpString("\n"),
]));
