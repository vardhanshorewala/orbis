"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ISNAN = exports.CMP = exports.GEQ = exports.NEQ = exports.GREATER = exports.LEQ = exports.EQUAL = exports.LESS = exports.SGN = exports.QABS = exports.QMINMAX = exports.QMAX = exports.QMIN = exports.QUBITSIZE = exports.QBITSIZE = exports.QUFITSX = exports.QFITSX = exports.QNOT = exports.QXOR = exports.QOR = exports.QAND = exports.QPOW2 = exports.QMUL = exports.QDEC = exports.QINC = exports.QNEGATE = exports.QSUBR = exports.QSUB = exports.QADD = exports.ABS = exports.MINMAX = exports.MAX = exports.MIN = exports.UBITSIZE = exports.BITSIZE = exports.UFITSX = exports.FITSX = exports.NOT = exports.XOR = exports.OR = exports.AND = exports.POW2 = exports.MUL = exports.DEC = exports.INC = exports.NEGATE = exports.SUBR = exports.SUB = exports.ADD = exports.PUSHNAN = void 0;
exports.BREMBITS = exports.BBITREFS = exports.BREFS = exports.BBITS = exports.BDEPTH = exports.ENDXC = exports.STBRQ = exports.STSLICERQ = exports.STBREFRQ = exports.STREFRQ = exports.STBQ = exports.STSLICEQ = exports.STBREFQ = exports.STREFQ = exports.STBR = exports.STSLICER = exports.STBREFR = exports.STREFR = exports.STB = exports.STBREF = exports.ENDCST = exports.ENDC = exports.NEWC = exports.SDCNTTRAIL1 = exports.SDCNTTRAIL0 = exports.SDCNTLEAD1 = exports.SDCNTLEAD0 = exports.SDPSFXREV = exports.SDPSFX = exports.SDSFXREV = exports.SDSFX = exports.SDPPFXREV = exports.SDPPFX = exports.SDPFXREV = exports.SDPFX = exports.SDEQ = exports.SDLEXCMP = exports.SDFIRST = exports.SREMPTY = exports.SDEMPTY = exports.SEMPTY = exports.QCMP = exports.QGEQ = exports.QNEQ = exports.QGREATER = exports.QLEQ = exports.QEQUAL = exports.QLESS = exports.QSGN = exports.CHKNAN = void 0;
exports.RET = exports.JMPX = exports.EXECUTE = exports.CDEPTHIX = exports.CHASHIX = exports.CLEVELMASK = exports.CLEVEL = exports.CDEPTH = exports.SDEPTH = exports.LDSAME = exports.LDONES = exports.LDZEROES = exports.SBITREFS = exports.SREFS = exports.SBITS = exports.PLDREFVAR = exports.SCHKBITREFSQ = exports.SCHKREFSQ = exports.SCHKBITSQ = exports.SCHKBITREFS = exports.SCHKREFS = exports.SCHKBITS = exports.XLOADQ = exports.XLOAD = exports.XCTOS = exports.SPLITQ = exports.SPLIT = exports.SUBSLICE = exports.SSKIPLAST = exports.SCUTLAST = exports.SSKIPFIRST = exports.SCUTFIRST = exports.SDSUBSTR = exports.SDSKIPLAST = exports.SDCUTLAST = exports.SDSKIPFIRST = exports.SDCUTFIRST = exports.LDREFRTOS = exports.LDREF = exports.ENDS = exports.CTOS = exports.STSAME = exports.STONES = exports.STZEROES = exports.BCHKBITREFSQ = exports.BCHKREFSQ = exports.BCHKBITREFS = exports.BCHKREFS = exports.BREMBITREFS = exports.BREMREFS = void 0;
exports.ATEXIT = exports.COMPOSBOTH = exports.BOOLOR = exports.BOOLAND = exports.SETCONTCTRMANYX = exports.SETCONTCTRX = exports.POPCTRX = exports.PUSHCTRX = exports.BLESSVARARGS = exports.BLESS = exports.SETNUMVARARGS = exports.SETCONTVARARGS = exports.RETURNVARARGS = exports.AGAINENDBRK = exports.AGAINBRK = exports.WHILEENDBRK = exports.WHILEBRK = exports.UNTILENDBRK = exports.UNTILBRK = exports.REPEATENDBRK = exports.REPEATBRK = exports.AGAINEND = exports.AGAIN = exports.WHILEEND = exports.WHILE = exports.UNTILEND = exports.UNTIL = exports.REPEATEND = exports.REPEAT = exports.IFNOTRETALT = exports.IFRETALT = exports.CONDSELCHK = exports.CONDSEL = exports.IFELSE = exports.IFNOTJMP = exports.IFJMP = exports.IFNOT = exports.IF = exports.IFNOTRET = exports.IFRET = exports.RUNVMX = exports.RETDATA = exports.CALLCCVARARGS = exports.JMPXVARARGS = exports.RETVARARGS = exports.CALLXVARARGS = exports.JMPXDATA = exports.CALLCC = exports.RETBOOL = exports.RETALT = void 0;
exports.COMMIT = exports.GASCONSUMED = exports.SETGASLIMIT = exports.ACCEPT = exports.ONLYX = exports.ONLYTOPX = exports.CHKDEPTH = exports.DEPTH = exports.XCHGX = exports.TUCK = exports.DROPX = exports.REVX = exports.BLKSWX = exports.ROLLREV = exports.ROLL = exports.PICK = exports.ROTREV = exports.ROT = exports.NIP = exports.DROP = exports.OVER = exports.DUP = exports.SWAP = exports.NOP = exports.PFXDICTGETEXEC = exports.PFXDICTGETJMP = exports.PFXDICTGET = exports.PFXDICTGETQ = exports.PFXDICTDEL = exports.PFXDICTADD = exports.PFXDICTREPLACE = exports.PFXDICTSET = exports.PLDDICTQ = exports.LDDICTQ = exports.PLDDICT = exports.LDDICT = exports.PLDDICTS = exports.LDDICTS = exports.SKIPDICT = exports.STDICT = exports.SETCPX = exports.TRY = exports.SAMEALTSAVE = exports.SAMEALT = exports.BOOLEVAL = exports.INVERT = exports.THENRETALT = exports.THENRET = exports.SETEXITALT = exports.ATEXITALT = void 0;
exports.RIST255_QVALIDATE = exports.RIST255_PUSHL = exports.RIST255_MULBASE = exports.RIST255_MUL = exports.RIST255_SUB = exports.RIST255_ADD = exports.RIST255_VALIDATE = exports.RIST255_FROMHASH = exports.P256_CHKSIGNS = exports.P256_CHKSIGNU = exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD = exports.ECRECOVER = exports.CHKSIGNS = exports.CHKSIGNU = exports.SHA256U = exports.HASHSU = exports.HASHCU = exports.ADDRAND = exports.SETRAND = exports.RAND = exports.RANDU256 = exports.SETGLOBVAR = exports.GETGLOBVAR = exports.GETFORWARDFEESIMPLE = exports.GETGASFEESIMPLE = exports.GETORIGINALFWDFEE = exports.GETPRECOMPILEDGAS = exports.GETFORWARDFEE = exports.GETSTORAGEFEE = exports.GETGASFEE = exports.GLOBALID = exports.PREVMCBLOCKS_100 = exports.PREVKEYBLOCK = exports.PREVMCBLOCKS = exports.CONFIGOPTPARAM = exports.CONFIGPARAM = exports.CONFIGDICT = exports.DUEPAYMENT = exports.UNPACKEDCONFIGTUPLE = exports.PREVBLOCKSINFOTUPLE = exports.STORAGEFEES = exports.INCOMINGVALUE = exports.MYCODE = exports.CONFIGROOT = exports.MYADDR = exports.BALANCE = exports.RANDSEED = exports.LTIME = exports.BLOCKLT = exports.NOW = void 0;
exports.RAWRESERVE = exports.SENDRAWMSG = exports.REWRITEVARADDRQ = exports.REWRITEVARADDR = exports.REWRITESTDADDRQ = exports.REWRITESTDADDR = exports.PARSEMSGADDRQ = exports.PARSEMSGADDR = exports.LDMSGADDRQ = exports.LDMSGADDR = exports.STVARINT32 = exports.STVARUINT32 = exports.LDVARINT32 = exports.LDVARUINT32 = exports.STVARINT16 = exports.STGRAMS = exports.LDVARINT16 = exports.LDGRAMS = exports.SDATASIZE = exports.SDATASIZEQ = exports.CDATASIZE = exports.CDATASIZEQ = exports.BLS_PUSHR = exports.BLS_PAIRING = exports.BLS_G2_ISZERO = exports.BLS_G2_INGROUP = exports.BLS_MAP_TO_G2 = exports.BLS_G2_ZERO = exports.BLS_G2_MULTIEXP = exports.BLS_G2_MUL = exports.BLS_G2_NEG = exports.BLS_G2_SUB = exports.BLS_G2_ADD = exports.BLS_G1_ISZERO = exports.BLS_G1_INGROUP = exports.BLS_MAP_TO_G1 = exports.BLS_G1_ZERO = exports.BLS_G1_MULTIEXP = exports.BLS_G1_MUL = exports.BLS_G1_NEG = exports.BLS_G1_SUB = exports.BLS_G1_ADD = exports.BLS_AGGREGATEVERIFY = exports.BLS_FASTAGGREGATEVERIFY = exports.BLS_AGGREGATE = exports.BLS_VERIFY = exports.RIST255_QMULBASE = exports.RIST255_QMUL = exports.RIST255_QSUB = exports.RIST255_QADD = void 0;
exports.QMODC = exports.QMODR = exports.QMOD = exports.QDIVC = exports.QDIVR = exports.QDIV = exports.QADDDIVMODC = exports.QADDDIVMODR = exports.QADDDIVMOD = exports.DIVMODC = exports.DIVMODR = exports.DIVMOD = exports.MODC = exports.MODR = exports.MOD = exports.DIVC = exports.DIVR = exports.DIV = exports.ADDDIVMODC = exports.ADDDIVMODR = exports.ADDDIVMOD = exports.NULLROTRIFNOT2 = exports.NULLROTRIF2 = exports.NULLSWAPIFNOT2 = exports.NULLSWAPIF2 = exports.NULLROTRIFNOT = exports.NULLROTRIF = exports.NULLSWAPIFNOT = exports.NULLSWAPIF = exports.TPOP = exports.TPUSH = exports.LAST = exports.ISTUPLE = exports.QTLEN = exports.TLEN = exports.SETINDEXVARQ = exports.INDEXVARQ = exports.SETINDEXVAR = exports.EXPLODEVAR = exports.UNPACKFIRSTVAR = exports.UNTUPLEVAR = exports.INDEXVAR = exports.TUPLEVAR = exports.ISNULL = exports.PUSHNULL = exports.SENDMSG = exports.CHANGELIB = exports.SETLIBCODE = exports.SETCODE = exports.RAWRESERVEX = void 0;
exports.MULADDRSHIFTMOD = exports.QMULDIVMODC = exports.QMULDIVMODR = exports.QMULDIVMOD = exports.QMULMODC = exports.QMULMODR = exports.QMULMOD = exports.QMULDIVC = exports.QMULDIVR = exports.QMULDIV = exports.QMULADDDIVMODC = exports.QMULADDDIVMODR = exports.QMULADDDIVMOD = exports.MULDIVMODC = exports.MULDIVMODR = exports.MULDIVMOD = exports.MULMODC = exports.MULMODR = exports.MULMOD = exports.MULDIVC = exports.MULDIVR = exports.MULDIV = exports.MULADDDIVMODC = exports.MULADDDIVMODR = exports.MULADDDIVMOD = exports.QRSHIFTMODC = exports.QRSHIFTMODR = exports.QRSHIFTMOD = exports.QMODPOW2C = exports.QMODPOW2R = exports.QMODPOW2 = exports.QRSHIFTC = exports.QRSHIFTR = exports.QADDRSHIFTMODC = exports.QADDRSHIFTMODR = exports.QADDRSHIFTMOD = exports.RSHIFTMODC = exports.RSHIFTMODR = exports.RSHIFTMOD = exports.MODPOW2C = exports.MODPOW2R = exports.MODPOW2 = exports.RSHIFTC = exports.RSHIFTR = exports.ADDRSHIFTMODC = exports.ADDRSHIFTMODR = exports.ADDRSHIFTMOD = exports.QDIVMODC = exports.QDIVMODR = exports.QDIVMOD = void 0;
exports.STIXR = exports.STUX = exports.STIX = exports.QLSHIFTDIVMODC = exports.QLSHIFTDIVMODR = exports.QLSHIFTDIVMOD = exports.QLSHIFTMODC = exports.QLSHIFTMODR = exports.QLSHIFTMOD = exports.QLSHIFTDIVC = exports.QLSHIFTDIVR = exports.QLSHIFTDIV = exports.QLSHIFTADDDIVMODC = exports.QLSHIFTADDDIVMODR = exports.QLSHIFTADDDIVMOD = exports.LSHIFTDIVMODC = exports.LSHIFTDIVMODR = exports.LSHIFTDIVMOD = exports.LSHIFTMODC = exports.LSHIFTMODR = exports.LSHIFTMOD = exports.LSHIFTDIVC = exports.LSHIFTDIVR = exports.LSHIFTDIV = exports.LSHIFTADDDIVMODC = exports.LSHIFTADDDIVMODR = exports.LSHIFTADDDIVMOD = exports.QMULRSHIFTCMOD = exports.QMULRSHIFTRMOD = exports.QMULRSHIFTMOD = exports.QMULMODPOW2C = exports.QMULMODPOW2R = exports.QMULMODPOW2 = exports.QMULRSHIFTC = exports.QMULRSHIFTR = exports.QMULRSHIFT = exports.QMULADDRSHIFTCMOD = exports.QMULADDRSHIFTRMOD = exports.QMULADDRSHIFTMOD = exports.MULRSHIFTCMOD = exports.MULRSHIFTRMOD = exports.MULRSHIFTMOD = exports.MULMODPOW2C = exports.MULMODPOW2R = exports.MULMODPOW2 = exports.MULRSHIFTC = exports.MULRSHIFTR = exports.MULRSHIFT = exports.MULADDRSHIFTCMOD = exports.MULADDRSHIFTRMOD = void 0;
exports.DICTUGET = exports.DICTIGETREF = exports.DICTIGET = exports.DICTGETREF = exports.DICTGET = exports.DICTUGETEXECZ = exports.DICTIGETEXECZ = exports.DICTUGETJMPZ = exports.DICTIGETJMPZ = exports.DICTUGETEXEC = exports.DICTIGETEXEC = exports.DICTUGETJMP = exports.DICTIGETJMP = exports.PLDULE8Q = exports.PLDILE8Q = exports.PLDULE4Q = exports.PLDILE4Q = exports.LDULE8Q = exports.LDILE8Q = exports.LDULE4Q = exports.LDILE4Q = exports.PLDULE8 = exports.PLDILE8 = exports.PLDULE4 = exports.PLDILE4 = exports.LDULE8 = exports.LDILE8 = exports.LDULE4 = exports.LDILE4 = exports.PLDSLICEXQ = exports.LDSLICEXQ = exports.PLDSLICEX = exports.LDSLICEX = exports.PLDUXQ = exports.PLDIXQ = exports.LDUXQ = exports.LDIXQ = exports.PLDUX = exports.PLDIX = exports.LDUX = exports.LDIX = exports.STULE8 = exports.STILE8 = exports.STULE4 = exports.STILE4 = exports.STUXRQ = exports.STIXRQ = exports.STUXQ = exports.STIXQ = exports.STUXR = void 0;
exports.DICTMAX = exports.DICTUMINREF = exports.DICTUMIN = exports.DICTIMINREF = exports.DICTIMIN = exports.DICTMINREF = exports.DICTMIN = exports.DICTUDELGETREF = exports.DICTUDELGET = exports.DICTIDELGETREF = exports.DICTIDELGET = exports.DICTDELGETREF = exports.DICTDELGET = exports.DICTUADDGETREF = exports.DICTUADDGET = exports.DICTIADDGETREF = exports.DICTIADDGET = exports.DICTADDGETREF = exports.DICTADDGET = exports.DICTUADDREF = exports.DICTUADD = exports.DICTIADDREF = exports.DICTIADD = exports.DICTADDREF = exports.DICTADD = exports.DICTUREPLACEGETREF = exports.DICTUREPLACEGET = exports.DICTIREPLACEGETREF = exports.DICTIREPLACEGET = exports.DICTREPLACEGETREF = exports.DICTREPLACEGET = exports.DICTUREPLACEREF = exports.DICTUREPLACE = exports.DICTIREPLACEREF = exports.DICTIREPLACE = exports.DICTREPLACEREF = exports.DICTREPLACE = exports.DICTUSETGETREF = exports.DICTUSETGET = exports.DICTISETGETREF = exports.DICTISETGET = exports.DICTSETGETREF = exports.DICTSETGET = exports.DICTUSETREF = exports.DICTUSET = exports.DICTISETREF = exports.DICTISET = exports.DICTSETREF = exports.DICTSET = exports.DICTUGETREF = void 0;
exports.SUBDICTURPGET = exports.SUBDICTIRPGET = exports.SUBDICTRPGET = exports.SUBDICTUGET = exports.SUBDICTIGET = exports.SUBDICTGET = exports.DICTUSETGETOPTREF = exports.DICTISETGETOPTREF = exports.DICTSETGETOPTREF = exports.DICTUGETOPTREF = exports.DICTIGETOPTREF = exports.DICTGETOPTREF = exports.DICTUDEL = exports.DICTIDEL = exports.DICTDEL = exports.DICTUADDGETB = exports.DICTIADDGETB = exports.DICTADDGETB = exports.DICTUADDB = exports.DICTIADDB = exports.DICTADDB = exports.DICTUREPLACEGETB = exports.DICTIREPLACEGETB = exports.DICTREPLACEGETB = exports.DICTUREPLACEB = exports.DICTIREPLACEB = exports.DICTREPLACEB = exports.DICTUSETGETB = exports.DICTISETGETB = exports.DICTSETGETB = exports.DICTUSETB = exports.DICTISETB = exports.DICTSETB = exports.DICTUREMMAXREF = exports.DICTUREMMAX = exports.DICTIREMMAXREF = exports.DICTIREMMAX = exports.DICTREMMAXREF = exports.DICTREMMAX = exports.DICTUREMMINREF = exports.DICTUREMMIN = exports.DICTIREMMINREF = exports.DICTIREMMIN = exports.DICTREMMINREF = exports.DICTREMMIN = exports.DICTUMAXREF = exports.DICTUMAX = exports.DICTIMAXREF = exports.DICTIMAX = exports.DICTMAXREF = void 0;
exports.TUPLE = exports.BLKDROP = exports.RETURNARGS = exports.RETARGS = exports.JMPXARGS = exports.THROWARGIFNOT = exports.THROWARGIF = exports.THROWARG = exports.PREPAREDICT = exports.JMPDICT = exports.CDEPTHI = exports.CHASHI = exports.PLDREFIDX = exports.TRYARGS = exports.CALLCCARGS = exports.SETCONTCTRMANY = exports.QUFITS = exports.QFITS = exports.UFITS = exports.FITS = exports.PUSHNEGPOW2 = exports.PUSHPOW2DEC = exports.QNEQINT = exports.QGTINT = exports.QLESSINT = exports.QEQINT = exports.NEQINT = exports.GTINT = exports.LESSINT = exports.EQINT = exports.QMULINT = exports.QADDINT = exports.MULINT = exports.ADDINT = exports.DICTUGETPREVEQ = exports.DICTUGETPREV = exports.DICTUGETNEXTEQ = exports.DICTUGETNEXT = exports.DICTIGETPREVEQ = exports.DICTIGETPREV = exports.DICTIGETNEXTEQ = exports.DICTIGETNEXT = exports.DICTGETPREVEQ = exports.DICTGETPREV = exports.DICTGETNEXTEQ = exports.DICTGETNEXT = exports.THROWARGANYIFNOT = exports.THROWANYIFNOT = exports.THROWARGANY = exports.THROWANY = void 0;
exports.PUSHREFSLICE = exports.PUSHREF = exports.GETPARAM = exports.SETGLOB = exports.GETGLOB = exports.BLKDROP2 = exports.BLKPUSH = exports.PUSHPOW2 = exports.INDEX3 = exports.INDEX2 = exports.IFNBITJMP = exports.IFBITJMP = exports.PLDSLICEQ = exports.LDSLICEQ = exports.PLDSLICE = exports.PLDUZ = exports.PLDUQ = exports.PLDIQ = exports.LDUQ = exports.LDIQ = exports.PLDU = exports.PLDI = exports.STURQ = exports.STIRQ = exports.STUQ = exports.STIQ = exports.STUR = exports.STIR = exports.BLESSARGS = exports.SETCONTARGS = exports.REVERSE = exports.BLKSWAP = exports.PU2XC = exports.PUXCPU = exports.PUXC2 = exports.XCPUXC = exports.PUXC = exports.PUSH2 = exports.XCPU = exports.XCHG2 = exports.PUSH3 = exports.XCPU2 = exports.XC2PU = exports.SETINDEXQ = exports.INDEXQ = exports.SETINDEX = exports.EXPLODE = exports.UNPACKFIRST = exports.UNTUPLE = exports.INDEX = void 0;
exports.MULADDRSHIFTR_MOD = exports.MULADDRSHIFT_MOD = exports.RSHIFTC_MOD = exports.RSHIFTR_MOD = exports.RSHIFT_MOD = exports.MODPOW2C_ = exports.MODPOW2R_ = exports.MODPOW2_ = exports.RSHIFTC_ = exports.RSHIFTR_ = exports.RSHIFT_ = exports.ADDRSHIFTC_MOD = exports.ADDRSHIFTR_MOD = exports.ADDRSHIFT_MOD = exports.OVER2 = exports.DUP2 = exports.DROP2 = exports.SWAP2 = exports.RUNVM = exports.SAVEBOTHCTR = exports.SAVEALTCTR = exports.SAVECTR = exports.POPSAVE = exports.SETALTCTR = exports.SETRETCTR = exports.SETCONTCTR = exports.DEBUGSTR = exports.THROWARGANYIF = exports.THROWANYIF = exports.STREF2CONST = exports.STREFCONST = exports.SDBEGINSQ = exports.SDBEGINS = exports.SDBEGINSXQ = exports.SDBEGINSX = exports.PFXDICTSWITCH = exports.DICTPUSHCONST = exports.IFNBITJMPREF = exports.IFBITJMPREF = exports.IFREFELSEREF = exports.IFELSEREF = exports.IFREFELSE = exports.IFNOTJMPREF = exports.IFJMPREF = exports.IFNOTREF = exports.IFREF = exports.JMPREFDATA = exports.JMPREF = exports.CALLREF = exports.PUSHREFCONT = void 0;
exports.BCHKBITSQ_1 = exports.BCHKBITSQ = exports.BCHKBITS_1 = exports.BCHKBITS = exports.QLSHIFT_1 = exports.QLSHIFT = exports.LSHIFT_1 = exports.LSHIFT = exports.LDSLICE_ALT = exports.LDSLICE = exports.LDU_ALT = exports.LDU = exports.LDI_ALT = exports.LDI = exports.STU_ALT = exports.STU = exports.STI_ALT = exports.STI = exports.XCHG3_ALT = exports.XCHG3 = exports.STSLICE_ALT = exports.STSLICE = exports.STREF_ALT = exports.STREF = exports.HASHEXTAR = exports.HASHEXTA = exports.HASHEXTR = exports.HASHEXT = exports.LSHIFT_DIVMODC = exports.LSHIFT_DIVMODR = exports.LSHIFT_DIVMOD = exports.LSHIFT_MODC = exports.LSHIFT_MODR = exports.LSHIFT_MOD = exports.LSHIFT_DIVC = exports.LSHIFT_DIVR = exports.LSHIFT_DIV = exports.LSHIFT_ADDDIVMODC = exports.LSHIFT_ADDDIVMODR = exports.LSHIFT_ADDDIVMOD = exports.MULRSHIFTC_MOD = exports.MULRSHIFTR_MOD = exports.MULRSHIFT_MOD = exports.MULMODPOW2C_ = exports.MULMODPOW2R_ = exports.MULMODPOW2_ = exports.MULRSHIFTC_ = exports.MULRSHIFTR_ = exports.MULRSHIFT_ = exports.MULADDRSHIFTC_MOD = void 0;
exports.DEBUGMARK = exports.SETCP_SHORT = exports.SETCP = exports.STSLICECONST = exports.PUSHCONT_SHORT = exports.PUSHCONT = exports.PUSHSLICE_LONG_1 = exports.PUSHSLICE_REFS_1 = exports.PUSHSLICE = exports.CALLXARGS_1 = exports.CALLXARGS = exports.POP_LONG = exports.POP = exports.POPCTR = exports.PUSH_LONG = exports.PUSH = exports.PUSHCTR = exports.DEBUG_2 = exports.DUMP = exports.DEBUG_1 = exports.STRDUMP = exports.DEBUG = exports.DUMPSTK = exports.XCHG_3 = exports.XCHG_1 = exports.XCHG_0 = exports.XCHG_LONG = exports.PUSHINT_LONG = exports.PUSHINT_16 = exports.PUSHINT_8 = exports.PUSHINT = exports.THROWIFNOT = exports.THROWIFNOT_SHORT = exports.THROWIF = exports.THROWIF_SHORT = exports.THROW = exports.THROW_SHORT = exports.CALLDICT_LONG = exports.CALLDICT = exports.QRSHIFT_ALT = exports.QRSHIFT_1 = exports.QRSHIFT = exports.RSHIFT_ALT = exports.RSHIFT_1 = exports.RSHIFT = void 0;
// AUTOGENERATED, DO NOT EDIT, generated by ../generator/gen-types.ts
const $ = __importStar(require("./util"));
const c = __importStar(require("./constructors"));
exports.PUSHNAN = {
    load: (s) => {
        s.skip(16);
        return c.PUSHNAN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(33791, 16, val);
    },
};
exports.ADD = {
    load: (s) => {
        s.skip(8);
        return c.ADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(160, 8, val);
    },
};
exports.SUB = {
    load: (s) => {
        s.skip(8);
        return c.SUB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(161, 8, val);
    },
};
exports.SUBR = {
    load: (s) => {
        s.skip(8);
        return c.SUBR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(162, 8, val);
    },
};
exports.NEGATE = {
    load: (s) => {
        s.skip(8);
        return c.NEGATE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(163, 8, val);
    },
};
exports.INC = {
    load: (s) => {
        s.skip(8);
        return c.INC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(164, 8, val);
    },
};
exports.DEC = {
    load: (s) => {
        s.skip(8);
        return c.DEC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(165, 8, val);
    },
};
exports.MUL = {
    load: (s) => {
        s.skip(8);
        return c.MUL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(168, 8, val);
    },
};
exports.POW2 = {
    load: (s) => {
        s.skip(8);
        return c.POW2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(174, 8, val);
    },
};
exports.AND = {
    load: (s) => {
        s.skip(8);
        return c.AND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(176, 8, val);
    },
};
exports.OR = {
    load: (s) => {
        s.skip(8);
        return c.OR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(177, 8, val);
    },
};
exports.XOR = {
    load: (s) => {
        s.skip(8);
        return c.XOR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(178, 8, val);
    },
};
exports.NOT = {
    load: (s) => {
        s.skip(8);
        return c.NOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(179, 8, val);
    },
};
exports.FITSX = {
    load: (s) => {
        s.skip(16);
        return c.FITSX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46592, 16, val);
    },
};
exports.UFITSX = {
    load: (s) => {
        s.skip(16);
        return c.UFITSX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46593, 16, val);
    },
};
exports.BITSIZE = {
    load: (s) => {
        s.skip(16);
        return c.BITSIZE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46594, 16, val);
    },
};
exports.UBITSIZE = {
    load: (s) => {
        s.skip(16);
        return c.UBITSIZE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46595, 16, val);
    },
};
exports.MIN = {
    load: (s) => {
        s.skip(16);
        return c.MIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46600, 16, val);
    },
};
exports.MAX = {
    load: (s) => {
        s.skip(16);
        return c.MAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46601, 16, val);
    },
};
exports.MINMAX = {
    load: (s) => {
        s.skip(16);
        return c.MINMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46602, 16, val);
    },
};
exports.ABS = {
    load: (s) => {
        s.skip(16);
        return c.ABS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(46603, 16, val);
    },
};
exports.QADD = {
    load: (s) => {
        s.skip(16);
        return c.QADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47008, 16, val);
    },
};
exports.QSUB = {
    load: (s) => {
        s.skip(16);
        return c.QSUB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47009, 16, val);
    },
};
exports.QSUBR = {
    load: (s) => {
        s.skip(16);
        return c.QSUBR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47010, 16, val);
    },
};
exports.QNEGATE = {
    load: (s) => {
        s.skip(16);
        return c.QNEGATE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47011, 16, val);
    },
};
exports.QINC = {
    load: (s) => {
        s.skip(16);
        return c.QINC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47012, 16, val);
    },
};
exports.QDEC = {
    load: (s) => {
        s.skip(16);
        return c.QDEC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47013, 16, val);
    },
};
exports.QMUL = {
    load: (s) => {
        s.skip(16);
        return c.QMUL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47016, 16, val);
    },
};
exports.QPOW2 = {
    load: (s) => {
        s.skip(16);
        return c.QPOW2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47022, 16, val);
    },
};
exports.QAND = {
    load: (s) => {
        s.skip(16);
        return c.QAND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47024, 16, val);
    },
};
exports.QOR = {
    load: (s) => {
        s.skip(16);
        return c.QOR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47025, 16, val);
    },
};
exports.QXOR = {
    load: (s) => {
        s.skip(16);
        return c.QXOR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47026, 16, val);
    },
};
exports.QNOT = {
    load: (s) => {
        s.skip(16);
        return c.QNOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47027, 16, val);
    },
};
exports.QFITSX = {
    load: (s) => {
        s.skip(24);
        return c.QFITSX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039680, 24, val);
    },
};
exports.QUFITSX = {
    load: (s) => {
        s.skip(24);
        return c.QUFITSX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039681, 24, val);
    },
};
exports.QBITSIZE = {
    load: (s) => {
        s.skip(24);
        return c.QBITSIZE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039682, 24, val);
    },
};
exports.QUBITSIZE = {
    load: (s) => {
        s.skip(24);
        return c.QUBITSIZE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039683, 24, val);
    },
};
exports.QMIN = {
    load: (s) => {
        s.skip(24);
        return c.QMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039688, 24, val);
    },
};
exports.QMAX = {
    load: (s) => {
        s.skip(24);
        return c.QMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039689, 24, val);
    },
};
exports.QMINMAX = {
    load: (s) => {
        s.skip(24);
        return c.QMINMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039690, 24, val);
    },
};
exports.QABS = {
    load: (s) => {
        s.skip(24);
        return c.QABS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12039691, 24, val);
    },
};
exports.SGN = {
    load: (s) => {
        s.skip(8);
        return c.SGN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(184, 8, val);
    },
};
exports.LESS = {
    load: (s) => {
        s.skip(8);
        return c.LESS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(185, 8, val);
    },
};
exports.EQUAL = {
    load: (s) => {
        s.skip(8);
        return c.EQUAL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(186, 8, val);
    },
};
exports.LEQ = {
    load: (s) => {
        s.skip(8);
        return c.LEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(187, 8, val);
    },
};
exports.GREATER = {
    load: (s) => {
        s.skip(8);
        return c.GREATER();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(188, 8, val);
    },
};
exports.NEQ = {
    load: (s) => {
        s.skip(8);
        return c.NEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(189, 8, val);
    },
};
exports.GEQ = {
    load: (s) => {
        s.skip(8);
        return c.GEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(190, 8, val);
    },
};
exports.CMP = {
    load: (s) => {
        s.skip(8);
        return c.CMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(191, 8, val);
    },
};
exports.ISNAN = {
    load: (s) => {
        s.skip(8);
        return c.ISNAN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(196, 8, val);
    },
};
exports.CHKNAN = {
    load: (s) => {
        s.skip(8);
        return c.CHKNAN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(197, 8, val);
    },
};
exports.QSGN = {
    load: (s) => {
        s.skip(16);
        return c.QSGN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47032, 16, val);
    },
};
exports.QLESS = {
    load: (s) => {
        s.skip(16);
        return c.QLESS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47033, 16, val);
    },
};
exports.QEQUAL = {
    load: (s) => {
        s.skip(16);
        return c.QEQUAL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47034, 16, val);
    },
};
exports.QLEQ = {
    load: (s) => {
        s.skip(16);
        return c.QLEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47035, 16, val);
    },
};
exports.QGREATER = {
    load: (s) => {
        s.skip(16);
        return c.QGREATER();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47036, 16, val);
    },
};
exports.QNEQ = {
    load: (s) => {
        s.skip(16);
        return c.QNEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47037, 16, val);
    },
};
exports.QGEQ = {
    load: (s) => {
        s.skip(16);
        return c.QGEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47038, 16, val);
    },
};
exports.QCMP = {
    load: (s) => {
        s.skip(16);
        return c.QCMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47039, 16, val);
    },
};
exports.SEMPTY = {
    load: (s) => {
        s.skip(16);
        return c.SEMPTY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50944, 16, val);
    },
};
exports.SDEMPTY = {
    load: (s) => {
        s.skip(16);
        return c.SDEMPTY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50945, 16, val);
    },
};
exports.SREMPTY = {
    load: (s) => {
        s.skip(16);
        return c.SREMPTY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50946, 16, val);
    },
};
exports.SDFIRST = {
    load: (s) => {
        s.skip(16);
        return c.SDFIRST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50947, 16, val);
    },
};
exports.SDLEXCMP = {
    load: (s) => {
        s.skip(16);
        return c.SDLEXCMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50948, 16, val);
    },
};
exports.SDEQ = {
    load: (s) => {
        s.skip(16);
        return c.SDEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50949, 16, val);
    },
};
exports.SDPFX = {
    load: (s) => {
        s.skip(16);
        return c.SDPFX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50952, 16, val);
    },
};
exports.SDPFXREV = {
    load: (s) => {
        s.skip(16);
        return c.SDPFXREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50953, 16, val);
    },
};
exports.SDPPFX = {
    load: (s) => {
        s.skip(16);
        return c.SDPPFX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50954, 16, val);
    },
};
exports.SDPPFXREV = {
    load: (s) => {
        s.skip(16);
        return c.SDPPFXREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50955, 16, val);
    },
};
exports.SDSFX = {
    load: (s) => {
        s.skip(16);
        return c.SDSFX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50956, 16, val);
    },
};
exports.SDSFXREV = {
    load: (s) => {
        s.skip(16);
        return c.SDSFXREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50957, 16, val);
    },
};
exports.SDPSFX = {
    load: (s) => {
        s.skip(16);
        return c.SDPSFX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50958, 16, val);
    },
};
exports.SDPSFXREV = {
    load: (s) => {
        s.skip(16);
        return c.SDPSFXREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50959, 16, val);
    },
};
exports.SDCNTLEAD0 = {
    load: (s) => {
        s.skip(16);
        return c.SDCNTLEAD0();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50960, 16, val);
    },
};
exports.SDCNTLEAD1 = {
    load: (s) => {
        s.skip(16);
        return c.SDCNTLEAD1();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50961, 16, val);
    },
};
exports.SDCNTTRAIL0 = {
    load: (s) => {
        s.skip(16);
        return c.SDCNTTRAIL0();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50962, 16, val);
    },
};
exports.SDCNTTRAIL1 = {
    load: (s) => {
        s.skip(16);
        return c.SDCNTTRAIL1();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50963, 16, val);
    },
};
exports.NEWC = {
    load: (s) => {
        s.skip(8);
        return c.NEWC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(200, 8, val);
    },
};
exports.ENDC = {
    load: (s) => {
        s.skip(8);
        return c.ENDC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(201, 8, val);
    },
};
exports.ENDCST = {
    load: (s) => {
        s.skip(8);
        return c.ENDCST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(205, 8, val);
    },
};
exports.STBREF = {
    load: (s) => {
        s.skip(16);
        return c.STBREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53009, 16, val);
    },
};
exports.STB = {
    load: (s) => {
        s.skip(16);
        return c.STB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53011, 16, val);
    },
};
exports.STREFR = {
    load: (s) => {
        s.skip(16);
        return c.STREFR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53012, 16, val);
    },
};
exports.STBREFR = {
    load: (s) => {
        s.skip(16);
        return c.STBREFR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53013, 16, val);
    },
};
exports.STSLICER = {
    load: (s) => {
        s.skip(16);
        return c.STSLICER();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53014, 16, val);
    },
};
exports.STBR = {
    load: (s) => {
        s.skip(16);
        return c.STBR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53015, 16, val);
    },
};
exports.STREFQ = {
    load: (s) => {
        s.skip(16);
        return c.STREFQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53016, 16, val);
    },
};
exports.STBREFQ = {
    load: (s) => {
        s.skip(16);
        return c.STBREFQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53017, 16, val);
    },
};
exports.STSLICEQ = {
    load: (s) => {
        s.skip(16);
        return c.STSLICEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53018, 16, val);
    },
};
exports.STBQ = {
    load: (s) => {
        s.skip(16);
        return c.STBQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53019, 16, val);
    },
};
exports.STREFRQ = {
    load: (s) => {
        s.skip(16);
        return c.STREFRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53020, 16, val);
    },
};
exports.STBREFRQ = {
    load: (s) => {
        s.skip(16);
        return c.STBREFRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53021, 16, val);
    },
};
exports.STSLICERQ = {
    load: (s) => {
        s.skip(16);
        return c.STSLICERQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53022, 16, val);
    },
};
exports.STBRQ = {
    load: (s) => {
        s.skip(16);
        return c.STBRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53023, 16, val);
    },
};
exports.ENDXC = {
    load: (s) => {
        s.skip(16);
        return c.ENDXC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53027, 16, val);
    },
};
exports.BDEPTH = {
    load: (s) => {
        s.skip(16);
        return c.BDEPTH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53040, 16, val);
    },
};
exports.BBITS = {
    load: (s) => {
        s.skip(16);
        return c.BBITS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53041, 16, val);
    },
};
exports.BREFS = {
    load: (s) => {
        s.skip(16);
        return c.BREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53042, 16, val);
    },
};
exports.BBITREFS = {
    load: (s) => {
        s.skip(16);
        return c.BBITREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53043, 16, val);
    },
};
exports.BREMBITS = {
    load: (s) => {
        s.skip(16);
        return c.BREMBITS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53045, 16, val);
    },
};
exports.BREMREFS = {
    load: (s) => {
        s.skip(16);
        return c.BREMREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53046, 16, val);
    },
};
exports.BREMBITREFS = {
    load: (s) => {
        s.skip(16);
        return c.BREMBITREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53047, 16, val);
    },
};
exports.BCHKREFS = {
    load: (s) => {
        s.skip(16);
        return c.BCHKREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53050, 16, val);
    },
};
exports.BCHKBITREFS = {
    load: (s) => {
        s.skip(16);
        return c.BCHKBITREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53051, 16, val);
    },
};
exports.BCHKREFSQ = {
    load: (s) => {
        s.skip(16);
        return c.BCHKREFSQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53054, 16, val);
    },
};
exports.BCHKBITREFSQ = {
    load: (s) => {
        s.skip(16);
        return c.BCHKBITREFSQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53055, 16, val);
    },
};
exports.STZEROES = {
    load: (s) => {
        s.skip(16);
        return c.STZEROES();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53056, 16, val);
    },
};
exports.STONES = {
    load: (s) => {
        s.skip(16);
        return c.STONES();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53057, 16, val);
    },
};
exports.STSAME = {
    load: (s) => {
        s.skip(16);
        return c.STSAME();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53058, 16, val);
    },
};
exports.CTOS = {
    load: (s) => {
        s.skip(8);
        return c.CTOS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(208, 8, val);
    },
};
exports.ENDS = {
    load: (s) => {
        s.skip(8);
        return c.ENDS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(209, 8, val);
    },
};
exports.LDREF = {
    load: (s) => {
        s.skip(8);
        return c.LDREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(212, 8, val);
    },
};
exports.LDREFRTOS = {
    load: (s) => {
        s.skip(8);
        return c.LDREFRTOS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(213, 8, val);
    },
};
exports.SDCUTFIRST = {
    load: (s) => {
        s.skip(16);
        return c.SDCUTFIRST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55072, 16, val);
    },
};
exports.SDSKIPFIRST = {
    load: (s) => {
        s.skip(16);
        return c.SDSKIPFIRST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55073, 16, val);
    },
};
exports.SDCUTLAST = {
    load: (s) => {
        s.skip(16);
        return c.SDCUTLAST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55074, 16, val);
    },
};
exports.SDSKIPLAST = {
    load: (s) => {
        s.skip(16);
        return c.SDSKIPLAST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55075, 16, val);
    },
};
exports.SDSUBSTR = {
    load: (s) => {
        s.skip(16);
        return c.SDSUBSTR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55076, 16, val);
    },
};
exports.SCUTFIRST = {
    load: (s) => {
        s.skip(16);
        return c.SCUTFIRST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55088, 16, val);
    },
};
exports.SSKIPFIRST = {
    load: (s) => {
        s.skip(16);
        return c.SSKIPFIRST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55089, 16, val);
    },
};
exports.SCUTLAST = {
    load: (s) => {
        s.skip(16);
        return c.SCUTLAST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55090, 16, val);
    },
};
exports.SSKIPLAST = {
    load: (s) => {
        s.skip(16);
        return c.SSKIPLAST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55091, 16, val);
    },
};
exports.SUBSLICE = {
    load: (s) => {
        s.skip(16);
        return c.SUBSLICE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55092, 16, val);
    },
};
exports.SPLIT = {
    load: (s) => {
        s.skip(16);
        return c.SPLIT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55094, 16, val);
    },
};
exports.SPLITQ = {
    load: (s) => {
        s.skip(16);
        return c.SPLITQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55095, 16, val);
    },
};
exports.XCTOS = {
    load: (s) => {
        s.skip(16);
        return c.XCTOS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55097, 16, val);
    },
};
exports.XLOAD = {
    load: (s) => {
        s.skip(16);
        return c.XLOAD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55098, 16, val);
    },
};
exports.XLOADQ = {
    load: (s) => {
        s.skip(16);
        return c.XLOADQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55099, 16, val);
    },
};
exports.SCHKBITS = {
    load: (s) => {
        s.skip(16);
        return c.SCHKBITS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55105, 16, val);
    },
};
exports.SCHKREFS = {
    load: (s) => {
        s.skip(16);
        return c.SCHKREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55106, 16, val);
    },
};
exports.SCHKBITREFS = {
    load: (s) => {
        s.skip(16);
        return c.SCHKBITREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55107, 16, val);
    },
};
exports.SCHKBITSQ = {
    load: (s) => {
        s.skip(16);
        return c.SCHKBITSQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55109, 16, val);
    },
};
exports.SCHKREFSQ = {
    load: (s) => {
        s.skip(16);
        return c.SCHKREFSQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55110, 16, val);
    },
};
exports.SCHKBITREFSQ = {
    load: (s) => {
        s.skip(16);
        return c.SCHKBITREFSQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55111, 16, val);
    },
};
exports.PLDREFVAR = {
    load: (s) => {
        s.skip(16);
        return c.PLDREFVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55112, 16, val);
    },
};
exports.SBITS = {
    load: (s) => {
        s.skip(16);
        return c.SBITS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55113, 16, val);
    },
};
exports.SREFS = {
    load: (s) => {
        s.skip(16);
        return c.SREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55114, 16, val);
    },
};
exports.SBITREFS = {
    load: (s) => {
        s.skip(16);
        return c.SBITREFS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55115, 16, val);
    },
};
exports.LDZEROES = {
    load: (s) => {
        s.skip(16);
        return c.LDZEROES();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55136, 16, val);
    },
};
exports.LDONES = {
    load: (s) => {
        s.skip(16);
        return c.LDONES();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55137, 16, val);
    },
};
exports.LDSAME = {
    load: (s) => {
        s.skip(16);
        return c.LDSAME();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55138, 16, val);
    },
};
exports.SDEPTH = {
    load: (s) => {
        s.skip(16);
        return c.SDEPTH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55140, 16, val);
    },
};
exports.CDEPTH = {
    load: (s) => {
        s.skip(16);
        return c.CDEPTH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55141, 16, val);
    },
};
exports.CLEVEL = {
    load: (s) => {
        s.skip(16);
        return c.CLEVEL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55142, 16, val);
    },
};
exports.CLEVELMASK = {
    load: (s) => {
        s.skip(16);
        return c.CLEVELMASK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55143, 16, val);
    },
};
exports.CHASHIX = {
    load: (s) => {
        s.skip(16);
        return c.CHASHIX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55152, 16, val);
    },
};
exports.CDEPTHIX = {
    load: (s) => {
        s.skip(16);
        return c.CDEPTHIX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55153, 16, val);
    },
};
exports.EXECUTE = {
    load: (s) => {
        s.skip(8);
        return c.EXECUTE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(216, 8, val);
    },
};
exports.JMPX = {
    load: (s) => {
        s.skip(8);
        return c.JMPX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(217, 8, val);
    },
};
exports.RET = {
    load: (s) => {
        s.skip(16);
        return c.RET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56112, 16, val);
    },
};
exports.RETALT = {
    load: (s) => {
        s.skip(16);
        return c.RETALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56113, 16, val);
    },
};
exports.RETBOOL = {
    load: (s) => {
        s.skip(16);
        return c.RETBOOL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56114, 16, val);
    },
};
exports.CALLCC = {
    load: (s) => {
        s.skip(16);
        return c.CALLCC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56116, 16, val);
    },
};
exports.JMPXDATA = {
    load: (s) => {
        s.skip(16);
        return c.JMPXDATA();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56117, 16, val);
    },
};
exports.CALLXVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.CALLXVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56120, 16, val);
    },
};
exports.RETVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.RETVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56121, 16, val);
    },
};
exports.JMPXVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.JMPXVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56122, 16, val);
    },
};
exports.CALLCCVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.CALLCCVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56123, 16, val);
    },
};
exports.RETDATA = {
    load: (s) => {
        s.skip(16);
        return c.RETDATA();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56127, 16, val);
    },
};
exports.RUNVMX = {
    load: (s) => {
        s.skip(16);
        return c.RUNVMX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56144, 16, val);
    },
};
exports.IFRET = {
    load: (s) => {
        s.skip(8);
        return c.IFRET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(220, 8, val);
    },
};
exports.IFNOTRET = {
    load: (s) => {
        s.skip(8);
        return c.IFNOTRET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(221, 8, val);
    },
};
exports.IF = {
    load: (s) => {
        s.skip(8);
        return c.IF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(222, 8, val);
    },
};
exports.IFNOT = {
    load: (s) => {
        s.skip(8);
        return c.IFNOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(223, 8, val);
    },
};
exports.IFJMP = {
    load: (s) => {
        s.skip(8);
        return c.IFJMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(224, 8, val);
    },
};
exports.IFNOTJMP = {
    load: (s) => {
        s.skip(8);
        return c.IFNOTJMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(225, 8, val);
    },
};
exports.IFELSE = {
    load: (s) => {
        s.skip(8);
        return c.IFELSE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(226, 8, val);
    },
};
exports.CONDSEL = {
    load: (s) => {
        s.skip(16);
        return c.CONDSEL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58116, 16, val);
    },
};
exports.CONDSELCHK = {
    load: (s) => {
        s.skip(16);
        return c.CONDSELCHK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58117, 16, val);
    },
};
exports.IFRETALT = {
    load: (s) => {
        s.skip(16);
        return c.IFRETALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58120, 16, val);
    },
};
exports.IFNOTRETALT = {
    load: (s) => {
        s.skip(16);
        return c.IFNOTRETALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58121, 16, val);
    },
};
exports.REPEAT = {
    load: (s) => {
        s.skip(8);
        return c.REPEAT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(228, 8, val);
    },
};
exports.REPEATEND = {
    load: (s) => {
        s.skip(8);
        return c.REPEATEND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(229, 8, val);
    },
};
exports.UNTIL = {
    load: (s) => {
        s.skip(8);
        return c.UNTIL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(230, 8, val);
    },
};
exports.UNTILEND = {
    load: (s) => {
        s.skip(8);
        return c.UNTILEND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(231, 8, val);
    },
};
exports.WHILE = {
    load: (s) => {
        s.skip(8);
        return c.WHILE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(232, 8, val);
    },
};
exports.WHILEEND = {
    load: (s) => {
        s.skip(8);
        return c.WHILEEND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(233, 8, val);
    },
};
exports.AGAIN = {
    load: (s) => {
        s.skip(8);
        return c.AGAIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(234, 8, val);
    },
};
exports.AGAINEND = {
    load: (s) => {
        s.skip(8);
        return c.AGAINEND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(235, 8, val);
    },
};
exports.REPEATBRK = {
    load: (s) => {
        s.skip(16);
        return c.REPEATBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58132, 16, val);
    },
};
exports.REPEATENDBRK = {
    load: (s) => {
        s.skip(16);
        return c.REPEATENDBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58133, 16, val);
    },
};
exports.UNTILBRK = {
    load: (s) => {
        s.skip(16);
        return c.UNTILBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58134, 16, val);
    },
};
exports.UNTILENDBRK = {
    load: (s) => {
        s.skip(16);
        return c.UNTILENDBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58135, 16, val);
    },
};
exports.WHILEBRK = {
    load: (s) => {
        s.skip(16);
        return c.WHILEBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58136, 16, val);
    },
};
exports.WHILEENDBRK = {
    load: (s) => {
        s.skip(16);
        return c.WHILEENDBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58137, 16, val);
    },
};
exports.AGAINBRK = {
    load: (s) => {
        s.skip(16);
        return c.AGAINBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58138, 16, val);
    },
};
exports.AGAINENDBRK = {
    load: (s) => {
        s.skip(16);
        return c.AGAINENDBRK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58139, 16, val);
    },
};
exports.RETURNVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.RETURNVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60688, 16, val);
    },
};
exports.SETCONTVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.SETCONTVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60689, 16, val);
    },
};
exports.SETNUMVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.SETNUMVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60690, 16, val);
    },
};
exports.BLESS = {
    load: (s) => {
        s.skip(16);
        return c.BLESS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60702, 16, val);
    },
};
exports.BLESSVARARGS = {
    load: (s) => {
        s.skip(16);
        return c.BLESSVARARGS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60703, 16, val);
    },
};
exports.PUSHCTRX = {
    load: (s) => {
        s.skip(16);
        return c.PUSHCTRX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60896, 16, val);
    },
};
exports.POPCTRX = {
    load: (s) => {
        s.skip(16);
        return c.POPCTRX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60897, 16, val);
    },
};
exports.SETCONTCTRX = {
    load: (s) => {
        s.skip(16);
        return c.SETCONTCTRX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60898, 16, val);
    },
};
exports.SETCONTCTRMANYX = {
    load: (s) => {
        s.skip(16);
        return c.SETCONTCTRMANYX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60900, 16, val);
    },
};
exports.BOOLAND = {
    load: (s) => {
        s.skip(16);
        return c.BOOLAND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60912, 16, val);
    },
};
exports.BOOLOR = {
    load: (s) => {
        s.skip(16);
        return c.BOOLOR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60913, 16, val);
    },
};
exports.COMPOSBOTH = {
    load: (s) => {
        s.skip(16);
        return c.COMPOSBOTH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60914, 16, val);
    },
};
exports.ATEXIT = {
    load: (s) => {
        s.skip(16);
        return c.ATEXIT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60915, 16, val);
    },
};
exports.ATEXITALT = {
    load: (s) => {
        s.skip(16);
        return c.ATEXITALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60916, 16, val);
    },
};
exports.SETEXITALT = {
    load: (s) => {
        s.skip(16);
        return c.SETEXITALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60917, 16, val);
    },
};
exports.THENRET = {
    load: (s) => {
        s.skip(16);
        return c.THENRET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60918, 16, val);
    },
};
exports.THENRETALT = {
    load: (s) => {
        s.skip(16);
        return c.THENRETALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60919, 16, val);
    },
};
exports.INVERT = {
    load: (s) => {
        s.skip(16);
        return c.INVERT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60920, 16, val);
    },
};
exports.BOOLEVAL = {
    load: (s) => {
        s.skip(16);
        return c.BOOLEVAL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60921, 16, val);
    },
};
exports.SAMEALT = {
    load: (s) => {
        s.skip(16);
        return c.SAMEALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60922, 16, val);
    },
};
exports.SAMEALTSAVE = {
    load: (s) => {
        s.skip(16);
        return c.SAMEALTSAVE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60923, 16, val);
    },
};
exports.TRY = {
    load: (s) => {
        s.skip(16);
        return c.TRY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62207, 16, val);
    },
};
exports.SETCPX = {
    load: (s) => {
        s.skip(16);
        return c.SETCPX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65520, 16, val);
    },
};
exports.STDICT = {
    load: (s) => {
        s.skip(16);
        return c.STDICT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62464, 16, val);
    },
};
exports.SKIPDICT = {
    load: (s) => {
        s.skip(16);
        return c.SKIPDICT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62465, 16, val);
    },
};
exports.LDDICTS = {
    load: (s) => {
        s.skip(16);
        return c.LDDICTS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62466, 16, val);
    },
};
exports.PLDDICTS = {
    load: (s) => {
        s.skip(16);
        return c.PLDDICTS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62467, 16, val);
    },
};
exports.LDDICT = {
    load: (s) => {
        s.skip(16);
        return c.LDDICT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62468, 16, val);
    },
};
exports.PLDDICT = {
    load: (s) => {
        s.skip(16);
        return c.PLDDICT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62469, 16, val);
    },
};
exports.LDDICTQ = {
    load: (s) => {
        s.skip(16);
        return c.LDDICTQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62470, 16, val);
    },
};
exports.PLDDICTQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDDICTQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62471, 16, val);
    },
};
exports.PFXDICTSET = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTSET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62576, 16, val);
    },
};
exports.PFXDICTREPLACE = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTREPLACE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62577, 16, val);
    },
};
exports.PFXDICTADD = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62578, 16, val);
    },
};
exports.PFXDICTDEL = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTDEL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62579, 16, val);
    },
};
exports.PFXDICTGETQ = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTGETQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62632, 16, val);
    },
};
exports.PFXDICTGET = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62633, 16, val);
    },
};
exports.PFXDICTGETJMP = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTGETJMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62634, 16, val);
    },
};
exports.PFXDICTGETEXEC = {
    load: (s) => {
        s.skip(16);
        return c.PFXDICTGETEXEC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62635, 16, val);
    },
};
exports.NOP = {
    load: (s) => {
        s.skip(8);
        return c.NOP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(0, 8, val);
    },
};
exports.SWAP = {
    load: (s) => {
        s.skip(8);
        return c.SWAP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1, 8, val);
    },
};
exports.DUP = {
    load: (s) => {
        s.skip(8);
        return c.DUP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(32, 8, val);
    },
};
exports.OVER = {
    load: (s) => {
        s.skip(8);
        return c.OVER();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(33, 8, val);
    },
};
exports.DROP = {
    load: (s) => {
        s.skip(8);
        return c.DROP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(48, 8, val);
    },
};
exports.NIP = {
    load: (s) => {
        s.skip(8);
        return c.NIP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(49, 8, val);
    },
};
exports.ROT = {
    load: (s) => {
        s.skip(8);
        return c.ROT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(88, 8, val);
    },
};
exports.ROTREV = {
    load: (s) => {
        s.skip(8);
        return c.ROTREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(89, 8, val);
    },
};
exports.PICK = {
    load: (s) => {
        s.skip(8);
        return c.PICK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(96, 8, val);
    },
};
exports.ROLL = {
    load: (s) => {
        s.skip(8);
        return c.ROLL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(97, 8, val);
    },
};
exports.ROLLREV = {
    load: (s) => {
        s.skip(8);
        return c.ROLLREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(98, 8, val);
    },
};
exports.BLKSWX = {
    load: (s) => {
        s.skip(8);
        return c.BLKSWX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(99, 8, val);
    },
};
exports.REVX = {
    load: (s) => {
        s.skip(8);
        return c.REVX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(100, 8, val);
    },
};
exports.DROPX = {
    load: (s) => {
        s.skip(8);
        return c.DROPX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(101, 8, val);
    },
};
exports.TUCK = {
    load: (s) => {
        s.skip(8);
        return c.TUCK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(102, 8, val);
    },
};
exports.XCHGX = {
    load: (s) => {
        s.skip(8);
        return c.XCHGX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(103, 8, val);
    },
};
exports.DEPTH = {
    load: (s) => {
        s.skip(8);
        return c.DEPTH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(104, 8, val);
    },
};
exports.CHKDEPTH = {
    load: (s) => {
        s.skip(8);
        return c.CHKDEPTH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(105, 8, val);
    },
};
exports.ONLYTOPX = {
    load: (s) => {
        s.skip(8);
        return c.ONLYTOPX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(106, 8, val);
    },
};
exports.ONLYX = {
    load: (s) => {
        s.skip(8);
        return c.ONLYX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(107, 8, val);
    },
};
exports.ACCEPT = {
    load: (s) => {
        s.skip(16);
        return c.ACCEPT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63488, 16, val);
    },
};
exports.SETGASLIMIT = {
    load: (s) => {
        s.skip(16);
        return c.SETGASLIMIT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63489, 16, val);
    },
};
exports.GASCONSUMED = {
    load: (s) => {
        s.skip(16);
        return c.GASCONSUMED();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63495, 16, val);
    },
};
exports.COMMIT = {
    load: (s) => {
        s.skip(16);
        return c.COMMIT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63503, 16, val);
    },
};
exports.NOW = {
    load: (s) => {
        s.skip(16);
        return c.NOW();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63523, 16, val);
    },
};
exports.BLOCKLT = {
    load: (s) => {
        s.skip(16);
        return c.BLOCKLT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63524, 16, val);
    },
};
exports.LTIME = {
    load: (s) => {
        s.skip(16);
        return c.LTIME();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63525, 16, val);
    },
};
exports.RANDSEED = {
    load: (s) => {
        s.skip(16);
        return c.RANDSEED();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63526, 16, val);
    },
};
exports.BALANCE = {
    load: (s) => {
        s.skip(16);
        return c.BALANCE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63527, 16, val);
    },
};
exports.MYADDR = {
    load: (s) => {
        s.skip(16);
        return c.MYADDR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63528, 16, val);
    },
};
exports.CONFIGROOT = {
    load: (s) => {
        s.skip(16);
        return c.CONFIGROOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63529, 16, val);
    },
};
exports.MYCODE = {
    load: (s) => {
        s.skip(16);
        return c.MYCODE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63530, 16, val);
    },
};
exports.INCOMINGVALUE = {
    load: (s) => {
        s.skip(16);
        return c.INCOMINGVALUE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63531, 16, val);
    },
};
exports.STORAGEFEES = {
    load: (s) => {
        s.skip(16);
        return c.STORAGEFEES();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63532, 16, val);
    },
};
exports.PREVBLOCKSINFOTUPLE = {
    load: (s) => {
        s.skip(16);
        return c.PREVBLOCKSINFOTUPLE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63533, 16, val);
    },
};
exports.UNPACKEDCONFIGTUPLE = {
    load: (s) => {
        s.skip(16);
        return c.UNPACKEDCONFIGTUPLE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63534, 16, val);
    },
};
exports.DUEPAYMENT = {
    load: (s) => {
        s.skip(16);
        return c.DUEPAYMENT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63535, 16, val);
    },
};
exports.CONFIGDICT = {
    load: (s) => {
        s.skip(16);
        return c.CONFIGDICT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63536, 16, val);
    },
};
exports.CONFIGPARAM = {
    load: (s) => {
        s.skip(16);
        return c.CONFIGPARAM();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63538, 16, val);
    },
};
exports.CONFIGOPTPARAM = {
    load: (s) => {
        s.skip(16);
        return c.CONFIGOPTPARAM();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63539, 16, val);
    },
};
exports.PREVMCBLOCKS = {
    load: (s) => {
        s.skip(24);
        return c.PREVMCBLOCKS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16266240, 24, val);
    },
};
exports.PREVKEYBLOCK = {
    load: (s) => {
        s.skip(24);
        return c.PREVKEYBLOCK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16266241, 24, val);
    },
};
exports.PREVMCBLOCKS_100 = {
    load: (s) => {
        s.skip(24);
        return c.PREVMCBLOCKS_100();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16266242, 24, val);
    },
};
exports.GLOBALID = {
    load: (s) => {
        s.skip(16);
        return c.GLOBALID();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63541, 16, val);
    },
};
exports.GETGASFEE = {
    load: (s) => {
        s.skip(16);
        return c.GETGASFEE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63542, 16, val);
    },
};
exports.GETSTORAGEFEE = {
    load: (s) => {
        s.skip(16);
        return c.GETSTORAGEFEE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63543, 16, val);
    },
};
exports.GETFORWARDFEE = {
    load: (s) => {
        s.skip(16);
        return c.GETFORWARDFEE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63544, 16, val);
    },
};
exports.GETPRECOMPILEDGAS = {
    load: (s) => {
        s.skip(16);
        return c.GETPRECOMPILEDGAS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63545, 16, val);
    },
};
exports.GETORIGINALFWDFEE = {
    load: (s) => {
        s.skip(16);
        return c.GETORIGINALFWDFEE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63546, 16, val);
    },
};
exports.GETGASFEESIMPLE = {
    load: (s) => {
        s.skip(16);
        return c.GETGASFEESIMPLE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63547, 16, val);
    },
};
exports.GETFORWARDFEESIMPLE = {
    load: (s) => {
        s.skip(16);
        return c.GETFORWARDFEESIMPLE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63548, 16, val);
    },
};
exports.GETGLOBVAR = {
    load: (s) => {
        s.skip(16);
        return c.GETGLOBVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63552, 16, val);
    },
};
exports.SETGLOBVAR = {
    load: (s) => {
        s.skip(16);
        return c.SETGLOBVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63584, 16, val);
    },
};
exports.RANDU256 = {
    load: (s) => {
        s.skip(16);
        return c.RANDU256();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63504, 16, val);
    },
};
exports.RAND = {
    load: (s) => {
        s.skip(16);
        return c.RAND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63505, 16, val);
    },
};
exports.SETRAND = {
    load: (s) => {
        s.skip(16);
        return c.SETRAND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63508, 16, val);
    },
};
exports.ADDRAND = {
    load: (s) => {
        s.skip(16);
        return c.ADDRAND();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63509, 16, val);
    },
};
exports.HASHCU = {
    load: (s) => {
        s.skip(16);
        return c.HASHCU();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63744, 16, val);
    },
};
exports.HASHSU = {
    load: (s) => {
        s.skip(16);
        return c.HASHSU();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63745, 16, val);
    },
};
exports.SHA256U = {
    load: (s) => {
        s.skip(16);
        return c.SHA256U();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63746, 16, val);
    },
};
exports.CHKSIGNU = {
    load: (s) => {
        s.skip(16);
        return c.CHKSIGNU();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63760, 16, val);
    },
};
exports.CHKSIGNS = {
    load: (s) => {
        s.skip(16);
        return c.CHKSIGNS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63761, 16, val);
    },
};
exports.ECRECOVER = {
    load: (s) => {
        s.skip(16);
        return c.ECRECOVER();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63762, 16, val);
    },
};
exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD = {
    load: (s) => {
        s.skip(16);
        return c.SECP256K1_XONLY_PUBKEY_TWEAK_ADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63763, 16, val);
    },
};
exports.P256_CHKSIGNU = {
    load: (s) => {
        s.skip(16);
        return c.P256_CHKSIGNU();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63764, 16, val);
    },
};
exports.P256_CHKSIGNS = {
    load: (s) => {
        s.skip(16);
        return c.P256_CHKSIGNS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63765, 16, val);
    },
};
exports.RIST255_FROMHASH = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_FROMHASH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63776, 16, val);
    },
};
exports.RIST255_VALIDATE = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_VALIDATE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63777, 16, val);
    },
};
exports.RIST255_ADD = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_ADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63778, 16, val);
    },
};
exports.RIST255_SUB = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_SUB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63779, 16, val);
    },
};
exports.RIST255_MUL = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_MUL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63780, 16, val);
    },
};
exports.RIST255_MULBASE = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_MULBASE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63781, 16, val);
    },
};
exports.RIST255_PUSHL = {
    load: (s) => {
        s.skip(16);
        return c.RIST255_PUSHL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63782, 16, val);
    },
};
exports.RIST255_QVALIDATE = {
    load: (s) => {
        s.skip(24);
        return c.RIST255_QVALIDATE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12056865, 24, val);
    },
};
exports.RIST255_QADD = {
    load: (s) => {
        s.skip(24);
        return c.RIST255_QADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12056866, 24, val);
    },
};
exports.RIST255_QSUB = {
    load: (s) => {
        s.skip(24);
        return c.RIST255_QSUB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12056867, 24, val);
    },
};
exports.RIST255_QMUL = {
    load: (s) => {
        s.skip(24);
        return c.RIST255_QMUL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12056868, 24, val);
    },
};
exports.RIST255_QMULBASE = {
    load: (s) => {
        s.skip(24);
        return c.RIST255_QMULBASE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12056869, 24, val);
    },
};
exports.BLS_VERIFY = {
    load: (s) => {
        s.skip(24);
        return c.BLS_VERIFY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330752, 24, val);
    },
};
exports.BLS_AGGREGATE = {
    load: (s) => {
        s.skip(24);
        return c.BLS_AGGREGATE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330753, 24, val);
    },
};
exports.BLS_FASTAGGREGATEVERIFY = {
    load: (s) => {
        s.skip(24);
        return c.BLS_FASTAGGREGATEVERIFY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330754, 24, val);
    },
};
exports.BLS_AGGREGATEVERIFY = {
    load: (s) => {
        s.skip(24);
        return c.BLS_AGGREGATEVERIFY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330755, 24, val);
    },
};
exports.BLS_G1_ADD = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_ADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330768, 24, val);
    },
};
exports.BLS_G1_SUB = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_SUB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330769, 24, val);
    },
};
exports.BLS_G1_NEG = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_NEG();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330770, 24, val);
    },
};
exports.BLS_G1_MUL = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_MUL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330771, 24, val);
    },
};
exports.BLS_G1_MULTIEXP = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_MULTIEXP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330772, 24, val);
    },
};
exports.BLS_G1_ZERO = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_ZERO();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330773, 24, val);
    },
};
exports.BLS_MAP_TO_G1 = {
    load: (s) => {
        s.skip(24);
        return c.BLS_MAP_TO_G1();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330774, 24, val);
    },
};
exports.BLS_G1_INGROUP = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_INGROUP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330775, 24, val);
    },
};
exports.BLS_G1_ISZERO = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G1_ISZERO();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330776, 24, val);
    },
};
exports.BLS_G2_ADD = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_ADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330784, 24, val);
    },
};
exports.BLS_G2_SUB = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_SUB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330785, 24, val);
    },
};
exports.BLS_G2_NEG = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_NEG();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330786, 24, val);
    },
};
exports.BLS_G2_MUL = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_MUL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330787, 24, val);
    },
};
exports.BLS_G2_MULTIEXP = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_MULTIEXP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330788, 24, val);
    },
};
exports.BLS_G2_ZERO = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_ZERO();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330789, 24, val);
    },
};
exports.BLS_MAP_TO_G2 = {
    load: (s) => {
        s.skip(24);
        return c.BLS_MAP_TO_G2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330790, 24, val);
    },
};
exports.BLS_G2_INGROUP = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_INGROUP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330791, 24, val);
    },
};
exports.BLS_G2_ISZERO = {
    load: (s) => {
        s.skip(24);
        return c.BLS_G2_ISZERO();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330792, 24, val);
    },
};
exports.BLS_PAIRING = {
    load: (s) => {
        s.skip(24);
        return c.BLS_PAIRING();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330800, 24, val);
    },
};
exports.BLS_PUSHR = {
    load: (s) => {
        s.skip(24);
        return c.BLS_PUSHR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16330801, 24, val);
    },
};
exports.CDATASIZEQ = {
    load: (s) => {
        s.skip(16);
        return c.CDATASIZEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63808, 16, val);
    },
};
exports.CDATASIZE = {
    load: (s) => {
        s.skip(16);
        return c.CDATASIZE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63809, 16, val);
    },
};
exports.SDATASIZEQ = {
    load: (s) => {
        s.skip(16);
        return c.SDATASIZEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63810, 16, val);
    },
};
exports.SDATASIZE = {
    load: (s) => {
        s.skip(16);
        return c.SDATASIZE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63811, 16, val);
    },
};
exports.LDGRAMS = {
    load: (s) => {
        s.skip(16);
        return c.LDGRAMS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64000, 16, val);
    },
};
exports.LDVARINT16 = {
    load: (s) => {
        s.skip(16);
        return c.LDVARINT16();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64001, 16, val);
    },
};
exports.STGRAMS = {
    load: (s) => {
        s.skip(16);
        return c.STGRAMS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64002, 16, val);
    },
};
exports.STVARINT16 = {
    load: (s) => {
        s.skip(16);
        return c.STVARINT16();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64003, 16, val);
    },
};
exports.LDVARUINT32 = {
    load: (s) => {
        s.skip(16);
        return c.LDVARUINT32();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64004, 16, val);
    },
};
exports.LDVARINT32 = {
    load: (s) => {
        s.skip(16);
        return c.LDVARINT32();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64005, 16, val);
    },
};
exports.STVARUINT32 = {
    load: (s) => {
        s.skip(16);
        return c.STVARUINT32();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64006, 16, val);
    },
};
exports.STVARINT32 = {
    load: (s) => {
        s.skip(16);
        return c.STVARINT32();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64007, 16, val);
    },
};
exports.LDMSGADDR = {
    load: (s) => {
        s.skip(16);
        return c.LDMSGADDR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64064, 16, val);
    },
};
exports.LDMSGADDRQ = {
    load: (s) => {
        s.skip(16);
        return c.LDMSGADDRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64065, 16, val);
    },
};
exports.PARSEMSGADDR = {
    load: (s) => {
        s.skip(16);
        return c.PARSEMSGADDR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64066, 16, val);
    },
};
exports.PARSEMSGADDRQ = {
    load: (s) => {
        s.skip(16);
        return c.PARSEMSGADDRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64067, 16, val);
    },
};
exports.REWRITESTDADDR = {
    load: (s) => {
        s.skip(16);
        return c.REWRITESTDADDR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64068, 16, val);
    },
};
exports.REWRITESTDADDRQ = {
    load: (s) => {
        s.skip(16);
        return c.REWRITESTDADDRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64069, 16, val);
    },
};
exports.REWRITEVARADDR = {
    load: (s) => {
        s.skip(16);
        return c.REWRITEVARADDR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64070, 16, val);
    },
};
exports.REWRITEVARADDRQ = {
    load: (s) => {
        s.skip(16);
        return c.REWRITEVARADDRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64071, 16, val);
    },
};
exports.SENDRAWMSG = {
    load: (s) => {
        s.skip(16);
        return c.SENDRAWMSG();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64256, 16, val);
    },
};
exports.RAWRESERVE = {
    load: (s) => {
        s.skip(16);
        return c.RAWRESERVE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64258, 16, val);
    },
};
exports.RAWRESERVEX = {
    load: (s) => {
        s.skip(16);
        return c.RAWRESERVEX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64259, 16, val);
    },
};
exports.SETCODE = {
    load: (s) => {
        s.skip(16);
        return c.SETCODE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64260, 16, val);
    },
};
exports.SETLIBCODE = {
    load: (s) => {
        s.skip(16);
        return c.SETLIBCODE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64262, 16, val);
    },
};
exports.CHANGELIB = {
    load: (s) => {
        s.skip(16);
        return c.CHANGELIB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64263, 16, val);
    },
};
exports.SENDMSG = {
    load: (s) => {
        s.skip(16);
        return c.SENDMSG();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(64264, 16, val);
    },
};
exports.PUSHNULL = {
    load: (s) => {
        s.skip(8);
        return c.PUSHNULL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(109, 8, val);
    },
};
exports.ISNULL = {
    load: (s) => {
        s.skip(8);
        return c.ISNULL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(110, 8, val);
    },
};
exports.TUPLEVAR = {
    load: (s) => {
        s.skip(16);
        return c.TUPLEVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28544, 16, val);
    },
};
exports.INDEXVAR = {
    load: (s) => {
        s.skip(16);
        return c.INDEXVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28545, 16, val);
    },
};
exports.UNTUPLEVAR = {
    load: (s) => {
        s.skip(16);
        return c.UNTUPLEVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28546, 16, val);
    },
};
exports.UNPACKFIRSTVAR = {
    load: (s) => {
        s.skip(16);
        return c.UNPACKFIRSTVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28547, 16, val);
    },
};
exports.EXPLODEVAR = {
    load: (s) => {
        s.skip(16);
        return c.EXPLODEVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28548, 16, val);
    },
};
exports.SETINDEXVAR = {
    load: (s) => {
        s.skip(16);
        return c.SETINDEXVAR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28549, 16, val);
    },
};
exports.INDEXVARQ = {
    load: (s) => {
        s.skip(16);
        return c.INDEXVARQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28550, 16, val);
    },
};
exports.SETINDEXVARQ = {
    load: (s) => {
        s.skip(16);
        return c.SETINDEXVARQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28551, 16, val);
    },
};
exports.TLEN = {
    load: (s) => {
        s.skip(16);
        return c.TLEN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28552, 16, val);
    },
};
exports.QTLEN = {
    load: (s) => {
        s.skip(16);
        return c.QTLEN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28553, 16, val);
    },
};
exports.ISTUPLE = {
    load: (s) => {
        s.skip(16);
        return c.ISTUPLE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28554, 16, val);
    },
};
exports.LAST = {
    load: (s) => {
        s.skip(16);
        return c.LAST();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28555, 16, val);
    },
};
exports.TPUSH = {
    load: (s) => {
        s.skip(16);
        return c.TPUSH();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28556, 16, val);
    },
};
exports.TPOP = {
    load: (s) => {
        s.skip(16);
        return c.TPOP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28557, 16, val);
    },
};
exports.NULLSWAPIF = {
    load: (s) => {
        s.skip(16);
        return c.NULLSWAPIF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28576, 16, val);
    },
};
exports.NULLSWAPIFNOT = {
    load: (s) => {
        s.skip(16);
        return c.NULLSWAPIFNOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28577, 16, val);
    },
};
exports.NULLROTRIF = {
    load: (s) => {
        s.skip(16);
        return c.NULLROTRIF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28578, 16, val);
    },
};
exports.NULLROTRIFNOT = {
    load: (s) => {
        s.skip(16);
        return c.NULLROTRIFNOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28579, 16, val);
    },
};
exports.NULLSWAPIF2 = {
    load: (s) => {
        s.skip(16);
        return c.NULLSWAPIF2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28580, 16, val);
    },
};
exports.NULLSWAPIFNOT2 = {
    load: (s) => {
        s.skip(16);
        return c.NULLSWAPIFNOT2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28581, 16, val);
    },
};
exports.NULLROTRIF2 = {
    load: (s) => {
        s.skip(16);
        return c.NULLROTRIF2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28582, 16, val);
    },
};
exports.NULLROTRIFNOT2 = {
    load: (s) => {
        s.skip(16);
        return c.NULLROTRIFNOT2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(28583, 16, val);
    },
};
exports.ADDDIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.ADDDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43264, 16, val);
    },
};
exports.ADDDIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.ADDDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43265, 16, val);
    },
};
exports.ADDDIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.ADDDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43266, 16, val);
    },
};
exports.DIV = {
    load: (s) => {
        s.skip(16);
        return c.DIV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43268, 16, val);
    },
};
exports.DIVR = {
    load: (s) => {
        s.skip(16);
        return c.DIVR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43269, 16, val);
    },
};
exports.DIVC = {
    load: (s) => {
        s.skip(16);
        return c.DIVC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43270, 16, val);
    },
};
exports.MOD = {
    load: (s) => {
        s.skip(16);
        return c.MOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43272, 16, val);
    },
};
exports.MODR = {
    load: (s) => {
        s.skip(16);
        return c.MODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43273, 16, val);
    },
};
exports.MODC = {
    load: (s) => {
        s.skip(16);
        return c.MODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43274, 16, val);
    },
};
exports.DIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.DIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43276, 16, val);
    },
};
exports.DIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.DIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43277, 16, val);
    },
};
exports.DIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.DIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43278, 16, val);
    },
};
exports.QADDDIVMOD = {
    load: (s) => {
        s.skip(24);
        return c.QADDDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036352, 24, val);
    },
};
exports.QADDDIVMODR = {
    load: (s) => {
        s.skip(24);
        return c.QADDDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036353, 24, val);
    },
};
exports.QADDDIVMODC = {
    load: (s) => {
        s.skip(24);
        return c.QADDDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036354, 24, val);
    },
};
exports.QDIV = {
    load: (s) => {
        s.skip(24);
        return c.QDIV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036356, 24, val);
    },
};
exports.QDIVR = {
    load: (s) => {
        s.skip(24);
        return c.QDIVR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036357, 24, val);
    },
};
exports.QDIVC = {
    load: (s) => {
        s.skip(24);
        return c.QDIVC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036358, 24, val);
    },
};
exports.QMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036360, 24, val);
    },
};
exports.QMODR = {
    load: (s) => {
        s.skip(24);
        return c.QMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036361, 24, val);
    },
};
exports.QMODC = {
    load: (s) => {
        s.skip(24);
        return c.QMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036362, 24, val);
    },
};
exports.QDIVMOD = {
    load: (s) => {
        s.skip(24);
        return c.QDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036364, 24, val);
    },
};
exports.QDIVMODR = {
    load: (s) => {
        s.skip(24);
        return c.QDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036365, 24, val);
    },
};
exports.QDIVMODC = {
    load: (s) => {
        s.skip(24);
        return c.QDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036366, 24, val);
    },
};
exports.ADDRSHIFTMOD = {
    load: (s) => {
        s.skip(16);
        return c.ADDRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43296, 16, val);
    },
};
exports.ADDRSHIFTMODR = {
    load: (s) => {
        s.skip(16);
        return c.ADDRSHIFTMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43297, 16, val);
    },
};
exports.ADDRSHIFTMODC = {
    load: (s) => {
        s.skip(16);
        return c.ADDRSHIFTMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43298, 16, val);
    },
};
exports.RSHIFTR = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43301, 16, val);
    },
};
exports.RSHIFTC = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43302, 16, val);
    },
};
exports.MODPOW2 = {
    load: (s) => {
        s.skip(16);
        return c.MODPOW2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43304, 16, val);
    },
};
exports.MODPOW2R = {
    load: (s) => {
        s.skip(16);
        return c.MODPOW2R();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43305, 16, val);
    },
};
exports.MODPOW2C = {
    load: (s) => {
        s.skip(16);
        return c.MODPOW2C();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43306, 16, val);
    },
};
exports.RSHIFTMOD = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43308, 16, val);
    },
};
exports.RSHIFTMODR = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43309, 16, val);
    },
};
exports.RSHIFTMODC = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43310, 16, val);
    },
};
exports.QADDRSHIFTMOD = {
    load: (s) => {
        s.skip(24);
        return c.QADDRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036384, 24, val);
    },
};
exports.QADDRSHIFTMODR = {
    load: (s) => {
        s.skip(24);
        return c.QADDRSHIFTMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036385, 24, val);
    },
};
exports.QADDRSHIFTMODC = {
    load: (s) => {
        s.skip(24);
        return c.QADDRSHIFTMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036386, 24, val);
    },
};
exports.QRSHIFTR = {
    load: (s) => {
        s.skip(24);
        return c.QRSHIFTR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036389, 24, val);
    },
};
exports.QRSHIFTC = {
    load: (s) => {
        s.skip(24);
        return c.QRSHIFTC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036390, 24, val);
    },
};
exports.QMODPOW2 = {
    load: (s) => {
        s.skip(24);
        return c.QMODPOW2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036392, 24, val);
    },
};
exports.QMODPOW2R = {
    load: (s) => {
        s.skip(24);
        return c.QMODPOW2R();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036393, 24, val);
    },
};
exports.QMODPOW2C = {
    load: (s) => {
        s.skip(24);
        return c.QMODPOW2C();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036394, 24, val);
    },
};
exports.QRSHIFTMOD = {
    load: (s) => {
        s.skip(24);
        return c.QRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036396, 24, val);
    },
};
exports.QRSHIFTMODR = {
    load: (s) => {
        s.skip(24);
        return c.QRSHIFTMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036397, 24, val);
    },
};
exports.QRSHIFTMODC = {
    load: (s) => {
        s.skip(24);
        return c.QRSHIFTMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036398, 24, val);
    },
};
exports.MULADDDIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43392, 16, val);
    },
};
exports.MULADDDIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.MULADDDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43393, 16, val);
    },
};
exports.MULADDDIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.MULADDDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43394, 16, val);
    },
};
exports.MULDIV = {
    load: (s) => {
        s.skip(16);
        return c.MULDIV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43396, 16, val);
    },
};
exports.MULDIVR = {
    load: (s) => {
        s.skip(16);
        return c.MULDIVR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43397, 16, val);
    },
};
exports.MULDIVC = {
    load: (s) => {
        s.skip(16);
        return c.MULDIVC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43398, 16, val);
    },
};
exports.MULMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43400, 16, val);
    },
};
exports.MULMODR = {
    load: (s) => {
        s.skip(16);
        return c.MULMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43401, 16, val);
    },
};
exports.MULMODC = {
    load: (s) => {
        s.skip(16);
        return c.MULMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43402, 16, val);
    },
};
exports.MULDIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43404, 16, val);
    },
};
exports.MULDIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.MULDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43405, 16, val);
    },
};
exports.MULDIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.MULDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43406, 16, val);
    },
};
exports.QMULADDDIVMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULADDDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036480, 24, val);
    },
};
exports.QMULADDDIVMODR = {
    load: (s) => {
        s.skip(24);
        return c.QMULADDDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036481, 24, val);
    },
};
exports.QMULADDDIVMODC = {
    load: (s) => {
        s.skip(24);
        return c.QMULADDDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036482, 24, val);
    },
};
exports.QMULDIV = {
    load: (s) => {
        s.skip(24);
        return c.QMULDIV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036484, 24, val);
    },
};
exports.QMULDIVR = {
    load: (s) => {
        s.skip(24);
        return c.QMULDIVR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036485, 24, val);
    },
};
exports.QMULDIVC = {
    load: (s) => {
        s.skip(24);
        return c.QMULDIVC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036486, 24, val);
    },
};
exports.QMULMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036488, 24, val);
    },
};
exports.QMULMODR = {
    load: (s) => {
        s.skip(24);
        return c.QMULMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036489, 24, val);
    },
};
exports.QMULMODC = {
    load: (s) => {
        s.skip(24);
        return c.QMULMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036490, 24, val);
    },
};
exports.QMULDIVMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036492, 24, val);
    },
};
exports.QMULDIVMODR = {
    load: (s) => {
        s.skip(24);
        return c.QMULDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036493, 24, val);
    },
};
exports.QMULDIVMODC = {
    load: (s) => {
        s.skip(24);
        return c.QMULDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036494, 24, val);
    },
};
exports.MULADDRSHIFTMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43424, 16, val);
    },
};
exports.MULADDRSHIFTRMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDRSHIFTRMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43425, 16, val);
    },
};
exports.MULADDRSHIFTCMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDRSHIFTCMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43426, 16, val);
    },
};
exports.MULRSHIFT = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43428, 16, val);
    },
};
exports.MULRSHIFTR = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43429, 16, val);
    },
};
exports.MULRSHIFTC = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43430, 16, val);
    },
};
exports.MULMODPOW2 = {
    load: (s) => {
        s.skip(16);
        return c.MULMODPOW2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43432, 16, val);
    },
};
exports.MULMODPOW2R = {
    load: (s) => {
        s.skip(16);
        return c.MULMODPOW2R();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43433, 16, val);
    },
};
exports.MULMODPOW2C = {
    load: (s) => {
        s.skip(16);
        return c.MULMODPOW2C();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43434, 16, val);
    },
};
exports.MULRSHIFTMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43436, 16, val);
    },
};
exports.MULRSHIFTRMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTRMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43437, 16, val);
    },
};
exports.MULRSHIFTCMOD = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTCMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43438, 16, val);
    },
};
exports.QMULADDRSHIFTMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULADDRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036512, 24, val);
    },
};
exports.QMULADDRSHIFTRMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULADDRSHIFTRMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036513, 24, val);
    },
};
exports.QMULADDRSHIFTCMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULADDRSHIFTCMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036514, 24, val);
    },
};
exports.QMULRSHIFT = {
    load: (s) => {
        s.skip(24);
        return c.QMULRSHIFT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036516, 24, val);
    },
};
exports.QMULRSHIFTR = {
    load: (s) => {
        s.skip(24);
        return c.QMULRSHIFTR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036517, 24, val);
    },
};
exports.QMULRSHIFTC = {
    load: (s) => {
        s.skip(24);
        return c.QMULRSHIFTC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036518, 24, val);
    },
};
exports.QMULMODPOW2 = {
    load: (s) => {
        s.skip(24);
        return c.QMULMODPOW2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036520, 24, val);
    },
};
exports.QMULMODPOW2R = {
    load: (s) => {
        s.skip(24);
        return c.QMULMODPOW2R();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036521, 24, val);
    },
};
exports.QMULMODPOW2C = {
    load: (s) => {
        s.skip(24);
        return c.QMULMODPOW2C();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036522, 24, val);
    },
};
exports.QMULRSHIFTMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULRSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036524, 24, val);
    },
};
exports.QMULRSHIFTRMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULRSHIFTRMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036525, 24, val);
    },
};
exports.QMULRSHIFTCMOD = {
    load: (s) => {
        s.skip(24);
        return c.QMULRSHIFTCMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036526, 24, val);
    },
};
exports.LSHIFTADDDIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTADDDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43456, 16, val);
    },
};
exports.LSHIFTADDDIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTADDDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43457, 16, val);
    },
};
exports.LSHIFTADDDIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTADDDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43458, 16, val);
    },
};
exports.LSHIFTDIV = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTDIV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43460, 16, val);
    },
};
exports.LSHIFTDIVR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTDIVR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43461, 16, val);
    },
};
exports.LSHIFTDIVC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTDIVC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43462, 16, val);
    },
};
exports.LSHIFTMOD = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43464, 16, val);
    },
};
exports.LSHIFTMODR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43465, 16, val);
    },
};
exports.LSHIFTMODC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43466, 16, val);
    },
};
exports.LSHIFTDIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43468, 16, val);
    },
};
exports.LSHIFTDIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43469, 16, val);
    },
};
exports.LSHIFTDIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFTDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43470, 16, val);
    },
};
exports.QLSHIFTADDDIVMOD = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTADDDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036544, 24, val);
    },
};
exports.QLSHIFTADDDIVMODR = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTADDDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036545, 24, val);
    },
};
exports.QLSHIFTADDDIVMODC = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTADDDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036546, 24, val);
    },
};
exports.QLSHIFTDIV = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTDIV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036548, 24, val);
    },
};
exports.QLSHIFTDIVR = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTDIVR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036549, 24, val);
    },
};
exports.QLSHIFTDIVC = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTDIVC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036550, 24, val);
    },
};
exports.QLSHIFTMOD = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036552, 24, val);
    },
};
exports.QLSHIFTMODR = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036553, 24, val);
    },
};
exports.QLSHIFTMODC = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036554, 24, val);
    },
};
exports.QLSHIFTDIVMOD = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTDIVMOD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036556, 24, val);
    },
};
exports.QLSHIFTDIVMODR = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTDIVMODR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036557, 24, val);
    },
};
exports.QLSHIFTDIVMODC = {
    load: (s) => {
        s.skip(24);
        return c.QLSHIFTDIVMODC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036558, 24, val);
    },
};
exports.STIX = {
    load: (s) => {
        s.skip(16);
        return c.STIX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52992, 16, val);
    },
};
exports.STUX = {
    load: (s) => {
        s.skip(16);
        return c.STUX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52993, 16, val);
    },
};
exports.STIXR = {
    load: (s) => {
        s.skip(16);
        return c.STIXR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52994, 16, val);
    },
};
exports.STUXR = {
    load: (s) => {
        s.skip(16);
        return c.STUXR();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52995, 16, val);
    },
};
exports.STIXQ = {
    load: (s) => {
        s.skip(16);
        return c.STIXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52996, 16, val);
    },
};
exports.STUXQ = {
    load: (s) => {
        s.skip(16);
        return c.STUXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52997, 16, val);
    },
};
exports.STIXRQ = {
    load: (s) => {
        s.skip(16);
        return c.STIXRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52998, 16, val);
    },
};
exports.STUXRQ = {
    load: (s) => {
        s.skip(16);
        return c.STUXRQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(52999, 16, val);
    },
};
exports.STILE4 = {
    load: (s) => {
        s.skip(16);
        return c.STILE4();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53032, 16, val);
    },
};
exports.STULE4 = {
    load: (s) => {
        s.skip(16);
        return c.STULE4();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53033, 16, val);
    },
};
exports.STILE8 = {
    load: (s) => {
        s.skip(16);
        return c.STILE8();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53034, 16, val);
    },
};
exports.STULE8 = {
    load: (s) => {
        s.skip(16);
        return c.STULE8();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53035, 16, val);
    },
};
exports.LDIX = {
    load: (s) => {
        s.skip(16);
        return c.LDIX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55040, 16, val);
    },
};
exports.LDUX = {
    load: (s) => {
        s.skip(16);
        return c.LDUX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55041, 16, val);
    },
};
exports.PLDIX = {
    load: (s) => {
        s.skip(16);
        return c.PLDIX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55042, 16, val);
    },
};
exports.PLDUX = {
    load: (s) => {
        s.skip(16);
        return c.PLDUX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55043, 16, val);
    },
};
exports.LDIXQ = {
    load: (s) => {
        s.skip(16);
        return c.LDIXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55044, 16, val);
    },
};
exports.LDUXQ = {
    load: (s) => {
        s.skip(16);
        return c.LDUXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55045, 16, val);
    },
};
exports.PLDIXQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDIXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55046, 16, val);
    },
};
exports.PLDUXQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDUXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55047, 16, val);
    },
};
exports.LDSLICEX = {
    load: (s) => {
        s.skip(16);
        return c.LDSLICEX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55064, 16, val);
    },
};
exports.PLDSLICEX = {
    load: (s) => {
        s.skip(16);
        return c.PLDSLICEX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55065, 16, val);
    },
};
exports.LDSLICEXQ = {
    load: (s) => {
        s.skip(16);
        return c.LDSLICEXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55066, 16, val);
    },
};
exports.PLDSLICEXQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDSLICEXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55067, 16, val);
    },
};
exports.LDILE4 = {
    load: (s) => {
        s.skip(16);
        return c.LDILE4();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55120, 16, val);
    },
};
exports.LDULE4 = {
    load: (s) => {
        s.skip(16);
        return c.LDULE4();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55121, 16, val);
    },
};
exports.LDILE8 = {
    load: (s) => {
        s.skip(16);
        return c.LDILE8();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55122, 16, val);
    },
};
exports.LDULE8 = {
    load: (s) => {
        s.skip(16);
        return c.LDULE8();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55123, 16, val);
    },
};
exports.PLDILE4 = {
    load: (s) => {
        s.skip(16);
        return c.PLDILE4();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55124, 16, val);
    },
};
exports.PLDULE4 = {
    load: (s) => {
        s.skip(16);
        return c.PLDULE4();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55125, 16, val);
    },
};
exports.PLDILE8 = {
    load: (s) => {
        s.skip(16);
        return c.PLDILE8();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55126, 16, val);
    },
};
exports.PLDULE8 = {
    load: (s) => {
        s.skip(16);
        return c.PLDULE8();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55127, 16, val);
    },
};
exports.LDILE4Q = {
    load: (s) => {
        s.skip(16);
        return c.LDILE4Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55128, 16, val);
    },
};
exports.LDULE4Q = {
    load: (s) => {
        s.skip(16);
        return c.LDULE4Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55129, 16, val);
    },
};
exports.LDILE8Q = {
    load: (s) => {
        s.skip(16);
        return c.LDILE8Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55130, 16, val);
    },
};
exports.LDULE8Q = {
    load: (s) => {
        s.skip(16);
        return c.LDULE8Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55131, 16, val);
    },
};
exports.PLDILE4Q = {
    load: (s) => {
        s.skip(16);
        return c.PLDILE4Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55132, 16, val);
    },
};
exports.PLDULE4Q = {
    load: (s) => {
        s.skip(16);
        return c.PLDULE4Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55133, 16, val);
    },
};
exports.PLDILE8Q = {
    load: (s) => {
        s.skip(16);
        return c.PLDILE8Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55134, 16, val);
    },
};
exports.PLDULE8Q = {
    load: (s) => {
        s.skip(16);
        return c.PLDULE8Q();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55135, 16, val);
    },
};
exports.DICTIGETJMP = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETJMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62624, 16, val);
    },
};
exports.DICTUGETJMP = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETJMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62625, 16, val);
    },
};
exports.DICTIGETEXEC = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETEXEC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62626, 16, val);
    },
};
exports.DICTUGETEXEC = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETEXEC();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62627, 16, val);
    },
};
exports.DICTIGETJMPZ = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETJMPZ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62652, 16, val);
    },
};
exports.DICTUGETJMPZ = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETJMPZ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62653, 16, val);
    },
};
exports.DICTIGETEXECZ = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETEXECZ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62654, 16, val);
    },
};
exports.DICTUGETEXECZ = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETEXECZ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62655, 16, val);
    },
};
exports.DICTGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62474, 16, val);
    },
};
exports.DICTGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62475, 16, val);
    },
};
exports.DICTIGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62476, 16, val);
    },
};
exports.DICTIGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62477, 16, val);
    },
};
exports.DICTUGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62478, 16, val);
    },
};
exports.DICTUGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62479, 16, val);
    },
};
exports.DICTSET = {
    load: (s) => {
        s.skip(16);
        return c.DICTSET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62482, 16, val);
    },
};
exports.DICTSETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTSETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62483, 16, val);
    },
};
exports.DICTISET = {
    load: (s) => {
        s.skip(16);
        return c.DICTISET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62484, 16, val);
    },
};
exports.DICTISETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTISETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62485, 16, val);
    },
};
exports.DICTUSET = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62486, 16, val);
    },
};
exports.DICTUSETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62487, 16, val);
    },
};
exports.DICTSETGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTSETGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62490, 16, val);
    },
};
exports.DICTSETGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTSETGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62491, 16, val);
    },
};
exports.DICTISETGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTISETGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62492, 16, val);
    },
};
exports.DICTISETGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTISETGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62493, 16, val);
    },
};
exports.DICTUSETGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSETGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62494, 16, val);
    },
};
exports.DICTUSETGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSETGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62495, 16, val);
    },
};
exports.DICTREPLACE = {
    load: (s) => {
        s.skip(16);
        return c.DICTREPLACE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62498, 16, val);
    },
};
exports.DICTREPLACEREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTREPLACEREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62499, 16, val);
    },
};
exports.DICTIREPLACE = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREPLACE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62500, 16, val);
    },
};
exports.DICTIREPLACEREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREPLACEREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62501, 16, val);
    },
};
exports.DICTUREPLACE = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREPLACE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62502, 16, val);
    },
};
exports.DICTUREPLACEREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREPLACEREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62503, 16, val);
    },
};
exports.DICTREPLACEGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTREPLACEGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62506, 16, val);
    },
};
exports.DICTREPLACEGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTREPLACEGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62507, 16, val);
    },
};
exports.DICTIREPLACEGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREPLACEGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62508, 16, val);
    },
};
exports.DICTIREPLACEGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREPLACEGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62509, 16, val);
    },
};
exports.DICTUREPLACEGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREPLACEGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62510, 16, val);
    },
};
exports.DICTUREPLACEGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREPLACEGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62511, 16, val);
    },
};
exports.DICTADD = {
    load: (s) => {
        s.skip(16);
        return c.DICTADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62514, 16, val);
    },
};
exports.DICTADDREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTADDREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62515, 16, val);
    },
};
exports.DICTIADD = {
    load: (s) => {
        s.skip(16);
        return c.DICTIADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62516, 16, val);
    },
};
exports.DICTIADDREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIADDREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62517, 16, val);
    },
};
exports.DICTUADD = {
    load: (s) => {
        s.skip(16);
        return c.DICTUADD();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62518, 16, val);
    },
};
exports.DICTUADDREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUADDREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62519, 16, val);
    },
};
exports.DICTADDGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTADDGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62522, 16, val);
    },
};
exports.DICTADDGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTADDGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62523, 16, val);
    },
};
exports.DICTIADDGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTIADDGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62524, 16, val);
    },
};
exports.DICTIADDGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIADDGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62525, 16, val);
    },
};
exports.DICTUADDGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTUADDGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62526, 16, val);
    },
};
exports.DICTUADDGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUADDGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62527, 16, val);
    },
};
exports.DICTDELGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTDELGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62562, 16, val);
    },
};
exports.DICTDELGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTDELGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62563, 16, val);
    },
};
exports.DICTIDELGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTIDELGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62564, 16, val);
    },
};
exports.DICTIDELGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIDELGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62565, 16, val);
    },
};
exports.DICTUDELGET = {
    load: (s) => {
        s.skip(16);
        return c.DICTUDELGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62566, 16, val);
    },
};
exports.DICTUDELGETREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUDELGETREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62567, 16, val);
    },
};
exports.DICTMIN = {
    load: (s) => {
        s.skip(16);
        return c.DICTMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62594, 16, val);
    },
};
exports.DICTMINREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTMINREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62595, 16, val);
    },
};
exports.DICTIMIN = {
    load: (s) => {
        s.skip(16);
        return c.DICTIMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62596, 16, val);
    },
};
exports.DICTIMINREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIMINREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62597, 16, val);
    },
};
exports.DICTUMIN = {
    load: (s) => {
        s.skip(16);
        return c.DICTUMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62598, 16, val);
    },
};
exports.DICTUMINREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUMINREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62599, 16, val);
    },
};
exports.DICTMAX = {
    load: (s) => {
        s.skip(16);
        return c.DICTMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62602, 16, val);
    },
};
exports.DICTMAXREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTMAXREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62603, 16, val);
    },
};
exports.DICTIMAX = {
    load: (s) => {
        s.skip(16);
        return c.DICTIMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62604, 16, val);
    },
};
exports.DICTIMAXREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIMAXREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62605, 16, val);
    },
};
exports.DICTUMAX = {
    load: (s) => {
        s.skip(16);
        return c.DICTUMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62606, 16, val);
    },
};
exports.DICTUMAXREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUMAXREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62607, 16, val);
    },
};
exports.DICTREMMIN = {
    load: (s) => {
        s.skip(16);
        return c.DICTREMMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62610, 16, val);
    },
};
exports.DICTREMMINREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTREMMINREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62611, 16, val);
    },
};
exports.DICTIREMMIN = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREMMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62612, 16, val);
    },
};
exports.DICTIREMMINREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREMMINREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62613, 16, val);
    },
};
exports.DICTUREMMIN = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREMMIN();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62614, 16, val);
    },
};
exports.DICTUREMMINREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREMMINREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62615, 16, val);
    },
};
exports.DICTREMMAX = {
    load: (s) => {
        s.skip(16);
        return c.DICTREMMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62618, 16, val);
    },
};
exports.DICTREMMAXREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTREMMAXREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62619, 16, val);
    },
};
exports.DICTIREMMAX = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREMMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62620, 16, val);
    },
};
exports.DICTIREMMAXREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREMMAXREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62621, 16, val);
    },
};
exports.DICTUREMMAX = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREMMAX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62622, 16, val);
    },
};
exports.DICTUREMMAXREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREMMAXREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62623, 16, val);
    },
};
exports.DICTSETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTSETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62529, 16, val);
    },
};
exports.DICTISETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTISETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62530, 16, val);
    },
};
exports.DICTUSETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62531, 16, val);
    },
};
exports.DICTSETGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTSETGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62533, 16, val);
    },
};
exports.DICTISETGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTISETGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62534, 16, val);
    },
};
exports.DICTUSETGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSETGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62535, 16, val);
    },
};
exports.DICTREPLACEB = {
    load: (s) => {
        s.skip(16);
        return c.DICTREPLACEB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62537, 16, val);
    },
};
exports.DICTIREPLACEB = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREPLACEB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62538, 16, val);
    },
};
exports.DICTUREPLACEB = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREPLACEB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62539, 16, val);
    },
};
exports.DICTREPLACEGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTREPLACEGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62541, 16, val);
    },
};
exports.DICTIREPLACEGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTIREPLACEGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62542, 16, val);
    },
};
exports.DICTUREPLACEGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTUREPLACEGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62543, 16, val);
    },
};
exports.DICTADDB = {
    load: (s) => {
        s.skip(16);
        return c.DICTADDB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62545, 16, val);
    },
};
exports.DICTIADDB = {
    load: (s) => {
        s.skip(16);
        return c.DICTIADDB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62546, 16, val);
    },
};
exports.DICTUADDB = {
    load: (s) => {
        s.skip(16);
        return c.DICTUADDB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62547, 16, val);
    },
};
exports.DICTADDGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTADDGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62549, 16, val);
    },
};
exports.DICTIADDGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTIADDGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62550, 16, val);
    },
};
exports.DICTUADDGETB = {
    load: (s) => {
        s.skip(16);
        return c.DICTUADDGETB();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62551, 16, val);
    },
};
exports.DICTDEL = {
    load: (s) => {
        s.skip(16);
        return c.DICTDEL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62553, 16, val);
    },
};
exports.DICTIDEL = {
    load: (s) => {
        s.skip(16);
        return c.DICTIDEL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62554, 16, val);
    },
};
exports.DICTUDEL = {
    load: (s) => {
        s.skip(16);
        return c.DICTUDEL();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62555, 16, val);
    },
};
exports.DICTGETOPTREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTGETOPTREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62569, 16, val);
    },
};
exports.DICTIGETOPTREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETOPTREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62570, 16, val);
    },
};
exports.DICTUGETOPTREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETOPTREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62571, 16, val);
    },
};
exports.DICTSETGETOPTREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTSETGETOPTREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62573, 16, val);
    },
};
exports.DICTISETGETOPTREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTISETGETOPTREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62574, 16, val);
    },
};
exports.DICTUSETGETOPTREF = {
    load: (s) => {
        s.skip(16);
        return c.DICTUSETGETOPTREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62575, 16, val);
    },
};
exports.SUBDICTGET = {
    load: (s) => {
        s.skip(16);
        return c.SUBDICTGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62641, 16, val);
    },
};
exports.SUBDICTIGET = {
    load: (s) => {
        s.skip(16);
        return c.SUBDICTIGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62642, 16, val);
    },
};
exports.SUBDICTUGET = {
    load: (s) => {
        s.skip(16);
        return c.SUBDICTUGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62643, 16, val);
    },
};
exports.SUBDICTRPGET = {
    load: (s) => {
        s.skip(16);
        return c.SUBDICTRPGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62645, 16, val);
    },
};
exports.SUBDICTIRPGET = {
    load: (s) => {
        s.skip(16);
        return c.SUBDICTIRPGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62646, 16, val);
    },
};
exports.SUBDICTURPGET = {
    load: (s) => {
        s.skip(16);
        return c.SUBDICTURPGET();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62647, 16, val);
    },
};
exports.THROWANY = {
    load: (s) => {
        s.skip(16);
        return c.THROWANY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62192, 16, val);
    },
};
exports.THROWARGANY = {
    load: (s) => {
        s.skip(16);
        return c.THROWARGANY();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62193, 16, val);
    },
};
exports.THROWANYIFNOT = {
    load: (s) => {
        s.skip(16);
        return c.THROWANYIFNOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62196, 16, val);
    },
};
exports.THROWARGANYIFNOT = {
    load: (s) => {
        s.skip(16);
        return c.THROWARGANYIFNOT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62197, 16, val);
    },
};
exports.DICTGETNEXT = {
    load: (s) => {
        s.skip(16);
        return c.DICTGETNEXT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62580, 16, val);
    },
};
exports.DICTGETNEXTEQ = {
    load: (s) => {
        s.skip(16);
        return c.DICTGETNEXTEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62581, 16, val);
    },
};
exports.DICTGETPREV = {
    load: (s) => {
        s.skip(16);
        return c.DICTGETPREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62582, 16, val);
    },
};
exports.DICTGETPREVEQ = {
    load: (s) => {
        s.skip(16);
        return c.DICTGETPREVEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62583, 16, val);
    },
};
exports.DICTIGETNEXT = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETNEXT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62584, 16, val);
    },
};
exports.DICTIGETNEXTEQ = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETNEXTEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62585, 16, val);
    },
};
exports.DICTIGETPREV = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETPREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62586, 16, val);
    },
};
exports.DICTIGETPREVEQ = {
    load: (s) => {
        s.skip(16);
        return c.DICTIGETPREVEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62587, 16, val);
    },
};
exports.DICTUGETNEXT = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETNEXT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62588, 16, val);
    },
};
exports.DICTUGETNEXTEQ = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETNEXTEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62589, 16, val);
    },
};
exports.DICTUGETPREV = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETPREV();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62590, 16, val);
    },
};
exports.DICTUGETPREVEQ = {
    load: (s) => {
        s.skip(16);
        return c.DICTUGETPREVEQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62591, 16, val);
    },
};
exports.ADDINT = {
    load: (s) => {
        s.skip(8);
        return c.ADDINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(166, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.MULINT = {
    load: (s) => {
        s.skip(8);
        return c.MULINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(167, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.QADDINT = {
    load: (s) => {
        s.skip(16);
        return c.QADDINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47014, 16, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.QMULINT = {
    load: (s) => {
        s.skip(16);
        return c.QMULINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47015, 16, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.EQINT = {
    load: (s) => {
        s.skip(8);
        return c.EQINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(192, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.LESSINT = {
    load: (s) => {
        s.skip(8);
        return c.LESSINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(193, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.GTINT = {
    load: (s) => {
        s.skip(8);
        return c.GTINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(194, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.NEQINT = {
    load: (s) => {
        s.skip(8);
        return c.NEQINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(195, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.QEQINT = {
    load: (s) => {
        s.skip(16);
        return c.QEQINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47040, 16, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.QLESSINT = {
    load: (s) => {
        s.skip(16);
        return c.QLESSINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47041, 16, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.QGTINT = {
    load: (s) => {
        s.skip(16);
        return c.QGTINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47042, 16, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.QNEQINT = {
    load: (s) => {
        s.skip(16);
        return c.QNEQINT($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47043, 16, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.PUSHPOW2DEC = {
    load: (s) => {
        s.skip(8);
        return c.PUSHPOW2DEC($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(132, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PUSHNEGPOW2 = {
    load: (s) => {
        s.skip(8);
        return c.PUSHNEGPOW2($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(133, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.FITS = {
    load: (s) => {
        s.skip(8);
        return c.FITS($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(180, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.UFITS = {
    load: (s) => {
        s.skip(8);
        return c.UFITS($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(181, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.QFITS = {
    load: (s) => {
        s.skip(16);
        return c.QFITS($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47028, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.QUFITS = {
    load: (s) => {
        s.skip(16);
        return c.QUFITS($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47029, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.SETCONTCTRMANY = {
    load: (s) => {
        s.skip(16);
        return c.SETCONTCTRMANY($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60899, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.CALLCCARGS = {
    load: (s) => {
        s.skip(16);
        return c.CALLCCARGS($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56118, 16, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.TRYARGS = {
    load: (s) => {
        s.skip(8);
        return c.TRYARGS($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(243, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.PLDREFIDX = {
    load: (s) => {
        s.skip(14);
        return c.PLDREFIDX($.uint(2).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(13779, 14, val);
        $.uint(2).store(b, val.arg0);
    },
};
exports.CHASHI = {
    load: (s) => {
        s.skip(14);
        return c.CHASHI($.uint(2).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(13786, 14, val);
        $.uint(2).store(b, val.arg0);
    },
};
exports.CDEPTHI = {
    load: (s) => {
        s.skip(14);
        return c.CDEPTHI($.uint(2).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(13787, 14, val);
        $.uint(2).store(b, val.arg0);
    },
};
exports.JMPDICT = {
    load: (s) => {
        s.skip(10);
        return c.JMPDICT($.uint(14).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(965, 10, val);
        $.uint(14).store(b, val.arg0);
    },
};
exports.PREPAREDICT = {
    load: (s) => {
        s.skip(10);
        return c.PREPAREDICT($.uint(14).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(966, 10, val);
        $.uint(14).store(b, val.arg0);
    },
};
exports.THROWARG = {
    load: (s) => {
        s.skip(13);
        return c.THROWARG($.uint(11).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7769, 13, val);
        $.uint(11).store(b, val.arg0);
    },
};
exports.THROWARGIF = {
    load: (s) => {
        s.skip(13);
        return c.THROWARGIF($.uint(11).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7771, 13, val);
        $.uint(11).store(b, val.arg0);
    },
};
exports.THROWARGIFNOT = {
    load: (s) => {
        s.skip(13);
        return c.THROWARGIFNOT($.uint(11).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7773, 13, val);
        $.uint(11).store(b, val.arg0);
    },
};
exports.JMPXARGS = {
    load: (s) => {
        s.skip(12);
        return c.JMPXARGS($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(3505, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.RETARGS = {
    load: (s) => {
        s.skip(12);
        return c.RETARGS($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(3506, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.RETURNARGS = {
    load: (s) => {
        s.skip(12);
        return c.RETURNARGS($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(3792, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.BLKDROP = {
    load: (s) => {
        s.skip(12);
        return c.BLKDROP($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1520, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.TUPLE = {
    load: (s) => {
        s.skip(12);
        return c.TUPLE($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1776, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.INDEX = {
    load: (s) => {
        s.skip(12);
        return c.INDEX($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1777, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.UNTUPLE = {
    load: (s) => {
        s.skip(12);
        return c.UNTUPLE($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1778, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.UNPACKFIRST = {
    load: (s) => {
        s.skip(12);
        return c.UNPACKFIRST($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1779, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.EXPLODE = {
    load: (s) => {
        s.skip(12);
        return c.EXPLODE($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1780, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.SETINDEX = {
    load: (s) => {
        s.skip(12);
        return c.SETINDEX($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1781, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.INDEXQ = {
    load: (s) => {
        s.skip(12);
        return c.INDEXQ($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1782, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.SETINDEXQ = {
    load: (s) => {
        s.skip(12);
        return c.SETINDEXQ($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1783, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.XC2PU = {
    load: (s) => {
        s.skip(12);
        return c.XC2PU($.uint(4).load(s), $.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1345, 12, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
        $.uint(4).store(b, val.arg2);
    },
};
exports.XCPU2 = {
    load: (s) => {
        s.skip(12);
        return c.XCPU2($.uint(4).load(s), $.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1347, 12, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
        $.uint(4).store(b, val.arg2);
    },
};
exports.PUSH3 = {
    load: (s) => {
        s.skip(12);
        return c.PUSH3($.uint(4).load(s), $.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1351, 12, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
        $.uint(4).store(b, val.arg2);
    },
};
exports.XCHG2 = {
    load: (s) => {
        s.skip(8);
        return c.XCHG2($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(80, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.XCPU = {
    load: (s) => {
        s.skip(8);
        return c.XCPU($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(81, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.PUSH2 = {
    load: (s) => {
        s.skip(8);
        return c.PUSH2($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(83, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.PUXC = {
    load: (s) => {
        s.skip(8);
        return c.PUXC($.uint(4).load(s), $.delta(-1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(82, 8, val);
        $.uint(4).store(b, val.arg0);
        $.delta(-1, $.uint(4)).store(b, val.arg1);
    },
};
exports.XCPUXC = {
    load: (s) => {
        s.skip(12);
        return c.XCPUXC($.uint(4).load(s), $.uint(4).load(s), $.delta(-1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1346, 12, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
        $.delta(-1, $.uint(4)).store(b, val.arg2);
    },
};
exports.PUXC2 = {
    load: (s) => {
        s.skip(12);
        return c.PUXC2($.uint(4).load(s), $.delta(-1, $.uint(4)).load(s), $.delta(-1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1348, 12, val);
        $.uint(4).store(b, val.arg0);
        $.delta(-1, $.uint(4)).store(b, val.arg1);
        $.delta(-1, $.uint(4)).store(b, val.arg2);
    },
};
exports.PUXCPU = {
    load: (s) => {
        s.skip(12);
        return c.PUXCPU($.uint(4).load(s), $.delta(-1, $.uint(4)).load(s), $.delta(-1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1349, 12, val);
        $.uint(4).store(b, val.arg0);
        $.delta(-1, $.uint(4)).store(b, val.arg1);
        $.delta(-1, $.uint(4)).store(b, val.arg2);
    },
};
exports.PU2XC = {
    load: (s) => {
        s.skip(12);
        return c.PU2XC($.uint(4).load(s), $.delta(-1, $.uint(4)).load(s), $.delta(-2, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1350, 12, val);
        $.uint(4).store(b, val.arg0);
        $.delta(-1, $.uint(4)).store(b, val.arg1);
        $.delta(-2, $.uint(4)).store(b, val.arg2);
    },
};
exports.BLKSWAP = {
    load: (s) => {
        s.skip(8);
        return c.BLKSWAP($.delta(1, $.uint(4)).load(s), $.delta(1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(85, 8, val);
        $.delta(1, $.uint(4)).store(b, val.arg0);
        $.delta(1, $.uint(4)).store(b, val.arg1);
    },
};
exports.REVERSE = {
    load: (s) => {
        s.skip(8);
        return c.REVERSE($.delta(2, $.uint(4)).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(94, 8, val);
        $.delta(2, $.uint(4)).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.SETCONTARGS = {
    load: (s) => {
        s.skip(8);
        return c.SETCONTARGS($.uint(4).load(s), $.delta(-1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(236, 8, val);
        $.uint(4).store(b, val.arg0);
        $.delta(-1, $.uint(4)).store(b, val.arg1);
    },
};
exports.BLESSARGS = {
    load: (s) => {
        s.skip(8);
        return c.BLESSARGS($.uint(4).load(s), $.delta(-1, $.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(238, 8, val);
        $.uint(4).store(b, val.arg0);
        $.delta(-1, $.uint(4)).store(b, val.arg1);
    },
};
exports.STIR = {
    load: (s) => {
        s.skip(16);
        return c.STIR($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53002, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STUR = {
    load: (s) => {
        s.skip(16);
        return c.STUR($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53003, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STIQ = {
    load: (s) => {
        s.skip(16);
        return c.STIQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53004, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STUQ = {
    load: (s) => {
        s.skip(16);
        return c.STUQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53005, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STIRQ = {
    load: (s) => {
        s.skip(16);
        return c.STIRQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53006, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STURQ = {
    load: (s) => {
        s.skip(16);
        return c.STURQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53007, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PLDI = {
    load: (s) => {
        s.skip(16);
        return c.PLDI($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55050, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PLDU = {
    load: (s) => {
        s.skip(16);
        return c.PLDU($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55051, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDIQ = {
    load: (s) => {
        s.skip(16);
        return c.LDIQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55052, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDUQ = {
    load: (s) => {
        s.skip(16);
        return c.LDUQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55053, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PLDIQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDIQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55054, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PLDUQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDUQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55055, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PLDUZ = {
    load: (s) => {
        s.skip(13);
        return c.PLDUZ($.plduzArg.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(6882, 13, val);
        $.plduzArg.store(b, val.arg0);
    },
};
exports.PLDSLICE = {
    load: (s) => {
        s.skip(16);
        return c.PLDSLICE($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55069, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDSLICEQ = {
    load: (s) => {
        s.skip(16);
        return c.LDSLICEQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55070, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.PLDSLICEQ = {
    load: (s) => {
        s.skip(16);
        return c.PLDSLICEQ($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55071, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.IFBITJMP = {
    load: (s) => {
        s.skip(11);
        return c.IFBITJMP($.uint(5).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1820, 11, val);
        $.uint(5).store(b, val.arg0);
    },
};
exports.IFNBITJMP = {
    load: (s) => {
        s.skip(11);
        return c.IFNBITJMP($.uint(5).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1821, 11, val);
        $.uint(5).store(b, val.arg0);
    },
};
exports.INDEX2 = {
    load: (s) => {
        s.skip(12);
        return c.INDEX2($.uint(2).load(s), $.uint(2).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1787, 12, val);
        $.uint(2).store(b, val.arg0);
        $.uint(2).store(b, val.arg1);
    },
};
exports.INDEX3 = {
    load: (s) => {
        s.skip(10);
        return c.INDEX3($.uint(2).load(s), $.uint(2).load(s), $.uint(2).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(447, 10, val);
        $.uint(2).store(b, val.arg0);
        $.uint(2).store(b, val.arg1);
        $.uint(2).store(b, val.arg2);
    },
};
exports.PUSHPOW2 = {
    load: (s) => {
        s.skip(8);
        return c.PUSHPOW2($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(33536 >> 8, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.BLKPUSH = {
    load: (s) => {
        s.skip(8);
        return c.BLKPUSH($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(24336 >> 8, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.BLKDROP2 = {
    load: (s) => {
        s.skip(8);
        return c.BLKDROP2($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(27664 >> 8, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.GETGLOB = {
    load: (s) => {
        s.skip(11);
        return c.GETGLOB($.uint(5).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63553 >> 5, 11, val);
        $.uint(5).store(b, val.arg0);
    },
};
exports.SETGLOB = {
    load: (s) => {
        s.skip(11);
        return c.SETGLOB($.uint(5).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63585 >> 5, 11, val);
        $.uint(5).store(b, val.arg0);
    },
};
exports.GETPARAM = {
    load: (s) => {
        s.skip(12);
        return c.GETPARAM($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63520 >> 4, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.PUSHREF = {
    load: (s) => {
        s.skip(8);
        return c.PUSHREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(136, 8, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.PUSHREFSLICE = {
    load: (s) => {
        s.skip(8);
        return c.PUSHREFSLICE($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(137, 8, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.PUSHREFCONT = {
    load: (s) => {
        s.skip(8);
        return c.PUSHREFCONT($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(138, 8, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.CALLREF = {
    load: (s) => {
        s.skip(16);
        return c.CALLREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56124, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.JMPREF = {
    load: (s) => {
        s.skip(16);
        return c.JMPREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56125, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.JMPREFDATA = {
    load: (s) => {
        s.skip(16);
        return c.JMPREFDATA($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(56126, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFREF = {
    load: (s) => {
        s.skip(16);
        return c.IFREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58112, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFNOTREF = {
    load: (s) => {
        s.skip(16);
        return c.IFNOTREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58113, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFJMPREF = {
    load: (s) => {
        s.skip(16);
        return c.IFJMPREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58114, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFNOTJMPREF = {
    load: (s) => {
        s.skip(16);
        return c.IFNOTJMPREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58115, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFREFELSE = {
    load: (s) => {
        s.skip(16);
        return c.IFREFELSE($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58125, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFELSEREF = {
    load: (s) => {
        s.skip(16);
        return c.IFELSEREF($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58126, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.IFREFELSEREF = {
    load: (s) => {
        s.skip(16);
        return c.IFREFELSEREF($.refCodeSlice.load(s), $.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(58127, 16, val);
        $.refCodeSlice.store(b, val.arg0);
        $.refCodeSlice.store(b, val.arg1);
    },
};
exports.IFBITJMPREF = {
    load: (s) => {
        s.skip(11);
        return c.IFBITJMPREF($.uint(5).load(s), $.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1822, 11, val);
        $.uint(5).store(b, val.arg0);
        $.refCodeSlice.store(b, val.arg1);
    },
};
exports.IFNBITJMPREF = {
    load: (s) => {
        s.skip(11);
        return c.IFNBITJMPREF($.uint(5).load(s), $.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1823, 11, val);
        $.uint(5).store(b, val.arg0);
        $.refCodeSlice.store(b, val.arg1);
    },
};
exports.DICTPUSHCONST = {
    load: (s) => {
        s.skip(14);
        return c.DICTPUSHCONST(...$.dictpush.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(15657, 14, val);
        $.dictpush.store(b, [val.arg0, val.arg1]);
    },
};
exports.PFXDICTSWITCH = {
    load: (s) => {
        s.skip(14);
        return c.PFXDICTSWITCH(...$.dictpush.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(15659, 14, val);
        $.dictpush.store(b, [val.arg0, val.arg1]);
    },
};
exports.SDBEGINSX = {
    load: (s) => {
        s.skip(16);
        return c.SDBEGINSX();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55078, 16, val);
    },
};
exports.SDBEGINSXQ = {
    load: (s) => {
        s.skip(16);
        return c.SDBEGINSXQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55079, 16, val);
    },
};
exports.SDBEGINS = {
    load: (s) => {
        s.skip(14);
        return c.SDBEGINS($.slice($.refs(0), $.uint(7), 3).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(13770, 14, val);
        $.slice($.refs(0), $.uint(7), 3).store(b, val.arg0);
    },
};
exports.SDBEGINSQ = {
    load: (s) => {
        s.skip(14);
        return c.SDBEGINSQ($.slice($.refs(0), $.uint(7), 3).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(13771, 14, val);
        $.slice($.refs(0), $.uint(7), 3).store(b, val.arg0);
    },
};
exports.STREFCONST = {
    load: (s) => {
        s.skip(16);
        return c.STREFCONST($.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53024 >> 0, 16, val);
        $.refCodeSlice.store(b, val.arg0);
    },
};
exports.STREF2CONST = {
    load: (s) => {
        s.skip(16);
        return c.STREF2CONST($.refCodeSlice.load(s), $.refCodeSlice.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53025 >> 0, 16, val);
        $.refCodeSlice.store(b, val.arg0);
        $.refCodeSlice.store(b, val.arg1);
    },
};
exports.THROWANYIF = {
    load: (s) => {
        s.skip(16);
        return c.THROWANYIF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62194, 16, val);
    },
};
exports.THROWARGANYIF = {
    load: (s) => {
        s.skip(16);
        return c.THROWARGANYIF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(62195, 16, val);
    },
};
exports.DEBUGSTR = {
    load: (s) => {
        s.skip(12);
        return c.DEBUGSTR($.debugstr.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(4079, 12, val);
        $.debugstr.store(b, val.arg0);
    },
};
exports.SETCONTCTR = {
    load: (s) => {
        s.skip(12);
        return c.SETCONTCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60768 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.SETRETCTR = {
    load: (s) => {
        s.skip(12);
        return c.SETRETCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60784 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.SETALTCTR = {
    load: (s) => {
        s.skip(12);
        return c.SETALTCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60800 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.POPSAVE = {
    load: (s) => {
        s.skip(12);
        return c.POPSAVE($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60816 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.SAVECTR = {
    load: (s) => {
        s.skip(12);
        return c.SAVECTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60832 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.SAVEALTCTR = {
    load: (s) => {
        s.skip(12);
        return c.SAVEALTCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60848 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.SAVEBOTHCTR = {
    load: (s) => {
        s.skip(12);
        return c.SAVEBOTHCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60864 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.RUNVM = {
    load: (s) => {
        s.skip(12);
        return c.RUNVM($.runvmArg.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(3508, 12, val);
        $.runvmArg.store(b, val.arg0);
    },
};
exports.SWAP2 = {
    load: (s) => {
        s.skip(8);
        return c.SWAP2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(90, 8, val);
    },
};
exports.DROP2 = {
    load: (s) => {
        s.skip(8);
        return c.DROP2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(91, 8, val);
    },
};
exports.DUP2 = {
    load: (s) => {
        s.skip(8);
        return c.DUP2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(92, 8, val);
    },
};
exports.OVER2 = {
    load: (s) => {
        s.skip(8);
        return c.OVER2();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(93, 8, val);
    },
};
exports.ADDRSHIFT_MOD = {
    load: (s) => {
        s.skip(16);
        return c.ADDRSHIFT_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43312, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.ADDRSHIFTR_MOD = {
    load: (s) => {
        s.skip(16);
        return c.ADDRSHIFTR_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43313, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.ADDRSHIFTC_MOD = {
    load: (s) => {
        s.skip(16);
        return c.ADDRSHIFTC_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43314, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFT_ = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFT_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43316, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFTR_ = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTR_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43317, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFTC_ = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTC_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43318, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MODPOW2_ = {
    load: (s) => {
        s.skip(16);
        return c.MODPOW2_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43320, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MODPOW2R_ = {
    load: (s) => {
        s.skip(16);
        return c.MODPOW2R_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43321, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MODPOW2C_ = {
    load: (s) => {
        s.skip(16);
        return c.MODPOW2C_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43322, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFT_MOD = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFT_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43324, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFTR_MOD = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTR_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43325, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFTC_MOD = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFTC_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43326, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULADDRSHIFT_MOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDRSHIFT_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43440, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULADDRSHIFTR_MOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDRSHIFTR_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43441, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULADDRSHIFTC_MOD = {
    load: (s) => {
        s.skip(16);
        return c.MULADDRSHIFTC_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43442, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULRSHIFT_ = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFT_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43444, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULRSHIFTR_ = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTR_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43445, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULRSHIFTC_ = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTC_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43446, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULMODPOW2_ = {
    load: (s) => {
        s.skip(16);
        return c.MULMODPOW2_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43448, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULMODPOW2R_ = {
    load: (s) => {
        s.skip(16);
        return c.MULMODPOW2R_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43449, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULMODPOW2C_ = {
    load: (s) => {
        s.skip(16);
        return c.MULMODPOW2C_($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43450, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULRSHIFT_MOD = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFT_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43452, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULRSHIFTR_MOD = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTR_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43453, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.MULRSHIFTC_MOD = {
    load: (s) => {
        s.skip(16);
        return c.MULRSHIFTC_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43454, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_ADDDIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_ADDDIVMOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43472, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_ADDDIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_ADDDIVMODR($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43473, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_ADDDIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_ADDDIVMODC($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43474, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_DIV = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_DIV($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43476, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_DIVR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_DIVR($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43477, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_DIVC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_DIVC($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43478, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_MOD = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_MOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43480, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_MODR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_MODR($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43481, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_MODC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_MODC($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43482, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_DIVMOD = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_DIVMOD($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43484, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_DIVMODR = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_DIVMODR($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43485, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT_DIVMODC = {
    load: (s) => {
        s.skip(16);
        return c.LSHIFT_DIVMODC($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43486, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.HASHEXT = {
    load: (s) => {
        s.skip(16);
        return c.HASHEXT($.hash.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63748, 16, val);
        $.hash.store(b, val.arg0);
    },
};
exports.HASHEXTR = {
    load: (s) => {
        s.skip(16);
        return c.HASHEXTR($.hash.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63749, 16, val);
        $.hash.store(b, val.arg0);
    },
};
exports.HASHEXTA = {
    load: (s) => {
        s.skip(16);
        return c.HASHEXTA($.hash.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63750, 16, val);
        $.hash.store(b, val.arg0);
    },
};
exports.HASHEXTAR = {
    load: (s) => {
        s.skip(16);
        return c.HASHEXTAR($.hash.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(63751, 16, val);
        $.hash.store(b, val.arg0);
    },
};
exports.STREF = {
    load: (s) => {
        s.skip(8);
        return c.STREF();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(204, 8, val);
    },
};
exports.STREF_ALT = {
    load: (s) => {
        s.skip(16);
        return c.STREF_ALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53008, 16, val);
    },
};
exports.STSLICE = {
    load: (s) => {
        s.skip(8);
        return c.STSLICE();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(206, 8, val);
    },
};
exports.STSLICE_ALT = {
    load: (s) => {
        s.skip(16);
        return c.STSLICE_ALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53010, 16, val);
    },
};
exports.XCHG3 = {
    load: (s) => {
        s.skip(4);
        return c.XCHG3($.uint(4).load(s), $.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(4, 4, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
        $.uint(4).store(b, val.arg2);
    },
};
exports.XCHG3_ALT = {
    load: (s) => {
        s.skip(12);
        return c.XCHG3_ALT($.uint(4).load(s), $.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(1344, 12, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
        $.uint(4).store(b, val.arg2);
    },
};
exports.STI = {
    load: (s) => {
        s.skip(8);
        return c.STI($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(202, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STI_ALT = {
    load: (s) => {
        s.skip(16);
        return c.STI_ALT($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53000, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STU = {
    load: (s) => {
        s.skip(8);
        return c.STU($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(203, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.STU_ALT = {
    load: (s) => {
        s.skip(16);
        return c.STU_ALT($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53001, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDI = {
    load: (s) => {
        s.skip(8);
        return c.LDI($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(210, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDI_ALT = {
    load: (s) => {
        s.skip(16);
        return c.LDI_ALT($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55048, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDU = {
    load: (s) => {
        s.skip(8);
        return c.LDU($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(211, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDU_ALT = {
    load: (s) => {
        s.skip(16);
        return c.LDU_ALT($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55049, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDSLICE = {
    load: (s) => {
        s.skip(8);
        return c.LDSLICE($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(214, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LDSLICE_ALT = {
    load: (s) => {
        s.skip(16);
        return c.LDSLICE_ALT($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(55068, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.LSHIFT = {
    load: (s) => {
        s.skip(8);
        return c.LSHIFT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(172, 8, val);
    },
};
exports.LSHIFT_1 = {
    load: (s) => {
        s.skip(8);
        return c.LSHIFT_1($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(170, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.QLSHIFT = {
    load: (s) => {
        s.skip(16);
        return c.QLSHIFT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47020, 16, val);
    },
};
exports.QLSHIFT_1 = {
    load: (s) => {
        s.skip(16);
        return c.QLSHIFT_1($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47018, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.BCHKBITS = {
    load: (s) => {
        s.skip(16);
        return c.BCHKBITS();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53049, 16, val);
    },
};
exports.BCHKBITS_1 = {
    load: (s) => {
        s.skip(16);
        return c.BCHKBITS_1($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53048, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.BCHKBITSQ = {
    load: (s) => {
        s.skip(16);
        return c.BCHKBITSQ();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53053, 16, val);
    },
};
exports.BCHKBITSQ_1 = {
    load: (s) => {
        s.skip(16);
        return c.BCHKBITSQ_1($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(53052, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFT = {
    load: (s) => {
        s.skip(8);
        return c.RSHIFT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(173, 8, val);
    },
};
exports.RSHIFT_1 = {
    load: (s) => {
        s.skip(8);
        return c.RSHIFT_1($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(171, 8, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.RSHIFT_ALT = {
    load: (s) => {
        s.skip(16);
        return c.RSHIFT_ALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(43300, 16, val);
    },
};
exports.QRSHIFT = {
    load: (s) => {
        s.skip(16);
        return c.QRSHIFT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47021, 16, val);
    },
};
exports.QRSHIFT_1 = {
    load: (s) => {
        s.skip(16);
        return c.QRSHIFT_1($.delta(1, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(47019, 16, val);
        $.delta(1, $.uint(8)).store(b, val.arg0);
    },
};
exports.QRSHIFT_ALT = {
    load: (s) => {
        s.skip(24);
        return c.QRSHIFT_ALT();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(12036388, 24, val);
    },
};
exports.CALLDICT = {
    load: (s) => {
        s.skip(8);
        return c.CALLDICT($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(240, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.CALLDICT_LONG = {
    load: (s) => {
        s.skip(10);
        return c.CALLDICT_LONG($.uint(14).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(964, 10, val);
        $.uint(14).store(b, val.arg0);
    },
};
exports.THROW_SHORT = {
    load: (s) => {
        s.skip(10);
        return c.THROW_SHORT($.uint(6).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(968, 10, val);
        $.uint(6).store(b, val.arg0);
    },
};
exports.THROW = {
    load: (s) => {
        s.skip(13);
        return c.THROW($.uint(11).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7768, 13, val);
        $.uint(11).store(b, val.arg0);
    },
};
exports.THROWIF_SHORT = {
    load: (s) => {
        s.skip(10);
        return c.THROWIF_SHORT($.uint(6).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(969, 10, val);
        $.uint(6).store(b, val.arg0);
    },
};
exports.THROWIF = {
    load: (s) => {
        s.skip(13);
        return c.THROWIF($.uint(11).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7770, 13, val);
        $.uint(11).store(b, val.arg0);
    },
};
exports.THROWIFNOT_SHORT = {
    load: (s) => {
        s.skip(10);
        return c.THROWIFNOT_SHORT($.uint(6).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(970, 10, val);
        $.uint(6).store(b, val.arg0);
    },
};
exports.THROWIFNOT = {
    load: (s) => {
        s.skip(13);
        return c.THROWIFNOT($.uint(11).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7772, 13, val);
        $.uint(11).store(b, val.arg0);
    },
};
exports.PUSHINT = {
    load: (s) => {
        s.skip(4);
        return c.PUSHINT($.tinyInt.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(7, 4, val);
        $.tinyInt.store(b, val.arg0);
    },
};
exports.PUSHINT_8 = {
    load: (s) => {
        s.skip(8);
        return c.PUSHINT_8($.int(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(128, 8, val);
        $.int(8).store(b, val.arg0);
    },
};
exports.PUSHINT_16 = {
    load: (s) => {
        s.skip(8);
        return c.PUSHINT_16($.int(16).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(129, 8, val);
        $.int(16).store(b, val.arg0);
    },
};
exports.PUSHINT_LONG = {
    load: (s) => {
        s.skip(8);
        return c.PUSHINT_LONG($.largeInt.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(4160 >> 5, 8, val);
        $.largeInt.store(b, val.arg0);
    },
};
exports.XCHG_LONG = {
    load: (s) => {
        s.skip(8);
        return c.XCHG_LONG($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(17, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.XCHG_0 = {
    load: (s) => {
        s.skip(4);
        return c.XCHG_0($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(2 >> 4, 4, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.XCHG_1 = {
    load: (s) => {
        s.skip(8);
        return c.XCHG_1($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(16, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.XCHG_3 = {
    load: (s) => {
        s.skip(4);
        return c.XCHG_3($.s1.load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(18 >> 4, 4, val);
        $.s1.store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.DUMPSTK = {
    load: (s) => {
        s.skip(16);
        return c.DUMPSTK();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65024, 16, val);
    },
};
exports.DEBUG = {
    load: (s) => {
        s.skip(8);
        return c.DEBUG($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65025 >> 8, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.STRDUMP = {
    load: (s) => {
        s.skip(16);
        return c.STRDUMP();
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65044, 16, val);
    },
};
exports.DEBUG_1 = {
    load: (s) => {
        s.skip(8);
        return c.DEBUG_1($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65045 >> 8, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.DUMP = {
    load: (s) => {
        s.skip(12);
        return c.DUMP($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(4066, 12, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.DEBUG_2 = {
    load: (s) => {
        s.skip(8);
        return c.DEBUG_2($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65072 >> 8, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.PUSHCTR = {
    load: (s) => {
        s.skip(12);
        return c.PUSHCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60736 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.PUSH = {
    load: (s) => {
        s.skip(4);
        return c.PUSH($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(34 >> 4, 4, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.PUSH_LONG = {
    load: (s) => {
        s.skip(8);
        return c.PUSH_LONG($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(86, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.POPCTR = {
    load: (s) => {
        s.skip(12);
        return c.POPCTR($.control.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(60752 >> 4, 12, val);
        $.control.store(b, val.arg0);
    },
};
exports.POP = {
    load: (s) => {
        s.skip(4);
        return c.POP($.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(50 >> 4, 4, val);
        $.uint(4).store(b, val.arg0);
    },
};
exports.POP_LONG = {
    load: (s) => {
        s.skip(8);
        return c.POP_LONG($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(87, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.CALLXARGS = {
    load: (s) => {
        s.skip(12);
        return c.CALLXARGS($.uint(4).load(s), $.minusOne.load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(3504, 12, val);
        $.uint(4).store(b, val.arg0);
        $.minusOne.store(b, val.arg1);
    },
};
exports.CALLXARGS_1 = {
    load: (s) => {
        s.skip(8);
        return c.CALLXARGS_1($.uint(4).load(s), $.uint(4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(218, 8, val);
        $.uint(4).store(b, val.arg0);
        $.uint(4).store(b, val.arg1);
    },
};
exports.PUSHSLICE = {
    load: (s) => {
        s.skip(8);
        return c.PUSHSLICE($.slice($.refs(0), $.uint(4), 4).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(139, 8, val);
        $.slice($.refs(0), $.uint(4), 4).store(b, val.arg0);
    },
};
exports.PUSHSLICE_REFS_1 = {
    load: (s) => {
        s.skip(8);
        return c.PUSHSLICE_REFS_1($.slice($.delta(1, $.uint(2)), $.uint(5), 1).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(140, 8, val);
        $.slice($.delta(1, $.uint(2)), $.uint(5), 1).store(b, val.arg0);
    },
};
exports.PUSHSLICE_LONG_1 = {
    load: (s) => {
        s.skip(8);
        return c.PUSHSLICE_LONG_1($.slice($.uint(3), $.uint(7), 6).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(144384 >> 10, 8, val);
        $.slice($.uint(3), $.uint(7), 6).store(b, val.arg0);
    },
};
exports.PUSHCONT = {
    load: (s) => {
        s.skip(7);
        return c.PUSHCONT($.codeSlice($.uint(2), $.uint(7)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(71, 7, val);
        $.codeSlice($.uint(2), $.uint(7)).store(b, val.arg0);
    },
};
exports.PUSHCONT_SHORT = {
    load: (s) => {
        s.skip(4);
        return c.PUSHCONT_SHORT($.inlineCodeSlice($.uint(4)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(9, 4, val);
        $.inlineCodeSlice($.uint(4)).store(b, val.arg0);
    },
};
exports.STSLICECONST = {
    load: (s) => {
        s.skip(9);
        return c.STSLICECONST($.slice($.uint(2), $.uint(3), 2).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(415, 9, val);
        $.slice($.uint(2), $.uint(3), 2).store(b, val.arg0);
    },
};
exports.SETCP = {
    load: (s) => {
        s.skip(8);
        return c.SETCP($.uint(8).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65280 >> 8, 8, val);
        $.uint(8).store(b, val.arg0);
    },
};
exports.SETCP_SHORT = {
    load: (s) => {
        s.skip(8);
        return c.SETCP_SHORT($.delta(-256, $.uint(8)).load(s));
    },
    store: (b, val) => {
        b.storeInstructionPrefix(65521 >> 8, 8, val);
        $.delta(-256, $.uint(8)).store(b, val.arg0);
    },
};
exports.DEBUGMARK = {
    load: (s) => {
        s.skip(16);
        return c.DEBUGMARK($.uint(16).load(s));
    },
    store: (b, val) => {
        b.startDebugSection(val.arg0);
    },
};
