"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ISNAN = exports.CMP = exports.GEQ = exports.NEQ = exports.GREATER = exports.LEQ = exports.EQUAL = exports.LESS = exports.SGN = exports.QABS = exports.QMINMAX = exports.QMAX = exports.QMIN = exports.QUBITSIZE = exports.QBITSIZE = exports.QUFITSX = exports.QFITSX = exports.QNOT = exports.QXOR = exports.QOR = exports.QAND = exports.QPOW2 = exports.QMUL = exports.QDEC = exports.QINC = exports.QNEGATE = exports.QSUBR = exports.QSUB = exports.QADD = exports.ABS = exports.MINMAX = exports.MAX = exports.MIN = exports.UBITSIZE = exports.BITSIZE = exports.UFITSX = exports.FITSX = exports.NOT = exports.XOR = exports.OR = exports.AND = exports.POW2 = exports.MUL = exports.DEC = exports.INC = exports.NEGATE = exports.SUBR = exports.SUB = exports.ADD = exports.PUSHNAN = void 0;
exports.BREMBITS = exports.BBITREFS = exports.BREFS = exports.BBITS = exports.BDEPTH = exports.ENDXC = exports.STBRQ = exports.STSLICERQ = exports.STBREFRQ = exports.STREFRQ = exports.STBQ = exports.STSLICEQ = exports.STBREFQ = exports.STREFQ = exports.STBR = exports.STSLICER = exports.STBREFR = exports.STREFR = exports.STB = exports.STBREF = exports.ENDCST = exports.ENDC = exports.NEWC = exports.SDCNTTRAIL1 = exports.SDCNTTRAIL0 = exports.SDCNTLEAD1 = exports.SDCNTLEAD0 = exports.SDPSFXREV = exports.SDPSFX = exports.SDSFXREV = exports.SDSFX = exports.SDPPFXREV = exports.SDPPFX = exports.SDPFXREV = exports.SDPFX = exports.SDEQ = exports.SDLEXCMP = exports.SDFIRST = exports.SREMPTY = exports.SDEMPTY = exports.SEMPTY = exports.QCMP = exports.QGEQ = exports.QNEQ = exports.QGREATER = exports.QLEQ = exports.QEQUAL = exports.QLESS = exports.QSGN = exports.CHKNAN = void 0;
exports.RET = exports.JMPX = exports.EXECUTE = exports.CDEPTHIX = exports.CHASHIX = exports.CLEVELMASK = exports.CLEVEL = exports.CDEPTH = exports.SDEPTH = exports.LDSAME = exports.LDONES = exports.LDZEROES = exports.SBITREFS = exports.SREFS = exports.SBITS = exports.PLDREFVAR = exports.SCHKBITREFSQ = exports.SCHKREFSQ = exports.SCHKBITSQ = exports.SCHKBITREFS = exports.SCHKREFS = exports.SCHKBITS = exports.XLOADQ = exports.XLOAD = exports.XCTOS = exports.SPLITQ = exports.SPLIT = exports.SUBSLICE = exports.SSKIPLAST = exports.SCUTLAST = exports.SSKIPFIRST = exports.SCUTFIRST = exports.SDSUBSTR = exports.SDSKIPLAST = exports.SDCUTLAST = exports.SDSKIPFIRST = exports.SDCUTFIRST = exports.LDREFRTOS = exports.LDREF = exports.ENDS = exports.CTOS = exports.STSAME = exports.STONES = exports.STZEROES = exports.BCHKBITREFSQ = exports.BCHKREFSQ = exports.BCHKBITREFS = exports.BCHKREFS = exports.BREMBITREFS = exports.BREMREFS = void 0;
exports.ATEXIT = exports.COMPOSBOTH = exports.BOOLOR = exports.BOOLAND = exports.SETCONTCTRMANYX = exports.SETCONTCTRX = exports.POPCTRX = exports.PUSHCTRX = exports.BLESSVARARGS = exports.BLESS = exports.SETNUMVARARGS = exports.SETCONTVARARGS = exports.RETURNVARARGS = exports.AGAINENDBRK = exports.AGAINBRK = exports.WHILEENDBRK = exports.WHILEBRK = exports.UNTILENDBRK = exports.UNTILBRK = exports.REPEATENDBRK = exports.REPEATBRK = exports.AGAINEND = exports.AGAIN = exports.WHILEEND = exports.WHILE = exports.UNTILEND = exports.UNTIL = exports.REPEATEND = exports.REPEAT = exports.IFNOTRETALT = exports.IFRETALT = exports.CONDSELCHK = exports.CONDSEL = exports.IFELSE = exports.IFNOTJMP = exports.IFJMP = exports.IFNOT = exports.IF = exports.IFNOTRET = exports.IFRET = exports.RUNVMX = exports.RETDATA = exports.CALLCCVARARGS = exports.JMPXVARARGS = exports.RETVARARGS = exports.CALLXVARARGS = exports.JMPXDATA = exports.CALLCC = exports.RETBOOL = exports.RETALT = void 0;
exports.COMMIT = exports.GASCONSUMED = exports.SETGASLIMIT = exports.ACCEPT = exports.ONLYX = exports.ONLYTOPX = exports.CHKDEPTH = exports.DEPTH = exports.XCHGX = exports.TUCK = exports.DROPX = exports.REVX = exports.BLKSWX = exports.ROLLREV = exports.ROLL = exports.PICK = exports.ROTREV = exports.ROT = exports.NIP = exports.DROP = exports.OVER = exports.DUP = exports.SWAP = exports.NOP = exports.PFXDICTGETEXEC = exports.PFXDICTGETJMP = exports.PFXDICTGET = exports.PFXDICTGETQ = exports.PFXDICTDEL = exports.PFXDICTADD = exports.PFXDICTREPLACE = exports.PFXDICTSET = exports.PLDDICTQ = exports.LDDICTQ = exports.PLDDICT = exports.LDDICT = exports.PLDDICTS = exports.LDDICTS = exports.SKIPDICT = exports.STDICT = exports.SETCPX = exports.TRY = exports.SAMEALTSAVE = exports.SAMEALT = exports.BOOLEVAL = exports.INVERT = exports.THENRETALT = exports.THENRET = exports.SETEXITALT = exports.ATEXITALT = void 0;
exports.RIST255_QVALIDATE = exports.RIST255_PUSHL = exports.RIST255_MULBASE = exports.RIST255_MUL = exports.RIST255_SUB = exports.RIST255_ADD = exports.RIST255_VALIDATE = exports.RIST255_FROMHASH = exports.P256_CHKSIGNS = exports.P256_CHKSIGNU = exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD = exports.ECRECOVER = exports.CHKSIGNS = exports.CHKSIGNU = exports.SHA256U = exports.HASHSU = exports.HASHCU = exports.ADDRAND = exports.SETRAND = exports.RAND = exports.RANDU256 = exports.SETGLOBVAR = exports.GETGLOBVAR = exports.GETFORWARDFEESIMPLE = exports.GETGASFEESIMPLE = exports.GETORIGINALFWDFEE = exports.GETPRECOMPILEDGAS = exports.GETFORWARDFEE = exports.GETSTORAGEFEE = exports.GETGASFEE = exports.GLOBALID = exports.PREVMCBLOCKS_100 = exports.PREVKEYBLOCK = exports.PREVMCBLOCKS = exports.CONFIGOPTPARAM = exports.CONFIGPARAM = exports.CONFIGDICT = exports.DUEPAYMENT = exports.UNPACKEDCONFIGTUPLE = exports.PREVBLOCKSINFOTUPLE = exports.STORAGEFEES = exports.INCOMINGVALUE = exports.MYCODE = exports.CONFIGROOT = exports.MYADDR = exports.BALANCE = exports.RANDSEED = exports.LTIME = exports.BLOCKLT = exports.NOW = void 0;
exports.RAWRESERVE = exports.SENDRAWMSG = exports.REWRITEVARADDRQ = exports.REWRITEVARADDR = exports.REWRITESTDADDRQ = exports.REWRITESTDADDR = exports.PARSEMSGADDRQ = exports.PARSEMSGADDR = exports.LDMSGADDRQ = exports.LDMSGADDR = exports.STVARINT32 = exports.STVARUINT32 = exports.LDVARINT32 = exports.LDVARUINT32 = exports.STVARINT16 = exports.STGRAMS = exports.LDVARINT16 = exports.LDGRAMS = exports.SDATASIZE = exports.SDATASIZEQ = exports.CDATASIZE = exports.CDATASIZEQ = exports.BLS_PUSHR = exports.BLS_PAIRING = exports.BLS_G2_ISZERO = exports.BLS_G2_INGROUP = exports.BLS_MAP_TO_G2 = exports.BLS_G2_ZERO = exports.BLS_G2_MULTIEXP = exports.BLS_G2_MUL = exports.BLS_G2_NEG = exports.BLS_G2_SUB = exports.BLS_G2_ADD = exports.BLS_G1_ISZERO = exports.BLS_G1_INGROUP = exports.BLS_MAP_TO_G1 = exports.BLS_G1_ZERO = exports.BLS_G1_MULTIEXP = exports.BLS_G1_MUL = exports.BLS_G1_NEG = exports.BLS_G1_SUB = exports.BLS_G1_ADD = exports.BLS_AGGREGATEVERIFY = exports.BLS_FASTAGGREGATEVERIFY = exports.BLS_AGGREGATE = exports.BLS_VERIFY = exports.RIST255_QMULBASE = exports.RIST255_QMUL = exports.RIST255_QSUB = exports.RIST255_QADD = void 0;
exports.QMODC = exports.QMODR = exports.QMOD = exports.QDIVC = exports.QDIVR = exports.QDIV = exports.QADDDIVMODC = exports.QADDDIVMODR = exports.QADDDIVMOD = exports.DIVMODC = exports.DIVMODR = exports.DIVMOD = exports.MODC = exports.MODR = exports.MOD = exports.DIVC = exports.DIVR = exports.DIV = exports.ADDDIVMODC = exports.ADDDIVMODR = exports.ADDDIVMOD = exports.NULLROTRIFNOT2 = exports.NULLROTRIF2 = exports.NULLSWAPIFNOT2 = exports.NULLSWAPIF2 = exports.NULLROTRIFNOT = exports.NULLROTRIF = exports.NULLSWAPIFNOT = exports.NULLSWAPIF = exports.TPOP = exports.TPUSH = exports.LAST = exports.ISTUPLE = exports.QTLEN = exports.TLEN = exports.SETINDEXVARQ = exports.INDEXVARQ = exports.SETINDEXVAR = exports.EXPLODEVAR = exports.UNPACKFIRSTVAR = exports.UNTUPLEVAR = exports.INDEXVAR = exports.TUPLEVAR = exports.ISNULL = exports.PUSHNULL = exports.SENDMSG = exports.CHANGELIB = exports.SETLIBCODE = exports.SETCODE = exports.RAWRESERVEX = void 0;
exports.MULADDRSHIFTMOD = exports.QMULDIVMODC = exports.QMULDIVMODR = exports.QMULDIVMOD = exports.QMULMODC = exports.QMULMODR = exports.QMULMOD = exports.QMULDIVC = exports.QMULDIVR = exports.QMULDIV = exports.QMULADDDIVMODC = exports.QMULADDDIVMODR = exports.QMULADDDIVMOD = exports.MULDIVMODC = exports.MULDIVMODR = exports.MULDIVMOD = exports.MULMODC = exports.MULMODR = exports.MULMOD = exports.MULDIVC = exports.MULDIVR = exports.MULDIV = exports.MULADDDIVMODC = exports.MULADDDIVMODR = exports.MULADDDIVMOD = exports.QRSHIFTMODC = exports.QRSHIFTMODR = exports.QRSHIFTMOD = exports.QMODPOW2C = exports.QMODPOW2R = exports.QMODPOW2 = exports.QRSHIFTC = exports.QRSHIFTR = exports.QADDRSHIFTMODC = exports.QADDRSHIFTMODR = exports.QADDRSHIFTMOD = exports.RSHIFTMODC = exports.RSHIFTMODR = exports.RSHIFTMOD = exports.MODPOW2C = exports.MODPOW2R = exports.MODPOW2 = exports.RSHIFTC = exports.RSHIFTR = exports.ADDRSHIFTMODC = exports.ADDRSHIFTMODR = exports.ADDRSHIFTMOD = exports.QDIVMODC = exports.QDIVMODR = exports.QDIVMOD = void 0;
exports.STIXR = exports.STUX = exports.STIX = exports.QLSHIFTDIVMODC = exports.QLSHIFTDIVMODR = exports.QLSHIFTDIVMOD = exports.QLSHIFTMODC = exports.QLSHIFTMODR = exports.QLSHIFTMOD = exports.QLSHIFTDIVC = exports.QLSHIFTDIVR = exports.QLSHIFTDIV = exports.QLSHIFTADDDIVMODC = exports.QLSHIFTADDDIVMODR = exports.QLSHIFTADDDIVMOD = exports.LSHIFTDIVMODC = exports.LSHIFTDIVMODR = exports.LSHIFTDIVMOD = exports.LSHIFTMODC = exports.LSHIFTMODR = exports.LSHIFTMOD = exports.LSHIFTDIVC = exports.LSHIFTDIVR = exports.LSHIFTDIV = exports.LSHIFTADDDIVMODC = exports.LSHIFTADDDIVMODR = exports.LSHIFTADDDIVMOD = exports.QMULRSHIFTCMOD = exports.QMULRSHIFTRMOD = exports.QMULRSHIFTMOD = exports.QMULMODPOW2C = exports.QMULMODPOW2R = exports.QMULMODPOW2 = exports.QMULRSHIFTC = exports.QMULRSHIFTR = exports.QMULRSHIFT = exports.QMULADDRSHIFTCMOD = exports.QMULADDRSHIFTRMOD = exports.QMULADDRSHIFTMOD = exports.MULRSHIFTCMOD = exports.MULRSHIFTRMOD = exports.MULRSHIFTMOD = exports.MULMODPOW2C = exports.MULMODPOW2R = exports.MULMODPOW2 = exports.MULRSHIFTC = exports.MULRSHIFTR = exports.MULRSHIFT = exports.MULADDRSHIFTCMOD = exports.MULADDRSHIFTRMOD = void 0;
exports.DICTUGET = exports.DICTIGETREF = exports.DICTIGET = exports.DICTGETREF = exports.DICTGET = exports.DICTUGETEXECZ = exports.DICTIGETEXECZ = exports.DICTUGETJMPZ = exports.DICTIGETJMPZ = exports.DICTUGETEXEC = exports.DICTIGETEXEC = exports.DICTUGETJMP = exports.DICTIGETJMP = exports.PLDULE8Q = exports.PLDILE8Q = exports.PLDULE4Q = exports.PLDILE4Q = exports.LDULE8Q = exports.LDILE8Q = exports.LDULE4Q = exports.LDILE4Q = exports.PLDULE8 = exports.PLDILE8 = exports.PLDULE4 = exports.PLDILE4 = exports.LDULE8 = exports.LDILE8 = exports.LDULE4 = exports.LDILE4 = exports.PLDSLICEXQ = exports.LDSLICEXQ = exports.PLDSLICEX = exports.LDSLICEX = exports.PLDUXQ = exports.PLDIXQ = exports.LDUXQ = exports.LDIXQ = exports.PLDUX = exports.PLDIX = exports.LDUX = exports.LDIX = exports.STULE8 = exports.STILE8 = exports.STULE4 = exports.STILE4 = exports.STUXRQ = exports.STIXRQ = exports.STUXQ = exports.STIXQ = exports.STUXR = void 0;
exports.DICTMAX = exports.DICTUMINREF = exports.DICTUMIN = exports.DICTIMINREF = exports.DICTIMIN = exports.DICTMINREF = exports.DICTMIN = exports.DICTUDELGETREF = exports.DICTUDELGET = exports.DICTIDELGETREF = exports.DICTIDELGET = exports.DICTDELGETREF = exports.DICTDELGET = exports.DICTUADDGETREF = exports.DICTUADDGET = exports.DICTIADDGETREF = exports.DICTIADDGET = exports.DICTADDGETREF = exports.DICTADDGET = exports.DICTUADDREF = exports.DICTUADD = exports.DICTIADDREF = exports.DICTIADD = exports.DICTADDREF = exports.DICTADD = exports.DICTUREPLACEGETREF = exports.DICTUREPLACEGET = exports.DICTIREPLACEGETREF = exports.DICTIREPLACEGET = exports.DICTREPLACEGETREF = exports.DICTREPLACEGET = exports.DICTUREPLACEREF = exports.DICTUREPLACE = exports.DICTIREPLACEREF = exports.DICTIREPLACE = exports.DICTREPLACEREF = exports.DICTREPLACE = exports.DICTUSETGETREF = exports.DICTUSETGET = exports.DICTISETGETREF = exports.DICTISETGET = exports.DICTSETGETREF = exports.DICTSETGET = exports.DICTUSETREF = exports.DICTUSET = exports.DICTISETREF = exports.DICTISET = exports.DICTSETREF = exports.DICTSET = exports.DICTUGETREF = void 0;
exports.SUBDICTURPGET = exports.SUBDICTIRPGET = exports.SUBDICTRPGET = exports.SUBDICTUGET = exports.SUBDICTIGET = exports.SUBDICTGET = exports.DICTUSETGETOPTREF = exports.DICTISETGETOPTREF = exports.DICTSETGETOPTREF = exports.DICTUGETOPTREF = exports.DICTIGETOPTREF = exports.DICTGETOPTREF = exports.DICTUDEL = exports.DICTIDEL = exports.DICTDEL = exports.DICTUADDGETB = exports.DICTIADDGETB = exports.DICTADDGETB = exports.DICTUADDB = exports.DICTIADDB = exports.DICTADDB = exports.DICTUREPLACEGETB = exports.DICTIREPLACEGETB = exports.DICTREPLACEGETB = exports.DICTUREPLACEB = exports.DICTIREPLACEB = exports.DICTREPLACEB = exports.DICTUSETGETB = exports.DICTISETGETB = exports.DICTSETGETB = exports.DICTUSETB = exports.DICTISETB = exports.DICTSETB = exports.DICTUREMMAXREF = exports.DICTUREMMAX = exports.DICTIREMMAXREF = exports.DICTIREMMAX = exports.DICTREMMAXREF = exports.DICTREMMAX = exports.DICTUREMMINREF = exports.DICTUREMMIN = exports.DICTIREMMINREF = exports.DICTIREMMIN = exports.DICTREMMINREF = exports.DICTREMMIN = exports.DICTUMAXREF = exports.DICTUMAX = exports.DICTIMAXREF = exports.DICTIMAX = exports.DICTMAXREF = void 0;
exports.TUPLE = exports.BLKDROP = exports.RETURNARGS = exports.RETARGS = exports.JMPXARGS = exports.THROWARGIFNOT = exports.THROWARGIF = exports.THROWARG = exports.PREPAREDICT = exports.JMPDICT = exports.CDEPTHI = exports.CHASHI = exports.PLDREFIDX = exports.TRYARGS = exports.CALLCCARGS = exports.SETCONTCTRMANY = exports.QUFITS = exports.QFITS = exports.UFITS = exports.FITS = exports.PUSHNEGPOW2 = exports.PUSHPOW2DEC = exports.QNEQINT = exports.QGTINT = exports.QLESSINT = exports.QEQINT = exports.NEQINT = exports.GTINT = exports.LESSINT = exports.EQINT = exports.QMULINT = exports.QADDINT = exports.MULINT = exports.ADDINT = exports.DICTUGETPREVEQ = exports.DICTUGETPREV = exports.DICTUGETNEXTEQ = exports.DICTUGETNEXT = exports.DICTIGETPREVEQ = exports.DICTIGETPREV = exports.DICTIGETNEXTEQ = exports.DICTIGETNEXT = exports.DICTGETPREVEQ = exports.DICTGETPREV = exports.DICTGETNEXTEQ = exports.DICTGETNEXT = exports.THROWARGANYIFNOT = exports.THROWANYIFNOT = exports.THROWARGANY = exports.THROWANY = void 0;
exports.PUSHREFSLICE = exports.PUSHREF = exports.GETPARAM = exports.SETGLOB = exports.GETGLOB = exports.BLKDROP2 = exports.BLKPUSH = exports.PUSHPOW2 = exports.INDEX3 = exports.INDEX2 = exports.IFNBITJMP = exports.IFBITJMP = exports.PLDSLICEQ = exports.LDSLICEQ = exports.PLDSLICE = exports.PLDUZ = exports.PLDUQ = exports.PLDIQ = exports.LDUQ = exports.LDIQ = exports.PLDU = exports.PLDI = exports.STURQ = exports.STIRQ = exports.STUQ = exports.STIQ = exports.STUR = exports.STIR = exports.BLESSARGS = exports.SETCONTARGS = exports.REVERSE = exports.BLKSWAP = exports.PU2XC = exports.PUXCPU = exports.PUXC2 = exports.XCPUXC = exports.PUXC = exports.PUSH2 = exports.XCPU = exports.XCHG2 = exports.PUSH3 = exports.XCPU2 = exports.XC2PU = exports.SETINDEXQ = exports.INDEXQ = exports.SETINDEX = exports.EXPLODE = exports.UNPACKFIRST = exports.UNTUPLE = exports.INDEX = void 0;
exports.MULADDRSHIFTR_MOD = exports.MULADDRSHIFT_MOD = exports.RSHIFTC_MOD = exports.RSHIFTR_MOD = exports.RSHIFT_MOD = exports.MODPOW2C_ = exports.MODPOW2R_ = exports.MODPOW2_ = exports.RSHIFTC_ = exports.RSHIFTR_ = exports.RSHIFT_ = exports.ADDRSHIFTC_MOD = exports.ADDRSHIFTR_MOD = exports.ADDRSHIFT_MOD = exports.OVER2 = exports.DUP2 = exports.DROP2 = exports.SWAP2 = exports.RUNVM = exports.SAVEBOTHCTR = exports.SAVEALTCTR = exports.SAVECTR = exports.POPSAVE = exports.SETALTCTR = exports.SETRETCTR = exports.SETCONTCTR = exports.DEBUGSTR = exports.THROWARGANYIF = exports.THROWANYIF = exports.STREF2CONST = exports.STREFCONST = exports.SDBEGINSQ = exports.SDBEGINS = exports.SDBEGINSXQ = exports.SDBEGINSX = exports.PFXDICTSWITCH = exports.DICTPUSHCONST = exports.IFNBITJMPREF = exports.IFBITJMPREF = exports.IFREFELSEREF = exports.IFELSEREF = exports.IFREFELSE = exports.IFNOTJMPREF = exports.IFJMPREF = exports.IFNOTREF = exports.IFREF = exports.JMPREFDATA = exports.JMPREF = exports.CALLREF = exports.PUSHREFCONT = void 0;
exports.BCHKBITSQ_1 = exports.BCHKBITSQ = exports.BCHKBITS_1 = exports.BCHKBITS = exports.QLSHIFT_1 = exports.QLSHIFT = exports.LSHIFT_1 = exports.LSHIFT = exports.LDSLICE_ALT = exports.LDSLICE = exports.LDU_ALT = exports.LDU = exports.LDI_ALT = exports.LDI = exports.STU_ALT = exports.STU = exports.STI_ALT = exports.STI = exports.XCHG3_ALT = exports.XCHG3 = exports.STSLICE_ALT = exports.STSLICE = exports.STREF_ALT = exports.STREF = exports.HASHEXTAR = exports.HASHEXTA = exports.HASHEXTR = exports.HASHEXT = exports.LSHIFT_DIVMODC = exports.LSHIFT_DIVMODR = exports.LSHIFT_DIVMOD = exports.LSHIFT_MODC = exports.LSHIFT_MODR = exports.LSHIFT_MOD = exports.LSHIFT_DIVC = exports.LSHIFT_DIVR = exports.LSHIFT_DIV = exports.LSHIFT_ADDDIVMODC = exports.LSHIFT_ADDDIVMODR = exports.LSHIFT_ADDDIVMOD = exports.MULRSHIFTC_MOD = exports.MULRSHIFTR_MOD = exports.MULRSHIFT_MOD = exports.MULMODPOW2C_ = exports.MULMODPOW2R_ = exports.MULMODPOW2_ = exports.MULRSHIFTC_ = exports.MULRSHIFTR_ = exports.MULRSHIFT_ = exports.MULADDRSHIFTC_MOD = void 0;
exports.DEBUGMARK = exports.PSEUDO_EXOTIC = exports.PSEUDO_PUSHSLICE = exports.PSEUDO_PUSHREF = exports.SETCP_SHORT = exports.SETCP = exports.STSLICECONST = exports.PUSHCONT_SHORT = exports.PUSHCONT = exports.PUSHSLICE_LONG_1 = exports.PUSHSLICE_REFS_1 = exports.PUSHSLICE = exports.CALLXARGS_1 = exports.CALLXARGS = exports.POP_LONG = exports.POP = exports.POPCTR = exports.PUSH_LONG = exports.PUSH = exports.PUSHCTR = exports.DEBUG_2 = exports.DUMP = exports.DEBUG_1 = exports.STRDUMP = exports.DEBUG = exports.DUMPSTK = exports.XCHG_3 = exports.XCHG_1 = exports.XCHG_0 = exports.XCHG_LONG = exports.PUSHINT_LONG = exports.PUSHINT_16 = exports.PUSHINT_8 = exports.PUSHINT = exports.THROWIFNOT = exports.THROWIFNOT_SHORT = exports.THROWIF = exports.THROWIF_SHORT = exports.THROW = exports.THROW_SHORT = exports.CALLDICT_LONG = exports.CALLDICT = exports.QRSHIFT_ALT = exports.QRSHIFT_1 = exports.QRSHIFT = exports.RSHIFT_ALT = exports.RSHIFT_1 = exports.RSHIFT = void 0;
const PUSHNAN = (loc) => ({
    $: "PUSHNAN",
    loc,
});
exports.PUSHNAN = PUSHNAN;
const ADD = (loc) => ({
    $: "ADD",
    loc,
});
exports.ADD = ADD;
const SUB = (loc) => ({
    $: "SUB",
    loc,
});
exports.SUB = SUB;
const SUBR = (loc) => ({
    $: "SUBR",
    loc,
});
exports.SUBR = SUBR;
const NEGATE = (loc) => ({
    $: "NEGATE",
    loc,
});
exports.NEGATE = NEGATE;
const INC = (loc) => ({
    $: "INC",
    loc,
});
exports.INC = INC;
const DEC = (loc) => ({
    $: "DEC",
    loc,
});
exports.DEC = DEC;
const MUL = (loc) => ({
    $: "MUL",
    loc,
});
exports.MUL = MUL;
const POW2 = (loc) => ({
    $: "POW2",
    loc,
});
exports.POW2 = POW2;
const AND = (loc) => ({
    $: "AND",
    loc,
});
exports.AND = AND;
const OR = (loc) => ({
    $: "OR",
    loc,
});
exports.OR = OR;
const XOR = (loc) => ({
    $: "XOR",
    loc,
});
exports.XOR = XOR;
const NOT = (loc) => ({
    $: "NOT",
    loc,
});
exports.NOT = NOT;
const FITSX = (loc) => ({
    $: "FITSX",
    loc,
});
exports.FITSX = FITSX;
const UFITSX = (loc) => ({
    $: "UFITSX",
    loc,
});
exports.UFITSX = UFITSX;
const BITSIZE = (loc) => ({
    $: "BITSIZE",
    loc,
});
exports.BITSIZE = BITSIZE;
const UBITSIZE = (loc) => ({
    $: "UBITSIZE",
    loc,
});
exports.UBITSIZE = UBITSIZE;
const MIN = (loc) => ({
    $: "MIN",
    loc,
});
exports.MIN = MIN;
const MAX = (loc) => ({
    $: "MAX",
    loc,
});
exports.MAX = MAX;
const MINMAX = (loc) => ({
    $: "MINMAX",
    loc,
});
exports.MINMAX = MINMAX;
const ABS = (loc) => ({
    $: "ABS",
    loc,
});
exports.ABS = ABS;
const QADD = (loc) => ({
    $: "QADD",
    loc,
});
exports.QADD = QADD;
const QSUB = (loc) => ({
    $: "QSUB",
    loc,
});
exports.QSUB = QSUB;
const QSUBR = (loc) => ({
    $: "QSUBR",
    loc,
});
exports.QSUBR = QSUBR;
const QNEGATE = (loc) => ({
    $: "QNEGATE",
    loc,
});
exports.QNEGATE = QNEGATE;
const QINC = (loc) => ({
    $: "QINC",
    loc,
});
exports.QINC = QINC;
const QDEC = (loc) => ({
    $: "QDEC",
    loc,
});
exports.QDEC = QDEC;
const QMUL = (loc) => ({
    $: "QMUL",
    loc,
});
exports.QMUL = QMUL;
const QPOW2 = (loc) => ({
    $: "QPOW2",
    loc,
});
exports.QPOW2 = QPOW2;
const QAND = (loc) => ({
    $: "QAND",
    loc,
});
exports.QAND = QAND;
const QOR = (loc) => ({
    $: "QOR",
    loc,
});
exports.QOR = QOR;
const QXOR = (loc) => ({
    $: "QXOR",
    loc,
});
exports.QXOR = QXOR;
const QNOT = (loc) => ({
    $: "QNOT",
    loc,
});
exports.QNOT = QNOT;
const QFITSX = (loc) => ({
    $: "QFITSX",
    loc,
});
exports.QFITSX = QFITSX;
const QUFITSX = (loc) => ({
    $: "QUFITSX",
    loc,
});
exports.QUFITSX = QUFITSX;
const QBITSIZE = (loc) => ({
    $: "QBITSIZE",
    loc,
});
exports.QBITSIZE = QBITSIZE;
const QUBITSIZE = (loc) => ({
    $: "QUBITSIZE",
    loc,
});
exports.QUBITSIZE = QUBITSIZE;
const QMIN = (loc) => ({
    $: "QMIN",
    loc,
});
exports.QMIN = QMIN;
const QMAX = (loc) => ({
    $: "QMAX",
    loc,
});
exports.QMAX = QMAX;
const QMINMAX = (loc) => ({
    $: "QMINMAX",
    loc,
});
exports.QMINMAX = QMINMAX;
const QABS = (loc) => ({
    $: "QABS",
    loc,
});
exports.QABS = QABS;
const SGN = (loc) => ({
    $: "SGN",
    loc,
});
exports.SGN = SGN;
const LESS = (loc) => ({
    $: "LESS",
    loc,
});
exports.LESS = LESS;
const EQUAL = (loc) => ({
    $: "EQUAL",
    loc,
});
exports.EQUAL = EQUAL;
const LEQ = (loc) => ({
    $: "LEQ",
    loc,
});
exports.LEQ = LEQ;
const GREATER = (loc) => ({
    $: "GREATER",
    loc,
});
exports.GREATER = GREATER;
const NEQ = (loc) => ({
    $: "NEQ",
    loc,
});
exports.NEQ = NEQ;
const GEQ = (loc) => ({
    $: "GEQ",
    loc,
});
exports.GEQ = GEQ;
const CMP = (loc) => ({
    $: "CMP",
    loc,
});
exports.CMP = CMP;
const ISNAN = (loc) => ({
    $: "ISNAN",
    loc,
});
exports.ISNAN = ISNAN;
const CHKNAN = (loc) => ({
    $: "CHKNAN",
    loc,
});
exports.CHKNAN = CHKNAN;
const QSGN = (loc) => ({
    $: "QSGN",
    loc,
});
exports.QSGN = QSGN;
const QLESS = (loc) => ({
    $: "QLESS",
    loc,
});
exports.QLESS = QLESS;
const QEQUAL = (loc) => ({
    $: "QEQUAL",
    loc,
});
exports.QEQUAL = QEQUAL;
const QLEQ = (loc) => ({
    $: "QLEQ",
    loc,
});
exports.QLEQ = QLEQ;
const QGREATER = (loc) => ({
    $: "QGREATER",
    loc,
});
exports.QGREATER = QGREATER;
const QNEQ = (loc) => ({
    $: "QNEQ",
    loc,
});
exports.QNEQ = QNEQ;
const QGEQ = (loc) => ({
    $: "QGEQ",
    loc,
});
exports.QGEQ = QGEQ;
const QCMP = (loc) => ({
    $: "QCMP",
    loc,
});
exports.QCMP = QCMP;
const SEMPTY = (loc) => ({
    $: "SEMPTY",
    loc,
});
exports.SEMPTY = SEMPTY;
const SDEMPTY = (loc) => ({
    $: "SDEMPTY",
    loc,
});
exports.SDEMPTY = SDEMPTY;
const SREMPTY = (loc) => ({
    $: "SREMPTY",
    loc,
});
exports.SREMPTY = SREMPTY;
const SDFIRST = (loc) => ({
    $: "SDFIRST",
    loc,
});
exports.SDFIRST = SDFIRST;
const SDLEXCMP = (loc) => ({
    $: "SDLEXCMP",
    loc,
});
exports.SDLEXCMP = SDLEXCMP;
const SDEQ = (loc) => ({
    $: "SDEQ",
    loc,
});
exports.SDEQ = SDEQ;
const SDPFX = (loc) => ({
    $: "SDPFX",
    loc,
});
exports.SDPFX = SDPFX;
const SDPFXREV = (loc) => ({
    $: "SDPFXREV",
    loc,
});
exports.SDPFXREV = SDPFXREV;
const SDPPFX = (loc) => ({
    $: "SDPPFX",
    loc,
});
exports.SDPPFX = SDPPFX;
const SDPPFXREV = (loc) => ({
    $: "SDPPFXREV",
    loc,
});
exports.SDPPFXREV = SDPPFXREV;
const SDSFX = (loc) => ({
    $: "SDSFX",
    loc,
});
exports.SDSFX = SDSFX;
const SDSFXREV = (loc) => ({
    $: "SDSFXREV",
    loc,
});
exports.SDSFXREV = SDSFXREV;
const SDPSFX = (loc) => ({
    $: "SDPSFX",
    loc,
});
exports.SDPSFX = SDPSFX;
const SDPSFXREV = (loc) => ({
    $: "SDPSFXREV",
    loc,
});
exports.SDPSFXREV = SDPSFXREV;
const SDCNTLEAD0 = (loc) => ({
    $: "SDCNTLEAD0",
    loc,
});
exports.SDCNTLEAD0 = SDCNTLEAD0;
const SDCNTLEAD1 = (loc) => ({
    $: "SDCNTLEAD1",
    loc,
});
exports.SDCNTLEAD1 = SDCNTLEAD1;
const SDCNTTRAIL0 = (loc) => ({
    $: "SDCNTTRAIL0",
    loc,
});
exports.SDCNTTRAIL0 = SDCNTTRAIL0;
const SDCNTTRAIL1 = (loc) => ({
    $: "SDCNTTRAIL1",
    loc,
});
exports.SDCNTTRAIL1 = SDCNTTRAIL1;
const NEWC = (loc) => ({
    $: "NEWC",
    loc,
});
exports.NEWC = NEWC;
const ENDC = (loc) => ({
    $: "ENDC",
    loc,
});
exports.ENDC = ENDC;
const ENDCST = (loc) => ({
    $: "ENDCST",
    loc,
});
exports.ENDCST = ENDCST;
const STBREF = (loc) => ({
    $: "STBREF",
    loc,
});
exports.STBREF = STBREF;
const STB = (loc) => ({
    $: "STB",
    loc,
});
exports.STB = STB;
const STREFR = (loc) => ({
    $: "STREFR",
    loc,
});
exports.STREFR = STREFR;
const STBREFR = (loc) => ({
    $: "STBREFR",
    loc,
});
exports.STBREFR = STBREFR;
const STSLICER = (loc) => ({
    $: "STSLICER",
    loc,
});
exports.STSLICER = STSLICER;
const STBR = (loc) => ({
    $: "STBR",
    loc,
});
exports.STBR = STBR;
const STREFQ = (loc) => ({
    $: "STREFQ",
    loc,
});
exports.STREFQ = STREFQ;
const STBREFQ = (loc) => ({
    $: "STBREFQ",
    loc,
});
exports.STBREFQ = STBREFQ;
const STSLICEQ = (loc) => ({
    $: "STSLICEQ",
    loc,
});
exports.STSLICEQ = STSLICEQ;
const STBQ = (loc) => ({
    $: "STBQ",
    loc,
});
exports.STBQ = STBQ;
const STREFRQ = (loc) => ({
    $: "STREFRQ",
    loc,
});
exports.STREFRQ = STREFRQ;
const STBREFRQ = (loc) => ({
    $: "STBREFRQ",
    loc,
});
exports.STBREFRQ = STBREFRQ;
const STSLICERQ = (loc) => ({
    $: "STSLICERQ",
    loc,
});
exports.STSLICERQ = STSLICERQ;
const STBRQ = (loc) => ({
    $: "STBRQ",
    loc,
});
exports.STBRQ = STBRQ;
const ENDXC = (loc) => ({
    $: "ENDXC",
    loc,
});
exports.ENDXC = ENDXC;
const BDEPTH = (loc) => ({
    $: "BDEPTH",
    loc,
});
exports.BDEPTH = BDEPTH;
const BBITS = (loc) => ({
    $: "BBITS",
    loc,
});
exports.BBITS = BBITS;
const BREFS = (loc) => ({
    $: "BREFS",
    loc,
});
exports.BREFS = BREFS;
const BBITREFS = (loc) => ({
    $: "BBITREFS",
    loc,
});
exports.BBITREFS = BBITREFS;
const BREMBITS = (loc) => ({
    $: "BREMBITS",
    loc,
});
exports.BREMBITS = BREMBITS;
const BREMREFS = (loc) => ({
    $: "BREMREFS",
    loc,
});
exports.BREMREFS = BREMREFS;
const BREMBITREFS = (loc) => ({
    $: "BREMBITREFS",
    loc,
});
exports.BREMBITREFS = BREMBITREFS;
const BCHKREFS = (loc) => ({
    $: "BCHKREFS",
    loc,
});
exports.BCHKREFS = BCHKREFS;
const BCHKBITREFS = (loc) => ({
    $: "BCHKBITREFS",
    loc,
});
exports.BCHKBITREFS = BCHKBITREFS;
const BCHKREFSQ = (loc) => ({
    $: "BCHKREFSQ",
    loc,
});
exports.BCHKREFSQ = BCHKREFSQ;
const BCHKBITREFSQ = (loc) => ({
    $: "BCHKBITREFSQ",
    loc,
});
exports.BCHKBITREFSQ = BCHKBITREFSQ;
const STZEROES = (loc) => ({
    $: "STZEROES",
    loc,
});
exports.STZEROES = STZEROES;
const STONES = (loc) => ({
    $: "STONES",
    loc,
});
exports.STONES = STONES;
const STSAME = (loc) => ({
    $: "STSAME",
    loc,
});
exports.STSAME = STSAME;
const CTOS = (loc) => ({
    $: "CTOS",
    loc,
});
exports.CTOS = CTOS;
const ENDS = (loc) => ({
    $: "ENDS",
    loc,
});
exports.ENDS = ENDS;
const LDREF = (loc) => ({
    $: "LDREF",
    loc,
});
exports.LDREF = LDREF;
const LDREFRTOS = (loc) => ({
    $: "LDREFRTOS",
    loc,
});
exports.LDREFRTOS = LDREFRTOS;
const SDCUTFIRST = (loc) => ({
    $: "SDCUTFIRST",
    loc,
});
exports.SDCUTFIRST = SDCUTFIRST;
const SDSKIPFIRST = (loc) => ({
    $: "SDSKIPFIRST",
    loc,
});
exports.SDSKIPFIRST = SDSKIPFIRST;
const SDCUTLAST = (loc) => ({
    $: "SDCUTLAST",
    loc,
});
exports.SDCUTLAST = SDCUTLAST;
const SDSKIPLAST = (loc) => ({
    $: "SDSKIPLAST",
    loc,
});
exports.SDSKIPLAST = SDSKIPLAST;
const SDSUBSTR = (loc) => ({
    $: "SDSUBSTR",
    loc,
});
exports.SDSUBSTR = SDSUBSTR;
const SCUTFIRST = (loc) => ({
    $: "SCUTFIRST",
    loc,
});
exports.SCUTFIRST = SCUTFIRST;
const SSKIPFIRST = (loc) => ({
    $: "SSKIPFIRST",
    loc,
});
exports.SSKIPFIRST = SSKIPFIRST;
const SCUTLAST = (loc) => ({
    $: "SCUTLAST",
    loc,
});
exports.SCUTLAST = SCUTLAST;
const SSKIPLAST = (loc) => ({
    $: "SSKIPLAST",
    loc,
});
exports.SSKIPLAST = SSKIPLAST;
const SUBSLICE = (loc) => ({
    $: "SUBSLICE",
    loc,
});
exports.SUBSLICE = SUBSLICE;
const SPLIT = (loc) => ({
    $: "SPLIT",
    loc,
});
exports.SPLIT = SPLIT;
const SPLITQ = (loc) => ({
    $: "SPLITQ",
    loc,
});
exports.SPLITQ = SPLITQ;
const XCTOS = (loc) => ({
    $: "XCTOS",
    loc,
});
exports.XCTOS = XCTOS;
const XLOAD = (loc) => ({
    $: "XLOAD",
    loc,
});
exports.XLOAD = XLOAD;
const XLOADQ = (loc) => ({
    $: "XLOADQ",
    loc,
});
exports.XLOADQ = XLOADQ;
const SCHKBITS = (loc) => ({
    $: "SCHKBITS",
    loc,
});
exports.SCHKBITS = SCHKBITS;
const SCHKREFS = (loc) => ({
    $: "SCHKREFS",
    loc,
});
exports.SCHKREFS = SCHKREFS;
const SCHKBITREFS = (loc) => ({
    $: "SCHKBITREFS",
    loc,
});
exports.SCHKBITREFS = SCHKBITREFS;
const SCHKBITSQ = (loc) => ({
    $: "SCHKBITSQ",
    loc,
});
exports.SCHKBITSQ = SCHKBITSQ;
const SCHKREFSQ = (loc) => ({
    $: "SCHKREFSQ",
    loc,
});
exports.SCHKREFSQ = SCHKREFSQ;
const SCHKBITREFSQ = (loc) => ({
    $: "SCHKBITREFSQ",
    loc,
});
exports.SCHKBITREFSQ = SCHKBITREFSQ;
const PLDREFVAR = (loc) => ({
    $: "PLDREFVAR",
    loc,
});
exports.PLDREFVAR = PLDREFVAR;
const SBITS = (loc) => ({
    $: "SBITS",
    loc,
});
exports.SBITS = SBITS;
const SREFS = (loc) => ({
    $: "SREFS",
    loc,
});
exports.SREFS = SREFS;
const SBITREFS = (loc) => ({
    $: "SBITREFS",
    loc,
});
exports.SBITREFS = SBITREFS;
const LDZEROES = (loc) => ({
    $: "LDZEROES",
    loc,
});
exports.LDZEROES = LDZEROES;
const LDONES = (loc) => ({
    $: "LDONES",
    loc,
});
exports.LDONES = LDONES;
const LDSAME = (loc) => ({
    $: "LDSAME",
    loc,
});
exports.LDSAME = LDSAME;
const SDEPTH = (loc) => ({
    $: "SDEPTH",
    loc,
});
exports.SDEPTH = SDEPTH;
const CDEPTH = (loc) => ({
    $: "CDEPTH",
    loc,
});
exports.CDEPTH = CDEPTH;
const CLEVEL = (loc) => ({
    $: "CLEVEL",
    loc,
});
exports.CLEVEL = CLEVEL;
const CLEVELMASK = (loc) => ({
    $: "CLEVELMASK",
    loc,
});
exports.CLEVELMASK = CLEVELMASK;
const CHASHIX = (loc) => ({
    $: "CHASHIX",
    loc,
});
exports.CHASHIX = CHASHIX;
const CDEPTHIX = (loc) => ({
    $: "CDEPTHIX",
    loc,
});
exports.CDEPTHIX = CDEPTHIX;
const EXECUTE = (loc) => ({
    $: "EXECUTE",
    loc,
});
exports.EXECUTE = EXECUTE;
const JMPX = (loc) => ({
    $: "JMPX",
    loc,
});
exports.JMPX = JMPX;
const RET = (loc) => ({
    $: "RET",
    loc,
});
exports.RET = RET;
const RETALT = (loc) => ({
    $: "RETALT",
    loc,
});
exports.RETALT = RETALT;
const RETBOOL = (loc) => ({
    $: "RETBOOL",
    loc,
});
exports.RETBOOL = RETBOOL;
const CALLCC = (loc) => ({
    $: "CALLCC",
    loc,
});
exports.CALLCC = CALLCC;
const JMPXDATA = (loc) => ({
    $: "JMPXDATA",
    loc,
});
exports.JMPXDATA = JMPXDATA;
const CALLXVARARGS = (loc) => ({
    $: "CALLXVARARGS",
    loc,
});
exports.CALLXVARARGS = CALLXVARARGS;
const RETVARARGS = (loc) => ({
    $: "RETVARARGS",
    loc,
});
exports.RETVARARGS = RETVARARGS;
const JMPXVARARGS = (loc) => ({
    $: "JMPXVARARGS",
    loc,
});
exports.JMPXVARARGS = JMPXVARARGS;
const CALLCCVARARGS = (loc) => ({
    $: "CALLCCVARARGS",
    loc,
});
exports.CALLCCVARARGS = CALLCCVARARGS;
const RETDATA = (loc) => ({
    $: "RETDATA",
    loc,
});
exports.RETDATA = RETDATA;
const RUNVMX = (loc) => ({
    $: "RUNVMX",
    loc,
});
exports.RUNVMX = RUNVMX;
const IFRET = (loc) => ({
    $: "IFRET",
    loc,
});
exports.IFRET = IFRET;
const IFNOTRET = (loc) => ({
    $: "IFNOTRET",
    loc,
});
exports.IFNOTRET = IFNOTRET;
const IF = (loc) => ({
    $: "IF",
    loc,
});
exports.IF = IF;
const IFNOT = (loc) => ({
    $: "IFNOT",
    loc,
});
exports.IFNOT = IFNOT;
const IFJMP = (loc) => ({
    $: "IFJMP",
    loc,
});
exports.IFJMP = IFJMP;
const IFNOTJMP = (loc) => ({
    $: "IFNOTJMP",
    loc,
});
exports.IFNOTJMP = IFNOTJMP;
const IFELSE = (loc) => ({
    $: "IFELSE",
    loc,
});
exports.IFELSE = IFELSE;
const CONDSEL = (loc) => ({
    $: "CONDSEL",
    loc,
});
exports.CONDSEL = CONDSEL;
const CONDSELCHK = (loc) => ({
    $: "CONDSELCHK",
    loc,
});
exports.CONDSELCHK = CONDSELCHK;
const IFRETALT = (loc) => ({
    $: "IFRETALT",
    loc,
});
exports.IFRETALT = IFRETALT;
const IFNOTRETALT = (loc) => ({
    $: "IFNOTRETALT",
    loc,
});
exports.IFNOTRETALT = IFNOTRETALT;
const REPEAT = (loc) => ({
    $: "REPEAT",
    loc,
});
exports.REPEAT = REPEAT;
const REPEATEND = (loc) => ({
    $: "REPEATEND",
    loc,
});
exports.REPEATEND = REPEATEND;
const UNTIL = (loc) => ({
    $: "UNTIL",
    loc,
});
exports.UNTIL = UNTIL;
const UNTILEND = (loc) => ({
    $: "UNTILEND",
    loc,
});
exports.UNTILEND = UNTILEND;
const WHILE = (loc) => ({
    $: "WHILE",
    loc,
});
exports.WHILE = WHILE;
const WHILEEND = (loc) => ({
    $: "WHILEEND",
    loc,
});
exports.WHILEEND = WHILEEND;
const AGAIN = (loc) => ({
    $: "AGAIN",
    loc,
});
exports.AGAIN = AGAIN;
const AGAINEND = (loc) => ({
    $: "AGAINEND",
    loc,
});
exports.AGAINEND = AGAINEND;
const REPEATBRK = (loc) => ({
    $: "REPEATBRK",
    loc,
});
exports.REPEATBRK = REPEATBRK;
const REPEATENDBRK = (loc) => ({
    $: "REPEATENDBRK",
    loc,
});
exports.REPEATENDBRK = REPEATENDBRK;
const UNTILBRK = (loc) => ({
    $: "UNTILBRK",
    loc,
});
exports.UNTILBRK = UNTILBRK;
const UNTILENDBRK = (loc) => ({
    $: "UNTILENDBRK",
    loc,
});
exports.UNTILENDBRK = UNTILENDBRK;
const WHILEBRK = (loc) => ({
    $: "WHILEBRK",
    loc,
});
exports.WHILEBRK = WHILEBRK;
const WHILEENDBRK = (loc) => ({
    $: "WHILEENDBRK",
    loc,
});
exports.WHILEENDBRK = WHILEENDBRK;
const AGAINBRK = (loc) => ({
    $: "AGAINBRK",
    loc,
});
exports.AGAINBRK = AGAINBRK;
const AGAINENDBRK = (loc) => ({
    $: "AGAINENDBRK",
    loc,
});
exports.AGAINENDBRK = AGAINENDBRK;
const RETURNVARARGS = (loc) => ({
    $: "RETURNVARARGS",
    loc,
});
exports.RETURNVARARGS = RETURNVARARGS;
const SETCONTVARARGS = (loc) => ({
    $: "SETCONTVARARGS",
    loc,
});
exports.SETCONTVARARGS = SETCONTVARARGS;
const SETNUMVARARGS = (loc) => ({
    $: "SETNUMVARARGS",
    loc,
});
exports.SETNUMVARARGS = SETNUMVARARGS;
const BLESS = (loc) => ({
    $: "BLESS",
    loc,
});
exports.BLESS = BLESS;
const BLESSVARARGS = (loc) => ({
    $: "BLESSVARARGS",
    loc,
});
exports.BLESSVARARGS = BLESSVARARGS;
const PUSHCTRX = (loc) => ({
    $: "PUSHCTRX",
    loc,
});
exports.PUSHCTRX = PUSHCTRX;
const POPCTRX = (loc) => ({
    $: "POPCTRX",
    loc,
});
exports.POPCTRX = POPCTRX;
const SETCONTCTRX = (loc) => ({
    $: "SETCONTCTRX",
    loc,
});
exports.SETCONTCTRX = SETCONTCTRX;
const SETCONTCTRMANYX = (loc) => ({
    $: "SETCONTCTRMANYX",
    loc,
});
exports.SETCONTCTRMANYX = SETCONTCTRMANYX;
const BOOLAND = (loc) => ({
    $: "BOOLAND",
    loc,
});
exports.BOOLAND = BOOLAND;
const BOOLOR = (loc) => ({
    $: "BOOLOR",
    loc,
});
exports.BOOLOR = BOOLOR;
const COMPOSBOTH = (loc) => ({
    $: "COMPOSBOTH",
    loc,
});
exports.COMPOSBOTH = COMPOSBOTH;
const ATEXIT = (loc) => ({
    $: "ATEXIT",
    loc,
});
exports.ATEXIT = ATEXIT;
const ATEXITALT = (loc) => ({
    $: "ATEXITALT",
    loc,
});
exports.ATEXITALT = ATEXITALT;
const SETEXITALT = (loc) => ({
    $: "SETEXITALT",
    loc,
});
exports.SETEXITALT = SETEXITALT;
const THENRET = (loc) => ({
    $: "THENRET",
    loc,
});
exports.THENRET = THENRET;
const THENRETALT = (loc) => ({
    $: "THENRETALT",
    loc,
});
exports.THENRETALT = THENRETALT;
const INVERT = (loc) => ({
    $: "INVERT",
    loc,
});
exports.INVERT = INVERT;
const BOOLEVAL = (loc) => ({
    $: "BOOLEVAL",
    loc,
});
exports.BOOLEVAL = BOOLEVAL;
const SAMEALT = (loc) => ({
    $: "SAMEALT",
    loc,
});
exports.SAMEALT = SAMEALT;
const SAMEALTSAVE = (loc) => ({
    $: "SAMEALTSAVE",
    loc,
});
exports.SAMEALTSAVE = SAMEALTSAVE;
const TRY = (loc) => ({
    $: "TRY",
    loc,
});
exports.TRY = TRY;
const SETCPX = (loc) => ({
    $: "SETCPX",
    loc,
});
exports.SETCPX = SETCPX;
const STDICT = (loc) => ({
    $: "STDICT",
    loc,
});
exports.STDICT = STDICT;
const SKIPDICT = (loc) => ({
    $: "SKIPDICT",
    loc,
});
exports.SKIPDICT = SKIPDICT;
const LDDICTS = (loc) => ({
    $: "LDDICTS",
    loc,
});
exports.LDDICTS = LDDICTS;
const PLDDICTS = (loc) => ({
    $: "PLDDICTS",
    loc,
});
exports.PLDDICTS = PLDDICTS;
const LDDICT = (loc) => ({
    $: "LDDICT",
    loc,
});
exports.LDDICT = LDDICT;
const PLDDICT = (loc) => ({
    $: "PLDDICT",
    loc,
});
exports.PLDDICT = PLDDICT;
const LDDICTQ = (loc) => ({
    $: "LDDICTQ",
    loc,
});
exports.LDDICTQ = LDDICTQ;
const PLDDICTQ = (loc) => ({
    $: "PLDDICTQ",
    loc,
});
exports.PLDDICTQ = PLDDICTQ;
const PFXDICTSET = (loc) => ({
    $: "PFXDICTSET",
    loc,
});
exports.PFXDICTSET = PFXDICTSET;
const PFXDICTREPLACE = (loc) => ({
    $: "PFXDICTREPLACE",
    loc,
});
exports.PFXDICTREPLACE = PFXDICTREPLACE;
const PFXDICTADD = (loc) => ({
    $: "PFXDICTADD",
    loc,
});
exports.PFXDICTADD = PFXDICTADD;
const PFXDICTDEL = (loc) => ({
    $: "PFXDICTDEL",
    loc,
});
exports.PFXDICTDEL = PFXDICTDEL;
const PFXDICTGETQ = (loc) => ({
    $: "PFXDICTGETQ",
    loc,
});
exports.PFXDICTGETQ = PFXDICTGETQ;
const PFXDICTGET = (loc) => ({
    $: "PFXDICTGET",
    loc,
});
exports.PFXDICTGET = PFXDICTGET;
const PFXDICTGETJMP = (loc) => ({
    $: "PFXDICTGETJMP",
    loc,
});
exports.PFXDICTGETJMP = PFXDICTGETJMP;
const PFXDICTGETEXEC = (loc) => ({
    $: "PFXDICTGETEXEC",
    loc,
});
exports.PFXDICTGETEXEC = PFXDICTGETEXEC;
const NOP = (loc) => ({
    $: "NOP",
    loc,
});
exports.NOP = NOP;
const SWAP = (loc) => ({
    $: "SWAP",
    loc,
});
exports.SWAP = SWAP;
const DUP = (loc) => ({
    $: "DUP",
    loc,
});
exports.DUP = DUP;
const OVER = (loc) => ({
    $: "OVER",
    loc,
});
exports.OVER = OVER;
const DROP = (loc) => ({
    $: "DROP",
    loc,
});
exports.DROP = DROP;
const NIP = (loc) => ({
    $: "NIP",
    loc,
});
exports.NIP = NIP;
const ROT = (loc) => ({
    $: "ROT",
    loc,
});
exports.ROT = ROT;
const ROTREV = (loc) => ({
    $: "ROTREV",
    loc,
});
exports.ROTREV = ROTREV;
const PICK = (loc) => ({
    $: "PICK",
    loc,
});
exports.PICK = PICK;
const ROLL = (loc) => ({
    $: "ROLL",
    loc,
});
exports.ROLL = ROLL;
const ROLLREV = (loc) => ({
    $: "ROLLREV",
    loc,
});
exports.ROLLREV = ROLLREV;
const BLKSWX = (loc) => ({
    $: "BLKSWX",
    loc,
});
exports.BLKSWX = BLKSWX;
const REVX = (loc) => ({
    $: "REVX",
    loc,
});
exports.REVX = REVX;
const DROPX = (loc) => ({
    $: "DROPX",
    loc,
});
exports.DROPX = DROPX;
const TUCK = (loc) => ({
    $: "TUCK",
    loc,
});
exports.TUCK = TUCK;
const XCHGX = (loc) => ({
    $: "XCHGX",
    loc,
});
exports.XCHGX = XCHGX;
const DEPTH = (loc) => ({
    $: "DEPTH",
    loc,
});
exports.DEPTH = DEPTH;
const CHKDEPTH = (loc) => ({
    $: "CHKDEPTH",
    loc,
});
exports.CHKDEPTH = CHKDEPTH;
const ONLYTOPX = (loc) => ({
    $: "ONLYTOPX",
    loc,
});
exports.ONLYTOPX = ONLYTOPX;
const ONLYX = (loc) => ({
    $: "ONLYX",
    loc,
});
exports.ONLYX = ONLYX;
const ACCEPT = (loc) => ({
    $: "ACCEPT",
    loc,
});
exports.ACCEPT = ACCEPT;
const SETGASLIMIT = (loc) => ({
    $: "SETGASLIMIT",
    loc,
});
exports.SETGASLIMIT = SETGASLIMIT;
const GASCONSUMED = (loc) => ({
    $: "GASCONSUMED",
    loc,
});
exports.GASCONSUMED = GASCONSUMED;
const COMMIT = (loc) => ({
    $: "COMMIT",
    loc,
});
exports.COMMIT = COMMIT;
const NOW = (loc) => ({
    $: "NOW",
    loc,
});
exports.NOW = NOW;
const BLOCKLT = (loc) => ({
    $: "BLOCKLT",
    loc,
});
exports.BLOCKLT = BLOCKLT;
const LTIME = (loc) => ({
    $: "LTIME",
    loc,
});
exports.LTIME = LTIME;
const RANDSEED = (loc) => ({
    $: "RANDSEED",
    loc,
});
exports.RANDSEED = RANDSEED;
const BALANCE = (loc) => ({
    $: "BALANCE",
    loc,
});
exports.BALANCE = BALANCE;
const MYADDR = (loc) => ({
    $: "MYADDR",
    loc,
});
exports.MYADDR = MYADDR;
const CONFIGROOT = (loc) => ({
    $: "CONFIGROOT",
    loc,
});
exports.CONFIGROOT = CONFIGROOT;
const MYCODE = (loc) => ({
    $: "MYCODE",
    loc,
});
exports.MYCODE = MYCODE;
const INCOMINGVALUE = (loc) => ({
    $: "INCOMINGVALUE",
    loc,
});
exports.INCOMINGVALUE = INCOMINGVALUE;
const STORAGEFEES = (loc) => ({
    $: "STORAGEFEES",
    loc,
});
exports.STORAGEFEES = STORAGEFEES;
const PREVBLOCKSINFOTUPLE = (loc) => ({
    $: "PREVBLOCKSINFOTUPLE",
    loc,
});
exports.PREVBLOCKSINFOTUPLE = PREVBLOCKSINFOTUPLE;
const UNPACKEDCONFIGTUPLE = (loc) => ({
    $: "UNPACKEDCONFIGTUPLE",
    loc,
});
exports.UNPACKEDCONFIGTUPLE = UNPACKEDCONFIGTUPLE;
const DUEPAYMENT = (loc) => ({
    $: "DUEPAYMENT",
    loc,
});
exports.DUEPAYMENT = DUEPAYMENT;
const CONFIGDICT = (loc) => ({
    $: "CONFIGDICT",
    loc,
});
exports.CONFIGDICT = CONFIGDICT;
const CONFIGPARAM = (loc) => ({
    $: "CONFIGPARAM",
    loc,
});
exports.CONFIGPARAM = CONFIGPARAM;
const CONFIGOPTPARAM = (loc) => ({
    $: "CONFIGOPTPARAM",
    loc,
});
exports.CONFIGOPTPARAM = CONFIGOPTPARAM;
const PREVMCBLOCKS = (loc) => ({
    $: "PREVMCBLOCKS",
    loc,
});
exports.PREVMCBLOCKS = PREVMCBLOCKS;
const PREVKEYBLOCK = (loc) => ({
    $: "PREVKEYBLOCK",
    loc,
});
exports.PREVKEYBLOCK = PREVKEYBLOCK;
const PREVMCBLOCKS_100 = (loc) => ({
    $: "PREVMCBLOCKS_100",
    loc,
});
exports.PREVMCBLOCKS_100 = PREVMCBLOCKS_100;
const GLOBALID = (loc) => ({
    $: "GLOBALID",
    loc,
});
exports.GLOBALID = GLOBALID;
const GETGASFEE = (loc) => ({
    $: "GETGASFEE",
    loc,
});
exports.GETGASFEE = GETGASFEE;
const GETSTORAGEFEE = (loc) => ({
    $: "GETSTORAGEFEE",
    loc,
});
exports.GETSTORAGEFEE = GETSTORAGEFEE;
const GETFORWARDFEE = (loc) => ({
    $: "GETFORWARDFEE",
    loc,
});
exports.GETFORWARDFEE = GETFORWARDFEE;
const GETPRECOMPILEDGAS = (loc) => ({
    $: "GETPRECOMPILEDGAS",
    loc,
});
exports.GETPRECOMPILEDGAS = GETPRECOMPILEDGAS;
const GETORIGINALFWDFEE = (loc) => ({
    $: "GETORIGINALFWDFEE",
    loc,
});
exports.GETORIGINALFWDFEE = GETORIGINALFWDFEE;
const GETGASFEESIMPLE = (loc) => ({
    $: "GETGASFEESIMPLE",
    loc,
});
exports.GETGASFEESIMPLE = GETGASFEESIMPLE;
const GETFORWARDFEESIMPLE = (loc) => ({
    $: "GETFORWARDFEESIMPLE",
    loc,
});
exports.GETFORWARDFEESIMPLE = GETFORWARDFEESIMPLE;
const GETGLOBVAR = (loc) => ({
    $: "GETGLOBVAR",
    loc,
});
exports.GETGLOBVAR = GETGLOBVAR;
const SETGLOBVAR = (loc) => ({
    $: "SETGLOBVAR",
    loc,
});
exports.SETGLOBVAR = SETGLOBVAR;
const RANDU256 = (loc) => ({
    $: "RANDU256",
    loc,
});
exports.RANDU256 = RANDU256;
const RAND = (loc) => ({
    $: "RAND",
    loc,
});
exports.RAND = RAND;
const SETRAND = (loc) => ({
    $: "SETRAND",
    loc,
});
exports.SETRAND = SETRAND;
const ADDRAND = (loc) => ({
    $: "ADDRAND",
    loc,
});
exports.ADDRAND = ADDRAND;
const HASHCU = (loc) => ({
    $: "HASHCU",
    loc,
});
exports.HASHCU = HASHCU;
const HASHSU = (loc) => ({
    $: "HASHSU",
    loc,
});
exports.HASHSU = HASHSU;
const SHA256U = (loc) => ({
    $: "SHA256U",
    loc,
});
exports.SHA256U = SHA256U;
const CHKSIGNU = (loc) => ({
    $: "CHKSIGNU",
    loc,
});
exports.CHKSIGNU = CHKSIGNU;
const CHKSIGNS = (loc) => ({
    $: "CHKSIGNS",
    loc,
});
exports.CHKSIGNS = CHKSIGNS;
const ECRECOVER = (loc) => ({
    $: "ECRECOVER",
    loc,
});
exports.ECRECOVER = ECRECOVER;
const SECP256K1_XONLY_PUBKEY_TWEAK_ADD = (loc) => ({
    $: "SECP256K1_XONLY_PUBKEY_TWEAK_ADD",
    loc,
});
exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD = SECP256K1_XONLY_PUBKEY_TWEAK_ADD;
const P256_CHKSIGNU = (loc) => ({
    $: "P256_CHKSIGNU",
    loc,
});
exports.P256_CHKSIGNU = P256_CHKSIGNU;
const P256_CHKSIGNS = (loc) => ({
    $: "P256_CHKSIGNS",
    loc,
});
exports.P256_CHKSIGNS = P256_CHKSIGNS;
const RIST255_FROMHASH = (loc) => ({
    $: "RIST255_FROMHASH",
    loc,
});
exports.RIST255_FROMHASH = RIST255_FROMHASH;
const RIST255_VALIDATE = (loc) => ({
    $: "RIST255_VALIDATE",
    loc,
});
exports.RIST255_VALIDATE = RIST255_VALIDATE;
const RIST255_ADD = (loc) => ({
    $: "RIST255_ADD",
    loc,
});
exports.RIST255_ADD = RIST255_ADD;
const RIST255_SUB = (loc) => ({
    $: "RIST255_SUB",
    loc,
});
exports.RIST255_SUB = RIST255_SUB;
const RIST255_MUL = (loc) => ({
    $: "RIST255_MUL",
    loc,
});
exports.RIST255_MUL = RIST255_MUL;
const RIST255_MULBASE = (loc) => ({
    $: "RIST255_MULBASE",
    loc,
});
exports.RIST255_MULBASE = RIST255_MULBASE;
const RIST255_PUSHL = (loc) => ({
    $: "RIST255_PUSHL",
    loc,
});
exports.RIST255_PUSHL = RIST255_PUSHL;
const RIST255_QVALIDATE = (loc) => ({
    $: "RIST255_QVALIDATE",
    loc,
});
exports.RIST255_QVALIDATE = RIST255_QVALIDATE;
const RIST255_QADD = (loc) => ({
    $: "RIST255_QADD",
    loc,
});
exports.RIST255_QADD = RIST255_QADD;
const RIST255_QSUB = (loc) => ({
    $: "RIST255_QSUB",
    loc,
});
exports.RIST255_QSUB = RIST255_QSUB;
const RIST255_QMUL = (loc) => ({
    $: "RIST255_QMUL",
    loc,
});
exports.RIST255_QMUL = RIST255_QMUL;
const RIST255_QMULBASE = (loc) => ({
    $: "RIST255_QMULBASE",
    loc,
});
exports.RIST255_QMULBASE = RIST255_QMULBASE;
const BLS_VERIFY = (loc) => ({
    $: "BLS_VERIFY",
    loc,
});
exports.BLS_VERIFY = BLS_VERIFY;
const BLS_AGGREGATE = (loc) => ({
    $: "BLS_AGGREGATE",
    loc,
});
exports.BLS_AGGREGATE = BLS_AGGREGATE;
const BLS_FASTAGGREGATEVERIFY = (loc) => ({
    $: "BLS_FASTAGGREGATEVERIFY",
    loc,
});
exports.BLS_FASTAGGREGATEVERIFY = BLS_FASTAGGREGATEVERIFY;
const BLS_AGGREGATEVERIFY = (loc) => ({
    $: "BLS_AGGREGATEVERIFY",
    loc,
});
exports.BLS_AGGREGATEVERIFY = BLS_AGGREGATEVERIFY;
const BLS_G1_ADD = (loc) => ({
    $: "BLS_G1_ADD",
    loc,
});
exports.BLS_G1_ADD = BLS_G1_ADD;
const BLS_G1_SUB = (loc) => ({
    $: "BLS_G1_SUB",
    loc,
});
exports.BLS_G1_SUB = BLS_G1_SUB;
const BLS_G1_NEG = (loc) => ({
    $: "BLS_G1_NEG",
    loc,
});
exports.BLS_G1_NEG = BLS_G1_NEG;
const BLS_G1_MUL = (loc) => ({
    $: "BLS_G1_MUL",
    loc,
});
exports.BLS_G1_MUL = BLS_G1_MUL;
const BLS_G1_MULTIEXP = (loc) => ({
    $: "BLS_G1_MULTIEXP",
    loc,
});
exports.BLS_G1_MULTIEXP = BLS_G1_MULTIEXP;
const BLS_G1_ZERO = (loc) => ({
    $: "BLS_G1_ZERO",
    loc,
});
exports.BLS_G1_ZERO = BLS_G1_ZERO;
const BLS_MAP_TO_G1 = (loc) => ({
    $: "BLS_MAP_TO_G1",
    loc,
});
exports.BLS_MAP_TO_G1 = BLS_MAP_TO_G1;
const BLS_G1_INGROUP = (loc) => ({
    $: "BLS_G1_INGROUP",
    loc,
});
exports.BLS_G1_INGROUP = BLS_G1_INGROUP;
const BLS_G1_ISZERO = (loc) => ({
    $: "BLS_G1_ISZERO",
    loc,
});
exports.BLS_G1_ISZERO = BLS_G1_ISZERO;
const BLS_G2_ADD = (loc) => ({
    $: "BLS_G2_ADD",
    loc,
});
exports.BLS_G2_ADD = BLS_G2_ADD;
const BLS_G2_SUB = (loc) => ({
    $: "BLS_G2_SUB",
    loc,
});
exports.BLS_G2_SUB = BLS_G2_SUB;
const BLS_G2_NEG = (loc) => ({
    $: "BLS_G2_NEG",
    loc,
});
exports.BLS_G2_NEG = BLS_G2_NEG;
const BLS_G2_MUL = (loc) => ({
    $: "BLS_G2_MUL",
    loc,
});
exports.BLS_G2_MUL = BLS_G2_MUL;
const BLS_G2_MULTIEXP = (loc) => ({
    $: "BLS_G2_MULTIEXP",
    loc,
});
exports.BLS_G2_MULTIEXP = BLS_G2_MULTIEXP;
const BLS_G2_ZERO = (loc) => ({
    $: "BLS_G2_ZERO",
    loc,
});
exports.BLS_G2_ZERO = BLS_G2_ZERO;
const BLS_MAP_TO_G2 = (loc) => ({
    $: "BLS_MAP_TO_G2",
    loc,
});
exports.BLS_MAP_TO_G2 = BLS_MAP_TO_G2;
const BLS_G2_INGROUP = (loc) => ({
    $: "BLS_G2_INGROUP",
    loc,
});
exports.BLS_G2_INGROUP = BLS_G2_INGROUP;
const BLS_G2_ISZERO = (loc) => ({
    $: "BLS_G2_ISZERO",
    loc,
});
exports.BLS_G2_ISZERO = BLS_G2_ISZERO;
const BLS_PAIRING = (loc) => ({
    $: "BLS_PAIRING",
    loc,
});
exports.BLS_PAIRING = BLS_PAIRING;
const BLS_PUSHR = (loc) => ({
    $: "BLS_PUSHR",
    loc,
});
exports.BLS_PUSHR = BLS_PUSHR;
const CDATASIZEQ = (loc) => ({
    $: "CDATASIZEQ",
    loc,
});
exports.CDATASIZEQ = CDATASIZEQ;
const CDATASIZE = (loc) => ({
    $: "CDATASIZE",
    loc,
});
exports.CDATASIZE = CDATASIZE;
const SDATASIZEQ = (loc) => ({
    $: "SDATASIZEQ",
    loc,
});
exports.SDATASIZEQ = SDATASIZEQ;
const SDATASIZE = (loc) => ({
    $: "SDATASIZE",
    loc,
});
exports.SDATASIZE = SDATASIZE;
const LDGRAMS = (loc) => ({
    $: "LDGRAMS",
    loc,
});
exports.LDGRAMS = LDGRAMS;
const LDVARINT16 = (loc) => ({
    $: "LDVARINT16",
    loc,
});
exports.LDVARINT16 = LDVARINT16;
const STGRAMS = (loc) => ({
    $: "STGRAMS",
    loc,
});
exports.STGRAMS = STGRAMS;
const STVARINT16 = (loc) => ({
    $: "STVARINT16",
    loc,
});
exports.STVARINT16 = STVARINT16;
const LDVARUINT32 = (loc) => ({
    $: "LDVARUINT32",
    loc,
});
exports.LDVARUINT32 = LDVARUINT32;
const LDVARINT32 = (loc) => ({
    $: "LDVARINT32",
    loc,
});
exports.LDVARINT32 = LDVARINT32;
const STVARUINT32 = (loc) => ({
    $: "STVARUINT32",
    loc,
});
exports.STVARUINT32 = STVARUINT32;
const STVARINT32 = (loc) => ({
    $: "STVARINT32",
    loc,
});
exports.STVARINT32 = STVARINT32;
const LDMSGADDR = (loc) => ({
    $: "LDMSGADDR",
    loc,
});
exports.LDMSGADDR = LDMSGADDR;
const LDMSGADDRQ = (loc) => ({
    $: "LDMSGADDRQ",
    loc,
});
exports.LDMSGADDRQ = LDMSGADDRQ;
const PARSEMSGADDR = (loc) => ({
    $: "PARSEMSGADDR",
    loc,
});
exports.PARSEMSGADDR = PARSEMSGADDR;
const PARSEMSGADDRQ = (loc) => ({
    $: "PARSEMSGADDRQ",
    loc,
});
exports.PARSEMSGADDRQ = PARSEMSGADDRQ;
const REWRITESTDADDR = (loc) => ({
    $: "REWRITESTDADDR",
    loc,
});
exports.REWRITESTDADDR = REWRITESTDADDR;
const REWRITESTDADDRQ = (loc) => ({
    $: "REWRITESTDADDRQ",
    loc,
});
exports.REWRITESTDADDRQ = REWRITESTDADDRQ;
const REWRITEVARADDR = (loc) => ({
    $: "REWRITEVARADDR",
    loc,
});
exports.REWRITEVARADDR = REWRITEVARADDR;
const REWRITEVARADDRQ = (loc) => ({
    $: "REWRITEVARADDRQ",
    loc,
});
exports.REWRITEVARADDRQ = REWRITEVARADDRQ;
const SENDRAWMSG = (loc) => ({
    $: "SENDRAWMSG",
    loc,
});
exports.SENDRAWMSG = SENDRAWMSG;
const RAWRESERVE = (loc) => ({
    $: "RAWRESERVE",
    loc,
});
exports.RAWRESERVE = RAWRESERVE;
const RAWRESERVEX = (loc) => ({
    $: "RAWRESERVEX",
    loc,
});
exports.RAWRESERVEX = RAWRESERVEX;
const SETCODE = (loc) => ({
    $: "SETCODE",
    loc,
});
exports.SETCODE = SETCODE;
const SETLIBCODE = (loc) => ({
    $: "SETLIBCODE",
    loc,
});
exports.SETLIBCODE = SETLIBCODE;
const CHANGELIB = (loc) => ({
    $: "CHANGELIB",
    loc,
});
exports.CHANGELIB = CHANGELIB;
const SENDMSG = (loc) => ({
    $: "SENDMSG",
    loc,
});
exports.SENDMSG = SENDMSG;
const PUSHNULL = (loc) => ({
    $: "PUSHNULL",
    loc,
});
exports.PUSHNULL = PUSHNULL;
const ISNULL = (loc) => ({
    $: "ISNULL",
    loc,
});
exports.ISNULL = ISNULL;
const TUPLEVAR = (loc) => ({
    $: "TUPLEVAR",
    loc,
});
exports.TUPLEVAR = TUPLEVAR;
const INDEXVAR = (loc) => ({
    $: "INDEXVAR",
    loc,
});
exports.INDEXVAR = INDEXVAR;
const UNTUPLEVAR = (loc) => ({
    $: "UNTUPLEVAR",
    loc,
});
exports.UNTUPLEVAR = UNTUPLEVAR;
const UNPACKFIRSTVAR = (loc) => ({
    $: "UNPACKFIRSTVAR",
    loc,
});
exports.UNPACKFIRSTVAR = UNPACKFIRSTVAR;
const EXPLODEVAR = (loc) => ({
    $: "EXPLODEVAR",
    loc,
});
exports.EXPLODEVAR = EXPLODEVAR;
const SETINDEXVAR = (loc) => ({
    $: "SETINDEXVAR",
    loc,
});
exports.SETINDEXVAR = SETINDEXVAR;
const INDEXVARQ = (loc) => ({
    $: "INDEXVARQ",
    loc,
});
exports.INDEXVARQ = INDEXVARQ;
const SETINDEXVARQ = (loc) => ({
    $: "SETINDEXVARQ",
    loc,
});
exports.SETINDEXVARQ = SETINDEXVARQ;
const TLEN = (loc) => ({
    $: "TLEN",
    loc,
});
exports.TLEN = TLEN;
const QTLEN = (loc) => ({
    $: "QTLEN",
    loc,
});
exports.QTLEN = QTLEN;
const ISTUPLE = (loc) => ({
    $: "ISTUPLE",
    loc,
});
exports.ISTUPLE = ISTUPLE;
const LAST = (loc) => ({
    $: "LAST",
    loc,
});
exports.LAST = LAST;
const TPUSH = (loc) => ({
    $: "TPUSH",
    loc,
});
exports.TPUSH = TPUSH;
const TPOP = (loc) => ({
    $: "TPOP",
    loc,
});
exports.TPOP = TPOP;
const NULLSWAPIF = (loc) => ({
    $: "NULLSWAPIF",
    loc,
});
exports.NULLSWAPIF = NULLSWAPIF;
const NULLSWAPIFNOT = (loc) => ({
    $: "NULLSWAPIFNOT",
    loc,
});
exports.NULLSWAPIFNOT = NULLSWAPIFNOT;
const NULLROTRIF = (loc) => ({
    $: "NULLROTRIF",
    loc,
});
exports.NULLROTRIF = NULLROTRIF;
const NULLROTRIFNOT = (loc) => ({
    $: "NULLROTRIFNOT",
    loc,
});
exports.NULLROTRIFNOT = NULLROTRIFNOT;
const NULLSWAPIF2 = (loc) => ({
    $: "NULLSWAPIF2",
    loc,
});
exports.NULLSWAPIF2 = NULLSWAPIF2;
const NULLSWAPIFNOT2 = (loc) => ({
    $: "NULLSWAPIFNOT2",
    loc,
});
exports.NULLSWAPIFNOT2 = NULLSWAPIFNOT2;
const NULLROTRIF2 = (loc) => ({
    $: "NULLROTRIF2",
    loc,
});
exports.NULLROTRIF2 = NULLROTRIF2;
const NULLROTRIFNOT2 = (loc) => ({
    $: "NULLROTRIFNOT2",
    loc,
});
exports.NULLROTRIFNOT2 = NULLROTRIFNOT2;
const ADDDIVMOD = (loc) => ({
    $: "ADDDIVMOD",
    loc,
});
exports.ADDDIVMOD = ADDDIVMOD;
const ADDDIVMODR = (loc) => ({
    $: "ADDDIVMODR",
    loc,
});
exports.ADDDIVMODR = ADDDIVMODR;
const ADDDIVMODC = (loc) => ({
    $: "ADDDIVMODC",
    loc,
});
exports.ADDDIVMODC = ADDDIVMODC;
const DIV = (loc) => ({
    $: "DIV",
    loc,
});
exports.DIV = DIV;
const DIVR = (loc) => ({
    $: "DIVR",
    loc,
});
exports.DIVR = DIVR;
const DIVC = (loc) => ({
    $: "DIVC",
    loc,
});
exports.DIVC = DIVC;
const MOD = (loc) => ({
    $: "MOD",
    loc,
});
exports.MOD = MOD;
const MODR = (loc) => ({
    $: "MODR",
    loc,
});
exports.MODR = MODR;
const MODC = (loc) => ({
    $: "MODC",
    loc,
});
exports.MODC = MODC;
const DIVMOD = (loc) => ({
    $: "DIVMOD",
    loc,
});
exports.DIVMOD = DIVMOD;
const DIVMODR = (loc) => ({
    $: "DIVMODR",
    loc,
});
exports.DIVMODR = DIVMODR;
const DIVMODC = (loc) => ({
    $: "DIVMODC",
    loc,
});
exports.DIVMODC = DIVMODC;
const QADDDIVMOD = (loc) => ({
    $: "QADDDIVMOD",
    loc,
});
exports.QADDDIVMOD = QADDDIVMOD;
const QADDDIVMODR = (loc) => ({
    $: "QADDDIVMODR",
    loc,
});
exports.QADDDIVMODR = QADDDIVMODR;
const QADDDIVMODC = (loc) => ({
    $: "QADDDIVMODC",
    loc,
});
exports.QADDDIVMODC = QADDDIVMODC;
const QDIV = (loc) => ({
    $: "QDIV",
    loc,
});
exports.QDIV = QDIV;
const QDIVR = (loc) => ({
    $: "QDIVR",
    loc,
});
exports.QDIVR = QDIVR;
const QDIVC = (loc) => ({
    $: "QDIVC",
    loc,
});
exports.QDIVC = QDIVC;
const QMOD = (loc) => ({
    $: "QMOD",
    loc,
});
exports.QMOD = QMOD;
const QMODR = (loc) => ({
    $: "QMODR",
    loc,
});
exports.QMODR = QMODR;
const QMODC = (loc) => ({
    $: "QMODC",
    loc,
});
exports.QMODC = QMODC;
const QDIVMOD = (loc) => ({
    $: "QDIVMOD",
    loc,
});
exports.QDIVMOD = QDIVMOD;
const QDIVMODR = (loc) => ({
    $: "QDIVMODR",
    loc,
});
exports.QDIVMODR = QDIVMODR;
const QDIVMODC = (loc) => ({
    $: "QDIVMODC",
    loc,
});
exports.QDIVMODC = QDIVMODC;
const ADDRSHIFTMOD = (loc) => ({
    $: "ADDRSHIFTMOD",
    loc,
});
exports.ADDRSHIFTMOD = ADDRSHIFTMOD;
const ADDRSHIFTMODR = (loc) => ({
    $: "ADDRSHIFTMODR",
    loc,
});
exports.ADDRSHIFTMODR = ADDRSHIFTMODR;
const ADDRSHIFTMODC = (loc) => ({
    $: "ADDRSHIFTMODC",
    loc,
});
exports.ADDRSHIFTMODC = ADDRSHIFTMODC;
const RSHIFTR = (loc) => ({
    $: "RSHIFTR",
    loc,
});
exports.RSHIFTR = RSHIFTR;
const RSHIFTC = (loc) => ({
    $: "RSHIFTC",
    loc,
});
exports.RSHIFTC = RSHIFTC;
const MODPOW2 = (loc) => ({
    $: "MODPOW2",
    loc,
});
exports.MODPOW2 = MODPOW2;
const MODPOW2R = (loc) => ({
    $: "MODPOW2R",
    loc,
});
exports.MODPOW2R = MODPOW2R;
const MODPOW2C = (loc) => ({
    $: "MODPOW2C",
    loc,
});
exports.MODPOW2C = MODPOW2C;
const RSHIFTMOD = (loc) => ({
    $: "RSHIFTMOD",
    loc,
});
exports.RSHIFTMOD = RSHIFTMOD;
const RSHIFTMODR = (loc) => ({
    $: "RSHIFTMODR",
    loc,
});
exports.RSHIFTMODR = RSHIFTMODR;
const RSHIFTMODC = (loc) => ({
    $: "RSHIFTMODC",
    loc,
});
exports.RSHIFTMODC = RSHIFTMODC;
const QADDRSHIFTMOD = (loc) => ({
    $: "QADDRSHIFTMOD",
    loc,
});
exports.QADDRSHIFTMOD = QADDRSHIFTMOD;
const QADDRSHIFTMODR = (loc) => ({
    $: "QADDRSHIFTMODR",
    loc,
});
exports.QADDRSHIFTMODR = QADDRSHIFTMODR;
const QADDRSHIFTMODC = (loc) => ({
    $: "QADDRSHIFTMODC",
    loc,
});
exports.QADDRSHIFTMODC = QADDRSHIFTMODC;
const QRSHIFTR = (loc) => ({
    $: "QRSHIFTR",
    loc,
});
exports.QRSHIFTR = QRSHIFTR;
const QRSHIFTC = (loc) => ({
    $: "QRSHIFTC",
    loc,
});
exports.QRSHIFTC = QRSHIFTC;
const QMODPOW2 = (loc) => ({
    $: "QMODPOW2",
    loc,
});
exports.QMODPOW2 = QMODPOW2;
const QMODPOW2R = (loc) => ({
    $: "QMODPOW2R",
    loc,
});
exports.QMODPOW2R = QMODPOW2R;
const QMODPOW2C = (loc) => ({
    $: "QMODPOW2C",
    loc,
});
exports.QMODPOW2C = QMODPOW2C;
const QRSHIFTMOD = (loc) => ({
    $: "QRSHIFTMOD",
    loc,
});
exports.QRSHIFTMOD = QRSHIFTMOD;
const QRSHIFTMODR = (loc) => ({
    $: "QRSHIFTMODR",
    loc,
});
exports.QRSHIFTMODR = QRSHIFTMODR;
const QRSHIFTMODC = (loc) => ({
    $: "QRSHIFTMODC",
    loc,
});
exports.QRSHIFTMODC = QRSHIFTMODC;
const MULADDDIVMOD = (loc) => ({
    $: "MULADDDIVMOD",
    loc,
});
exports.MULADDDIVMOD = MULADDDIVMOD;
const MULADDDIVMODR = (loc) => ({
    $: "MULADDDIVMODR",
    loc,
});
exports.MULADDDIVMODR = MULADDDIVMODR;
const MULADDDIVMODC = (loc) => ({
    $: "MULADDDIVMODC",
    loc,
});
exports.MULADDDIVMODC = MULADDDIVMODC;
const MULDIV = (loc) => ({
    $: "MULDIV",
    loc,
});
exports.MULDIV = MULDIV;
const MULDIVR = (loc) => ({
    $: "MULDIVR",
    loc,
});
exports.MULDIVR = MULDIVR;
const MULDIVC = (loc) => ({
    $: "MULDIVC",
    loc,
});
exports.MULDIVC = MULDIVC;
const MULMOD = (loc) => ({
    $: "MULMOD",
    loc,
});
exports.MULMOD = MULMOD;
const MULMODR = (loc) => ({
    $: "MULMODR",
    loc,
});
exports.MULMODR = MULMODR;
const MULMODC = (loc) => ({
    $: "MULMODC",
    loc,
});
exports.MULMODC = MULMODC;
const MULDIVMOD = (loc) => ({
    $: "MULDIVMOD",
    loc,
});
exports.MULDIVMOD = MULDIVMOD;
const MULDIVMODR = (loc) => ({
    $: "MULDIVMODR",
    loc,
});
exports.MULDIVMODR = MULDIVMODR;
const MULDIVMODC = (loc) => ({
    $: "MULDIVMODC",
    loc,
});
exports.MULDIVMODC = MULDIVMODC;
const QMULADDDIVMOD = (loc) => ({
    $: "QMULADDDIVMOD",
    loc,
});
exports.QMULADDDIVMOD = QMULADDDIVMOD;
const QMULADDDIVMODR = (loc) => ({
    $: "QMULADDDIVMODR",
    loc,
});
exports.QMULADDDIVMODR = QMULADDDIVMODR;
const QMULADDDIVMODC = (loc) => ({
    $: "QMULADDDIVMODC",
    loc,
});
exports.QMULADDDIVMODC = QMULADDDIVMODC;
const QMULDIV = (loc) => ({
    $: "QMULDIV",
    loc,
});
exports.QMULDIV = QMULDIV;
const QMULDIVR = (loc) => ({
    $: "QMULDIVR",
    loc,
});
exports.QMULDIVR = QMULDIVR;
const QMULDIVC = (loc) => ({
    $: "QMULDIVC",
    loc,
});
exports.QMULDIVC = QMULDIVC;
const QMULMOD = (loc) => ({
    $: "QMULMOD",
    loc,
});
exports.QMULMOD = QMULMOD;
const QMULMODR = (loc) => ({
    $: "QMULMODR",
    loc,
});
exports.QMULMODR = QMULMODR;
const QMULMODC = (loc) => ({
    $: "QMULMODC",
    loc,
});
exports.QMULMODC = QMULMODC;
const QMULDIVMOD = (loc) => ({
    $: "QMULDIVMOD",
    loc,
});
exports.QMULDIVMOD = QMULDIVMOD;
const QMULDIVMODR = (loc) => ({
    $: "QMULDIVMODR",
    loc,
});
exports.QMULDIVMODR = QMULDIVMODR;
const QMULDIVMODC = (loc) => ({
    $: "QMULDIVMODC",
    loc,
});
exports.QMULDIVMODC = QMULDIVMODC;
const MULADDRSHIFTMOD = (loc) => ({
    $: "MULADDRSHIFTMOD",
    loc,
});
exports.MULADDRSHIFTMOD = MULADDRSHIFTMOD;
const MULADDRSHIFTRMOD = (loc) => ({
    $: "MULADDRSHIFTRMOD",
    loc,
});
exports.MULADDRSHIFTRMOD = MULADDRSHIFTRMOD;
const MULADDRSHIFTCMOD = (loc) => ({
    $: "MULADDRSHIFTCMOD",
    loc,
});
exports.MULADDRSHIFTCMOD = MULADDRSHIFTCMOD;
const MULRSHIFT = (loc) => ({
    $: "MULRSHIFT",
    loc,
});
exports.MULRSHIFT = MULRSHIFT;
const MULRSHIFTR = (loc) => ({
    $: "MULRSHIFTR",
    loc,
});
exports.MULRSHIFTR = MULRSHIFTR;
const MULRSHIFTC = (loc) => ({
    $: "MULRSHIFTC",
    loc,
});
exports.MULRSHIFTC = MULRSHIFTC;
const MULMODPOW2 = (loc) => ({
    $: "MULMODPOW2",
    loc,
});
exports.MULMODPOW2 = MULMODPOW2;
const MULMODPOW2R = (loc) => ({
    $: "MULMODPOW2R",
    loc,
});
exports.MULMODPOW2R = MULMODPOW2R;
const MULMODPOW2C = (loc) => ({
    $: "MULMODPOW2C",
    loc,
});
exports.MULMODPOW2C = MULMODPOW2C;
const MULRSHIFTMOD = (loc) => ({
    $: "MULRSHIFTMOD",
    loc,
});
exports.MULRSHIFTMOD = MULRSHIFTMOD;
const MULRSHIFTRMOD = (loc) => ({
    $: "MULRSHIFTRMOD",
    loc,
});
exports.MULRSHIFTRMOD = MULRSHIFTRMOD;
const MULRSHIFTCMOD = (loc) => ({
    $: "MULRSHIFTCMOD",
    loc,
});
exports.MULRSHIFTCMOD = MULRSHIFTCMOD;
const QMULADDRSHIFTMOD = (loc) => ({
    $: "QMULADDRSHIFTMOD",
    loc,
});
exports.QMULADDRSHIFTMOD = QMULADDRSHIFTMOD;
const QMULADDRSHIFTRMOD = (loc) => ({
    $: "QMULADDRSHIFTRMOD",
    loc,
});
exports.QMULADDRSHIFTRMOD = QMULADDRSHIFTRMOD;
const QMULADDRSHIFTCMOD = (loc) => ({
    $: "QMULADDRSHIFTCMOD",
    loc,
});
exports.QMULADDRSHIFTCMOD = QMULADDRSHIFTCMOD;
const QMULRSHIFT = (loc) => ({
    $: "QMULRSHIFT",
    loc,
});
exports.QMULRSHIFT = QMULRSHIFT;
const QMULRSHIFTR = (loc) => ({
    $: "QMULRSHIFTR",
    loc,
});
exports.QMULRSHIFTR = QMULRSHIFTR;
const QMULRSHIFTC = (loc) => ({
    $: "QMULRSHIFTC",
    loc,
});
exports.QMULRSHIFTC = QMULRSHIFTC;
const QMULMODPOW2 = (loc) => ({
    $: "QMULMODPOW2",
    loc,
});
exports.QMULMODPOW2 = QMULMODPOW2;
const QMULMODPOW2R = (loc) => ({
    $: "QMULMODPOW2R",
    loc,
});
exports.QMULMODPOW2R = QMULMODPOW2R;
const QMULMODPOW2C = (loc) => ({
    $: "QMULMODPOW2C",
    loc,
});
exports.QMULMODPOW2C = QMULMODPOW2C;
const QMULRSHIFTMOD = (loc) => ({
    $: "QMULRSHIFTMOD",
    loc,
});
exports.QMULRSHIFTMOD = QMULRSHIFTMOD;
const QMULRSHIFTRMOD = (loc) => ({
    $: "QMULRSHIFTRMOD",
    loc,
});
exports.QMULRSHIFTRMOD = QMULRSHIFTRMOD;
const QMULRSHIFTCMOD = (loc) => ({
    $: "QMULRSHIFTCMOD",
    loc,
});
exports.QMULRSHIFTCMOD = QMULRSHIFTCMOD;
const LSHIFTADDDIVMOD = (loc) => ({
    $: "LSHIFTADDDIVMOD",
    loc,
});
exports.LSHIFTADDDIVMOD = LSHIFTADDDIVMOD;
const LSHIFTADDDIVMODR = (loc) => ({
    $: "LSHIFTADDDIVMODR",
    loc,
});
exports.LSHIFTADDDIVMODR = LSHIFTADDDIVMODR;
const LSHIFTADDDIVMODC = (loc) => ({
    $: "LSHIFTADDDIVMODC",
    loc,
});
exports.LSHIFTADDDIVMODC = LSHIFTADDDIVMODC;
const LSHIFTDIV = (loc) => ({
    $: "LSHIFTDIV",
    loc,
});
exports.LSHIFTDIV = LSHIFTDIV;
const LSHIFTDIVR = (loc) => ({
    $: "LSHIFTDIVR",
    loc,
});
exports.LSHIFTDIVR = LSHIFTDIVR;
const LSHIFTDIVC = (loc) => ({
    $: "LSHIFTDIVC",
    loc,
});
exports.LSHIFTDIVC = LSHIFTDIVC;
const LSHIFTMOD = (loc) => ({
    $: "LSHIFTMOD",
    loc,
});
exports.LSHIFTMOD = LSHIFTMOD;
const LSHIFTMODR = (loc) => ({
    $: "LSHIFTMODR",
    loc,
});
exports.LSHIFTMODR = LSHIFTMODR;
const LSHIFTMODC = (loc) => ({
    $: "LSHIFTMODC",
    loc,
});
exports.LSHIFTMODC = LSHIFTMODC;
const LSHIFTDIVMOD = (loc) => ({
    $: "LSHIFTDIVMOD",
    loc,
});
exports.LSHIFTDIVMOD = LSHIFTDIVMOD;
const LSHIFTDIVMODR = (loc) => ({
    $: "LSHIFTDIVMODR",
    loc,
});
exports.LSHIFTDIVMODR = LSHIFTDIVMODR;
const LSHIFTDIVMODC = (loc) => ({
    $: "LSHIFTDIVMODC",
    loc,
});
exports.LSHIFTDIVMODC = LSHIFTDIVMODC;
const QLSHIFTADDDIVMOD = (loc) => ({
    $: "QLSHIFTADDDIVMOD",
    loc,
});
exports.QLSHIFTADDDIVMOD = QLSHIFTADDDIVMOD;
const QLSHIFTADDDIVMODR = (loc) => ({
    $: "QLSHIFTADDDIVMODR",
    loc,
});
exports.QLSHIFTADDDIVMODR = QLSHIFTADDDIVMODR;
const QLSHIFTADDDIVMODC = (loc) => ({
    $: "QLSHIFTADDDIVMODC",
    loc,
});
exports.QLSHIFTADDDIVMODC = QLSHIFTADDDIVMODC;
const QLSHIFTDIV = (loc) => ({
    $: "QLSHIFTDIV",
    loc,
});
exports.QLSHIFTDIV = QLSHIFTDIV;
const QLSHIFTDIVR = (loc) => ({
    $: "QLSHIFTDIVR",
    loc,
});
exports.QLSHIFTDIVR = QLSHIFTDIVR;
const QLSHIFTDIVC = (loc) => ({
    $: "QLSHIFTDIVC",
    loc,
});
exports.QLSHIFTDIVC = QLSHIFTDIVC;
const QLSHIFTMOD = (loc) => ({
    $: "QLSHIFTMOD",
    loc,
});
exports.QLSHIFTMOD = QLSHIFTMOD;
const QLSHIFTMODR = (loc) => ({
    $: "QLSHIFTMODR",
    loc,
});
exports.QLSHIFTMODR = QLSHIFTMODR;
const QLSHIFTMODC = (loc) => ({
    $: "QLSHIFTMODC",
    loc,
});
exports.QLSHIFTMODC = QLSHIFTMODC;
const QLSHIFTDIVMOD = (loc) => ({
    $: "QLSHIFTDIVMOD",
    loc,
});
exports.QLSHIFTDIVMOD = QLSHIFTDIVMOD;
const QLSHIFTDIVMODR = (loc) => ({
    $: "QLSHIFTDIVMODR",
    loc,
});
exports.QLSHIFTDIVMODR = QLSHIFTDIVMODR;
const QLSHIFTDIVMODC = (loc) => ({
    $: "QLSHIFTDIVMODC",
    loc,
});
exports.QLSHIFTDIVMODC = QLSHIFTDIVMODC;
const STIX = (loc) => ({
    $: "STIX",
    loc,
});
exports.STIX = STIX;
const STUX = (loc) => ({
    $: "STUX",
    loc,
});
exports.STUX = STUX;
const STIXR = (loc) => ({
    $: "STIXR",
    loc,
});
exports.STIXR = STIXR;
const STUXR = (loc) => ({
    $: "STUXR",
    loc,
});
exports.STUXR = STUXR;
const STIXQ = (loc) => ({
    $: "STIXQ",
    loc,
});
exports.STIXQ = STIXQ;
const STUXQ = (loc) => ({
    $: "STUXQ",
    loc,
});
exports.STUXQ = STUXQ;
const STIXRQ = (loc) => ({
    $: "STIXRQ",
    loc,
});
exports.STIXRQ = STIXRQ;
const STUXRQ = (loc) => ({
    $: "STUXRQ",
    loc,
});
exports.STUXRQ = STUXRQ;
const STILE4 = (loc) => ({
    $: "STILE4",
    loc,
});
exports.STILE4 = STILE4;
const STULE4 = (loc) => ({
    $: "STULE4",
    loc,
});
exports.STULE4 = STULE4;
const STILE8 = (loc) => ({
    $: "STILE8",
    loc,
});
exports.STILE8 = STILE8;
const STULE8 = (loc) => ({
    $: "STULE8",
    loc,
});
exports.STULE8 = STULE8;
const LDIX = (loc) => ({
    $: "LDIX",
    loc,
});
exports.LDIX = LDIX;
const LDUX = (loc) => ({
    $: "LDUX",
    loc,
});
exports.LDUX = LDUX;
const PLDIX = (loc) => ({
    $: "PLDIX",
    loc,
});
exports.PLDIX = PLDIX;
const PLDUX = (loc) => ({
    $: "PLDUX",
    loc,
});
exports.PLDUX = PLDUX;
const LDIXQ = (loc) => ({
    $: "LDIXQ",
    loc,
});
exports.LDIXQ = LDIXQ;
const LDUXQ = (loc) => ({
    $: "LDUXQ",
    loc,
});
exports.LDUXQ = LDUXQ;
const PLDIXQ = (loc) => ({
    $: "PLDIXQ",
    loc,
});
exports.PLDIXQ = PLDIXQ;
const PLDUXQ = (loc) => ({
    $: "PLDUXQ",
    loc,
});
exports.PLDUXQ = PLDUXQ;
const LDSLICEX = (loc) => ({
    $: "LDSLICEX",
    loc,
});
exports.LDSLICEX = LDSLICEX;
const PLDSLICEX = (loc) => ({
    $: "PLDSLICEX",
    loc,
});
exports.PLDSLICEX = PLDSLICEX;
const LDSLICEXQ = (loc) => ({
    $: "LDSLICEXQ",
    loc,
});
exports.LDSLICEXQ = LDSLICEXQ;
const PLDSLICEXQ = (loc) => ({
    $: "PLDSLICEXQ",
    loc,
});
exports.PLDSLICEXQ = PLDSLICEXQ;
const LDILE4 = (loc) => ({
    $: "LDILE4",
    loc,
});
exports.LDILE4 = LDILE4;
const LDULE4 = (loc) => ({
    $: "LDULE4",
    loc,
});
exports.LDULE4 = LDULE4;
const LDILE8 = (loc) => ({
    $: "LDILE8",
    loc,
});
exports.LDILE8 = LDILE8;
const LDULE8 = (loc) => ({
    $: "LDULE8",
    loc,
});
exports.LDULE8 = LDULE8;
const PLDILE4 = (loc) => ({
    $: "PLDILE4",
    loc,
});
exports.PLDILE4 = PLDILE4;
const PLDULE4 = (loc) => ({
    $: "PLDULE4",
    loc,
});
exports.PLDULE4 = PLDULE4;
const PLDILE8 = (loc) => ({
    $: "PLDILE8",
    loc,
});
exports.PLDILE8 = PLDILE8;
const PLDULE8 = (loc) => ({
    $: "PLDULE8",
    loc,
});
exports.PLDULE8 = PLDULE8;
const LDILE4Q = (loc) => ({
    $: "LDILE4Q",
    loc,
});
exports.LDILE4Q = LDILE4Q;
const LDULE4Q = (loc) => ({
    $: "LDULE4Q",
    loc,
});
exports.LDULE4Q = LDULE4Q;
const LDILE8Q = (loc) => ({
    $: "LDILE8Q",
    loc,
});
exports.LDILE8Q = LDILE8Q;
const LDULE8Q = (loc) => ({
    $: "LDULE8Q",
    loc,
});
exports.LDULE8Q = LDULE8Q;
const PLDILE4Q = (loc) => ({
    $: "PLDILE4Q",
    loc,
});
exports.PLDILE4Q = PLDILE4Q;
const PLDULE4Q = (loc) => ({
    $: "PLDULE4Q",
    loc,
});
exports.PLDULE4Q = PLDULE4Q;
const PLDILE8Q = (loc) => ({
    $: "PLDILE8Q",
    loc,
});
exports.PLDILE8Q = PLDILE8Q;
const PLDULE8Q = (loc) => ({
    $: "PLDULE8Q",
    loc,
});
exports.PLDULE8Q = PLDULE8Q;
const DICTIGETJMP = (loc) => ({
    $: "DICTIGETJMP",
    loc,
});
exports.DICTIGETJMP = DICTIGETJMP;
const DICTUGETJMP = (loc) => ({
    $: "DICTUGETJMP",
    loc,
});
exports.DICTUGETJMP = DICTUGETJMP;
const DICTIGETEXEC = (loc) => ({
    $: "DICTIGETEXEC",
    loc,
});
exports.DICTIGETEXEC = DICTIGETEXEC;
const DICTUGETEXEC = (loc) => ({
    $: "DICTUGETEXEC",
    loc,
});
exports.DICTUGETEXEC = DICTUGETEXEC;
const DICTIGETJMPZ = (loc) => ({
    $: "DICTIGETJMPZ",
    loc,
});
exports.DICTIGETJMPZ = DICTIGETJMPZ;
const DICTUGETJMPZ = (loc) => ({
    $: "DICTUGETJMPZ",
    loc,
});
exports.DICTUGETJMPZ = DICTUGETJMPZ;
const DICTIGETEXECZ = (loc) => ({
    $: "DICTIGETEXECZ",
    loc,
});
exports.DICTIGETEXECZ = DICTIGETEXECZ;
const DICTUGETEXECZ = (loc) => ({
    $: "DICTUGETEXECZ",
    loc,
});
exports.DICTUGETEXECZ = DICTUGETEXECZ;
const DICTGET = (loc) => ({
    $: "DICTGET",
    loc,
});
exports.DICTGET = DICTGET;
const DICTGETREF = (loc) => ({
    $: "DICTGETREF",
    loc,
});
exports.DICTGETREF = DICTGETREF;
const DICTIGET = (loc) => ({
    $: "DICTIGET",
    loc,
});
exports.DICTIGET = DICTIGET;
const DICTIGETREF = (loc) => ({
    $: "DICTIGETREF",
    loc,
});
exports.DICTIGETREF = DICTIGETREF;
const DICTUGET = (loc) => ({
    $: "DICTUGET",
    loc,
});
exports.DICTUGET = DICTUGET;
const DICTUGETREF = (loc) => ({
    $: "DICTUGETREF",
    loc,
});
exports.DICTUGETREF = DICTUGETREF;
const DICTSET = (loc) => ({
    $: "DICTSET",
    loc,
});
exports.DICTSET = DICTSET;
const DICTSETREF = (loc) => ({
    $: "DICTSETREF",
    loc,
});
exports.DICTSETREF = DICTSETREF;
const DICTISET = (loc) => ({
    $: "DICTISET",
    loc,
});
exports.DICTISET = DICTISET;
const DICTISETREF = (loc) => ({
    $: "DICTISETREF",
    loc,
});
exports.DICTISETREF = DICTISETREF;
const DICTUSET = (loc) => ({
    $: "DICTUSET",
    loc,
});
exports.DICTUSET = DICTUSET;
const DICTUSETREF = (loc) => ({
    $: "DICTUSETREF",
    loc,
});
exports.DICTUSETREF = DICTUSETREF;
const DICTSETGET = (loc) => ({
    $: "DICTSETGET",
    loc,
});
exports.DICTSETGET = DICTSETGET;
const DICTSETGETREF = (loc) => ({
    $: "DICTSETGETREF",
    loc,
});
exports.DICTSETGETREF = DICTSETGETREF;
const DICTISETGET = (loc) => ({
    $: "DICTISETGET",
    loc,
});
exports.DICTISETGET = DICTISETGET;
const DICTISETGETREF = (loc) => ({
    $: "DICTISETGETREF",
    loc,
});
exports.DICTISETGETREF = DICTISETGETREF;
const DICTUSETGET = (loc) => ({
    $: "DICTUSETGET",
    loc,
});
exports.DICTUSETGET = DICTUSETGET;
const DICTUSETGETREF = (loc) => ({
    $: "DICTUSETGETREF",
    loc,
});
exports.DICTUSETGETREF = DICTUSETGETREF;
const DICTREPLACE = (loc) => ({
    $: "DICTREPLACE",
    loc,
});
exports.DICTREPLACE = DICTREPLACE;
const DICTREPLACEREF = (loc) => ({
    $: "DICTREPLACEREF",
    loc,
});
exports.DICTREPLACEREF = DICTREPLACEREF;
const DICTIREPLACE = (loc) => ({
    $: "DICTIREPLACE",
    loc,
});
exports.DICTIREPLACE = DICTIREPLACE;
const DICTIREPLACEREF = (loc) => ({
    $: "DICTIREPLACEREF",
    loc,
});
exports.DICTIREPLACEREF = DICTIREPLACEREF;
const DICTUREPLACE = (loc) => ({
    $: "DICTUREPLACE",
    loc,
});
exports.DICTUREPLACE = DICTUREPLACE;
const DICTUREPLACEREF = (loc) => ({
    $: "DICTUREPLACEREF",
    loc,
});
exports.DICTUREPLACEREF = DICTUREPLACEREF;
const DICTREPLACEGET = (loc) => ({
    $: "DICTREPLACEGET",
    loc,
});
exports.DICTREPLACEGET = DICTREPLACEGET;
const DICTREPLACEGETREF = (loc) => ({
    $: "DICTREPLACEGETREF",
    loc,
});
exports.DICTREPLACEGETREF = DICTREPLACEGETREF;
const DICTIREPLACEGET = (loc) => ({
    $: "DICTIREPLACEGET",
    loc,
});
exports.DICTIREPLACEGET = DICTIREPLACEGET;
const DICTIREPLACEGETREF = (loc) => ({
    $: "DICTIREPLACEGETREF",
    loc,
});
exports.DICTIREPLACEGETREF = DICTIREPLACEGETREF;
const DICTUREPLACEGET = (loc) => ({
    $: "DICTUREPLACEGET",
    loc,
});
exports.DICTUREPLACEGET = DICTUREPLACEGET;
const DICTUREPLACEGETREF = (loc) => ({
    $: "DICTUREPLACEGETREF",
    loc,
});
exports.DICTUREPLACEGETREF = DICTUREPLACEGETREF;
const DICTADD = (loc) => ({
    $: "DICTADD",
    loc,
});
exports.DICTADD = DICTADD;
const DICTADDREF = (loc) => ({
    $: "DICTADDREF",
    loc,
});
exports.DICTADDREF = DICTADDREF;
const DICTIADD = (loc) => ({
    $: "DICTIADD",
    loc,
});
exports.DICTIADD = DICTIADD;
const DICTIADDREF = (loc) => ({
    $: "DICTIADDREF",
    loc,
});
exports.DICTIADDREF = DICTIADDREF;
const DICTUADD = (loc) => ({
    $: "DICTUADD",
    loc,
});
exports.DICTUADD = DICTUADD;
const DICTUADDREF = (loc) => ({
    $: "DICTUADDREF",
    loc,
});
exports.DICTUADDREF = DICTUADDREF;
const DICTADDGET = (loc) => ({
    $: "DICTADDGET",
    loc,
});
exports.DICTADDGET = DICTADDGET;
const DICTADDGETREF = (loc) => ({
    $: "DICTADDGETREF",
    loc,
});
exports.DICTADDGETREF = DICTADDGETREF;
const DICTIADDGET = (loc) => ({
    $: "DICTIADDGET",
    loc,
});
exports.DICTIADDGET = DICTIADDGET;
const DICTIADDGETREF = (loc) => ({
    $: "DICTIADDGETREF",
    loc,
});
exports.DICTIADDGETREF = DICTIADDGETREF;
const DICTUADDGET = (loc) => ({
    $: "DICTUADDGET",
    loc,
});
exports.DICTUADDGET = DICTUADDGET;
const DICTUADDGETREF = (loc) => ({
    $: "DICTUADDGETREF",
    loc,
});
exports.DICTUADDGETREF = DICTUADDGETREF;
const DICTDELGET = (loc) => ({
    $: "DICTDELGET",
    loc,
});
exports.DICTDELGET = DICTDELGET;
const DICTDELGETREF = (loc) => ({
    $: "DICTDELGETREF",
    loc,
});
exports.DICTDELGETREF = DICTDELGETREF;
const DICTIDELGET = (loc) => ({
    $: "DICTIDELGET",
    loc,
});
exports.DICTIDELGET = DICTIDELGET;
const DICTIDELGETREF = (loc) => ({
    $: "DICTIDELGETREF",
    loc,
});
exports.DICTIDELGETREF = DICTIDELGETREF;
const DICTUDELGET = (loc) => ({
    $: "DICTUDELGET",
    loc,
});
exports.DICTUDELGET = DICTUDELGET;
const DICTUDELGETREF = (loc) => ({
    $: "DICTUDELGETREF",
    loc,
});
exports.DICTUDELGETREF = DICTUDELGETREF;
const DICTMIN = (loc) => ({
    $: "DICTMIN",
    loc,
});
exports.DICTMIN = DICTMIN;
const DICTMINREF = (loc) => ({
    $: "DICTMINREF",
    loc,
});
exports.DICTMINREF = DICTMINREF;
const DICTIMIN = (loc) => ({
    $: "DICTIMIN",
    loc,
});
exports.DICTIMIN = DICTIMIN;
const DICTIMINREF = (loc) => ({
    $: "DICTIMINREF",
    loc,
});
exports.DICTIMINREF = DICTIMINREF;
const DICTUMIN = (loc) => ({
    $: "DICTUMIN",
    loc,
});
exports.DICTUMIN = DICTUMIN;
const DICTUMINREF = (loc) => ({
    $: "DICTUMINREF",
    loc,
});
exports.DICTUMINREF = DICTUMINREF;
const DICTMAX = (loc) => ({
    $: "DICTMAX",
    loc,
});
exports.DICTMAX = DICTMAX;
const DICTMAXREF = (loc) => ({
    $: "DICTMAXREF",
    loc,
});
exports.DICTMAXREF = DICTMAXREF;
const DICTIMAX = (loc) => ({
    $: "DICTIMAX",
    loc,
});
exports.DICTIMAX = DICTIMAX;
const DICTIMAXREF = (loc) => ({
    $: "DICTIMAXREF",
    loc,
});
exports.DICTIMAXREF = DICTIMAXREF;
const DICTUMAX = (loc) => ({
    $: "DICTUMAX",
    loc,
});
exports.DICTUMAX = DICTUMAX;
const DICTUMAXREF = (loc) => ({
    $: "DICTUMAXREF",
    loc,
});
exports.DICTUMAXREF = DICTUMAXREF;
const DICTREMMIN = (loc) => ({
    $: "DICTREMMIN",
    loc,
});
exports.DICTREMMIN = DICTREMMIN;
const DICTREMMINREF = (loc) => ({
    $: "DICTREMMINREF",
    loc,
});
exports.DICTREMMINREF = DICTREMMINREF;
const DICTIREMMIN = (loc) => ({
    $: "DICTIREMMIN",
    loc,
});
exports.DICTIREMMIN = DICTIREMMIN;
const DICTIREMMINREF = (loc) => ({
    $: "DICTIREMMINREF",
    loc,
});
exports.DICTIREMMINREF = DICTIREMMINREF;
const DICTUREMMIN = (loc) => ({
    $: "DICTUREMMIN",
    loc,
});
exports.DICTUREMMIN = DICTUREMMIN;
const DICTUREMMINREF = (loc) => ({
    $: "DICTUREMMINREF",
    loc,
});
exports.DICTUREMMINREF = DICTUREMMINREF;
const DICTREMMAX = (loc) => ({
    $: "DICTREMMAX",
    loc,
});
exports.DICTREMMAX = DICTREMMAX;
const DICTREMMAXREF = (loc) => ({
    $: "DICTREMMAXREF",
    loc,
});
exports.DICTREMMAXREF = DICTREMMAXREF;
const DICTIREMMAX = (loc) => ({
    $: "DICTIREMMAX",
    loc,
});
exports.DICTIREMMAX = DICTIREMMAX;
const DICTIREMMAXREF = (loc) => ({
    $: "DICTIREMMAXREF",
    loc,
});
exports.DICTIREMMAXREF = DICTIREMMAXREF;
const DICTUREMMAX = (loc) => ({
    $: "DICTUREMMAX",
    loc,
});
exports.DICTUREMMAX = DICTUREMMAX;
const DICTUREMMAXREF = (loc) => ({
    $: "DICTUREMMAXREF",
    loc,
});
exports.DICTUREMMAXREF = DICTUREMMAXREF;
const DICTSETB = (loc) => ({
    $: "DICTSETB",
    loc,
});
exports.DICTSETB = DICTSETB;
const DICTISETB = (loc) => ({
    $: "DICTISETB",
    loc,
});
exports.DICTISETB = DICTISETB;
const DICTUSETB = (loc) => ({
    $: "DICTUSETB",
    loc,
});
exports.DICTUSETB = DICTUSETB;
const DICTSETGETB = (loc) => ({
    $: "DICTSETGETB",
    loc,
});
exports.DICTSETGETB = DICTSETGETB;
const DICTISETGETB = (loc) => ({
    $: "DICTISETGETB",
    loc,
});
exports.DICTISETGETB = DICTISETGETB;
const DICTUSETGETB = (loc) => ({
    $: "DICTUSETGETB",
    loc,
});
exports.DICTUSETGETB = DICTUSETGETB;
const DICTREPLACEB = (loc) => ({
    $: "DICTREPLACEB",
    loc,
});
exports.DICTREPLACEB = DICTREPLACEB;
const DICTIREPLACEB = (loc) => ({
    $: "DICTIREPLACEB",
    loc,
});
exports.DICTIREPLACEB = DICTIREPLACEB;
const DICTUREPLACEB = (loc) => ({
    $: "DICTUREPLACEB",
    loc,
});
exports.DICTUREPLACEB = DICTUREPLACEB;
const DICTREPLACEGETB = (loc) => ({
    $: "DICTREPLACEGETB",
    loc,
});
exports.DICTREPLACEGETB = DICTREPLACEGETB;
const DICTIREPLACEGETB = (loc) => ({
    $: "DICTIREPLACEGETB",
    loc,
});
exports.DICTIREPLACEGETB = DICTIREPLACEGETB;
const DICTUREPLACEGETB = (loc) => ({
    $: "DICTUREPLACEGETB",
    loc,
});
exports.DICTUREPLACEGETB = DICTUREPLACEGETB;
const DICTADDB = (loc) => ({
    $: "DICTADDB",
    loc,
});
exports.DICTADDB = DICTADDB;
const DICTIADDB = (loc) => ({
    $: "DICTIADDB",
    loc,
});
exports.DICTIADDB = DICTIADDB;
const DICTUADDB = (loc) => ({
    $: "DICTUADDB",
    loc,
});
exports.DICTUADDB = DICTUADDB;
const DICTADDGETB = (loc) => ({
    $: "DICTADDGETB",
    loc,
});
exports.DICTADDGETB = DICTADDGETB;
const DICTIADDGETB = (loc) => ({
    $: "DICTIADDGETB",
    loc,
});
exports.DICTIADDGETB = DICTIADDGETB;
const DICTUADDGETB = (loc) => ({
    $: "DICTUADDGETB",
    loc,
});
exports.DICTUADDGETB = DICTUADDGETB;
const DICTDEL = (loc) => ({
    $: "DICTDEL",
    loc,
});
exports.DICTDEL = DICTDEL;
const DICTIDEL = (loc) => ({
    $: "DICTIDEL",
    loc,
});
exports.DICTIDEL = DICTIDEL;
const DICTUDEL = (loc) => ({
    $: "DICTUDEL",
    loc,
});
exports.DICTUDEL = DICTUDEL;
const DICTGETOPTREF = (loc) => ({
    $: "DICTGETOPTREF",
    loc,
});
exports.DICTGETOPTREF = DICTGETOPTREF;
const DICTIGETOPTREF = (loc) => ({
    $: "DICTIGETOPTREF",
    loc,
});
exports.DICTIGETOPTREF = DICTIGETOPTREF;
const DICTUGETOPTREF = (loc) => ({
    $: "DICTUGETOPTREF",
    loc,
});
exports.DICTUGETOPTREF = DICTUGETOPTREF;
const DICTSETGETOPTREF = (loc) => ({
    $: "DICTSETGETOPTREF",
    loc,
});
exports.DICTSETGETOPTREF = DICTSETGETOPTREF;
const DICTISETGETOPTREF = (loc) => ({
    $: "DICTISETGETOPTREF",
    loc,
});
exports.DICTISETGETOPTREF = DICTISETGETOPTREF;
const DICTUSETGETOPTREF = (loc) => ({
    $: "DICTUSETGETOPTREF",
    loc,
});
exports.DICTUSETGETOPTREF = DICTUSETGETOPTREF;
const SUBDICTGET = (loc) => ({
    $: "SUBDICTGET",
    loc,
});
exports.SUBDICTGET = SUBDICTGET;
const SUBDICTIGET = (loc) => ({
    $: "SUBDICTIGET",
    loc,
});
exports.SUBDICTIGET = SUBDICTIGET;
const SUBDICTUGET = (loc) => ({
    $: "SUBDICTUGET",
    loc,
});
exports.SUBDICTUGET = SUBDICTUGET;
const SUBDICTRPGET = (loc) => ({
    $: "SUBDICTRPGET",
    loc,
});
exports.SUBDICTRPGET = SUBDICTRPGET;
const SUBDICTIRPGET = (loc) => ({
    $: "SUBDICTIRPGET",
    loc,
});
exports.SUBDICTIRPGET = SUBDICTIRPGET;
const SUBDICTURPGET = (loc) => ({
    $: "SUBDICTURPGET",
    loc,
});
exports.SUBDICTURPGET = SUBDICTURPGET;
const THROWANY = (loc) => ({
    $: "THROWANY",
    loc,
});
exports.THROWANY = THROWANY;
const THROWARGANY = (loc) => ({
    $: "THROWARGANY",
    loc,
});
exports.THROWARGANY = THROWARGANY;
const THROWANYIFNOT = (loc) => ({
    $: "THROWANYIFNOT",
    loc,
});
exports.THROWANYIFNOT = THROWANYIFNOT;
const THROWARGANYIFNOT = (loc) => ({
    $: "THROWARGANYIFNOT",
    loc,
});
exports.THROWARGANYIFNOT = THROWARGANYIFNOT;
const DICTGETNEXT = (loc) => ({
    $: "DICTGETNEXT",
    loc,
});
exports.DICTGETNEXT = DICTGETNEXT;
const DICTGETNEXTEQ = (loc) => ({
    $: "DICTGETNEXTEQ",
    loc,
});
exports.DICTGETNEXTEQ = DICTGETNEXTEQ;
const DICTGETPREV = (loc) => ({
    $: "DICTGETPREV",
    loc,
});
exports.DICTGETPREV = DICTGETPREV;
const DICTGETPREVEQ = (loc) => ({
    $: "DICTGETPREVEQ",
    loc,
});
exports.DICTGETPREVEQ = DICTGETPREVEQ;
const DICTIGETNEXT = (loc) => ({
    $: "DICTIGETNEXT",
    loc,
});
exports.DICTIGETNEXT = DICTIGETNEXT;
const DICTIGETNEXTEQ = (loc) => ({
    $: "DICTIGETNEXTEQ",
    loc,
});
exports.DICTIGETNEXTEQ = DICTIGETNEXTEQ;
const DICTIGETPREV = (loc) => ({
    $: "DICTIGETPREV",
    loc,
});
exports.DICTIGETPREV = DICTIGETPREV;
const DICTIGETPREVEQ = (loc) => ({
    $: "DICTIGETPREVEQ",
    loc,
});
exports.DICTIGETPREVEQ = DICTIGETPREVEQ;
const DICTUGETNEXT = (loc) => ({
    $: "DICTUGETNEXT",
    loc,
});
exports.DICTUGETNEXT = DICTUGETNEXT;
const DICTUGETNEXTEQ = (loc) => ({
    $: "DICTUGETNEXTEQ",
    loc,
});
exports.DICTUGETNEXTEQ = DICTUGETNEXTEQ;
const DICTUGETPREV = (loc) => ({
    $: "DICTUGETPREV",
    loc,
});
exports.DICTUGETPREV = DICTUGETPREV;
const DICTUGETPREVEQ = (loc) => ({
    $: "DICTUGETPREVEQ",
    loc,
});
exports.DICTUGETPREVEQ = DICTUGETPREVEQ;
const ADDINT = (arg0, loc) => ({
    $: "ADDINT",
    arg0,
    loc,
});
exports.ADDINT = ADDINT;
const MULINT = (arg0, loc) => ({
    $: "MULINT",
    arg0,
    loc,
});
exports.MULINT = MULINT;
const QADDINT = (arg0, loc) => ({
    $: "QADDINT",
    arg0,
    loc,
});
exports.QADDINT = QADDINT;
const QMULINT = (arg0, loc) => ({
    $: "QMULINT",
    arg0,
    loc,
});
exports.QMULINT = QMULINT;
const EQINT = (arg0, loc) => ({
    $: "EQINT",
    arg0,
    loc,
});
exports.EQINT = EQINT;
const LESSINT = (arg0, loc) => ({
    $: "LESSINT",
    arg0,
    loc,
});
exports.LESSINT = LESSINT;
const GTINT = (arg0, loc) => ({
    $: "GTINT",
    arg0,
    loc,
});
exports.GTINT = GTINT;
const NEQINT = (arg0, loc) => ({
    $: "NEQINT",
    arg0,
    loc,
});
exports.NEQINT = NEQINT;
const QEQINT = (arg0, loc) => ({
    $: "QEQINT",
    arg0,
    loc,
});
exports.QEQINT = QEQINT;
const QLESSINT = (arg0, loc) => ({
    $: "QLESSINT",
    arg0,
    loc,
});
exports.QLESSINT = QLESSINT;
const QGTINT = (arg0, loc) => ({
    $: "QGTINT",
    arg0,
    loc,
});
exports.QGTINT = QGTINT;
const QNEQINT = (arg0, loc) => ({
    $: "QNEQINT",
    arg0,
    loc,
});
exports.QNEQINT = QNEQINT;
const PUSHPOW2DEC = (arg0, loc) => ({
    $: "PUSHPOW2DEC",
    arg0,
    loc,
});
exports.PUSHPOW2DEC = PUSHPOW2DEC;
const PUSHNEGPOW2 = (arg0, loc) => ({
    $: "PUSHNEGPOW2",
    arg0,
    loc,
});
exports.PUSHNEGPOW2 = PUSHNEGPOW2;
const FITS = (arg0, loc) => ({
    $: "FITS",
    arg0,
    loc,
});
exports.FITS = FITS;
const UFITS = (arg0, loc) => ({
    $: "UFITS",
    arg0,
    loc,
});
exports.UFITS = UFITS;
const QFITS = (arg0, loc) => ({
    $: "QFITS",
    arg0,
    loc,
});
exports.QFITS = QFITS;
const QUFITS = (arg0, loc) => ({
    $: "QUFITS",
    arg0,
    loc,
});
exports.QUFITS = QUFITS;
const SETCONTCTRMANY = (arg0, loc) => ({
    $: "SETCONTCTRMANY",
    arg0,
    loc,
});
exports.SETCONTCTRMANY = SETCONTCTRMANY;
const CALLCCARGS = (arg0, arg1, loc) => ({
    $: "CALLCCARGS",
    arg0,
    arg1,
    loc,
});
exports.CALLCCARGS = CALLCCARGS;
const TRYARGS = (arg0, arg1, loc) => ({
    $: "TRYARGS",
    arg0,
    arg1,
    loc,
});
exports.TRYARGS = TRYARGS;
const PLDREFIDX = (arg0, loc) => ({
    $: "PLDREFIDX",
    arg0,
    loc,
});
exports.PLDREFIDX = PLDREFIDX;
const CHASHI = (arg0, loc) => ({
    $: "CHASHI",
    arg0,
    loc,
});
exports.CHASHI = CHASHI;
const CDEPTHI = (arg0, loc) => ({
    $: "CDEPTHI",
    arg0,
    loc,
});
exports.CDEPTHI = CDEPTHI;
const JMPDICT = (arg0, loc) => ({
    $: "JMPDICT",
    arg0,
    loc,
});
exports.JMPDICT = JMPDICT;
const PREPAREDICT = (arg0, loc) => ({
    $: "PREPAREDICT",
    arg0,
    loc,
});
exports.PREPAREDICT = PREPAREDICT;
const THROWARG = (arg0, loc) => ({
    $: "THROWARG",
    arg0,
    loc,
});
exports.THROWARG = THROWARG;
const THROWARGIF = (arg0, loc) => ({
    $: "THROWARGIF",
    arg0,
    loc,
});
exports.THROWARGIF = THROWARGIF;
const THROWARGIFNOT = (arg0, loc) => ({
    $: "THROWARGIFNOT",
    arg0,
    loc,
});
exports.THROWARGIFNOT = THROWARGIFNOT;
const JMPXARGS = (arg0, loc) => ({
    $: "JMPXARGS",
    arg0,
    loc,
});
exports.JMPXARGS = JMPXARGS;
const RETARGS = (arg0, loc) => ({
    $: "RETARGS",
    arg0,
    loc,
});
exports.RETARGS = RETARGS;
const RETURNARGS = (arg0, loc) => ({
    $: "RETURNARGS",
    arg0,
    loc,
});
exports.RETURNARGS = RETURNARGS;
const BLKDROP = (arg0, loc) => ({
    $: "BLKDROP",
    arg0,
    loc,
});
exports.BLKDROP = BLKDROP;
const TUPLE = (arg0, loc) => ({
    $: "TUPLE",
    arg0,
    loc,
});
exports.TUPLE = TUPLE;
const INDEX = (arg0, loc) => ({
    $: "INDEX",
    arg0,
    loc,
});
exports.INDEX = INDEX;
const UNTUPLE = (arg0, loc) => ({
    $: "UNTUPLE",
    arg0,
    loc,
});
exports.UNTUPLE = UNTUPLE;
const UNPACKFIRST = (arg0, loc) => ({
    $: "UNPACKFIRST",
    arg0,
    loc,
});
exports.UNPACKFIRST = UNPACKFIRST;
const EXPLODE = (arg0, loc) => ({
    $: "EXPLODE",
    arg0,
    loc,
});
exports.EXPLODE = EXPLODE;
const SETINDEX = (arg0, loc) => ({
    $: "SETINDEX",
    arg0,
    loc,
});
exports.SETINDEX = SETINDEX;
const INDEXQ = (arg0, loc) => ({
    $: "INDEXQ",
    arg0,
    loc,
});
exports.INDEXQ = INDEXQ;
const SETINDEXQ = (arg0, loc) => ({
    $: "SETINDEXQ",
    arg0,
    loc,
});
exports.SETINDEXQ = SETINDEXQ;
const XC2PU = (arg0, arg1, arg2, loc) => ({
    $: "XC2PU",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.XC2PU = XC2PU;
const XCPU2 = (arg0, arg1, arg2, loc) => ({
    $: "XCPU2",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.XCPU2 = XCPU2;
const PUSH3 = (arg0, arg1, arg2, loc) => ({
    $: "PUSH3",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.PUSH3 = PUSH3;
const XCHG2 = (arg0, arg1, loc) => ({
    $: "XCHG2",
    arg0,
    arg1,
    loc,
});
exports.XCHG2 = XCHG2;
const XCPU = (arg0, arg1, loc) => ({
    $: "XCPU",
    arg0,
    arg1,
    loc,
});
exports.XCPU = XCPU;
const PUSH2 = (arg0, arg1, loc) => ({
    $: "PUSH2",
    arg0,
    arg1,
    loc,
});
exports.PUSH2 = PUSH2;
const PUXC = (arg0, arg1, loc) => ({
    $: "PUXC",
    arg0,
    arg1,
    loc,
});
exports.PUXC = PUXC;
const XCPUXC = (arg0, arg1, arg2, loc) => ({
    $: "XCPUXC",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.XCPUXC = XCPUXC;
const PUXC2 = (arg0, arg1, arg2, loc) => ({
    $: "PUXC2",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.PUXC2 = PUXC2;
const PUXCPU = (arg0, arg1, arg2, loc) => ({
    $: "PUXCPU",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.PUXCPU = PUXCPU;
const PU2XC = (arg0, arg1, arg2, loc) => ({
    $: "PU2XC",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.PU2XC = PU2XC;
const BLKSWAP = (arg0, arg1, loc) => ({
    $: "BLKSWAP",
    arg0,
    arg1,
    loc,
});
exports.BLKSWAP = BLKSWAP;
const REVERSE = (arg0, arg1, loc) => ({
    $: "REVERSE",
    arg0,
    arg1,
    loc,
});
exports.REVERSE = REVERSE;
const SETCONTARGS = (arg0, arg1, loc) => ({
    $: "SETCONTARGS",
    arg0,
    arg1,
    loc,
});
exports.SETCONTARGS = SETCONTARGS;
const BLESSARGS = (arg0, arg1, loc) => ({
    $: "BLESSARGS",
    arg0,
    arg1,
    loc,
});
exports.BLESSARGS = BLESSARGS;
const STIR = (arg0, loc) => ({
    $: "STIR",
    arg0,
    loc,
});
exports.STIR = STIR;
const STUR = (arg0, loc) => ({
    $: "STUR",
    arg0,
    loc,
});
exports.STUR = STUR;
const STIQ = (arg0, loc) => ({
    $: "STIQ",
    arg0,
    loc,
});
exports.STIQ = STIQ;
const STUQ = (arg0, loc) => ({
    $: "STUQ",
    arg0,
    loc,
});
exports.STUQ = STUQ;
const STIRQ = (arg0, loc) => ({
    $: "STIRQ",
    arg0,
    loc,
});
exports.STIRQ = STIRQ;
const STURQ = (arg0, loc) => ({
    $: "STURQ",
    arg0,
    loc,
});
exports.STURQ = STURQ;
const PLDI = (arg0, loc) => ({
    $: "PLDI",
    arg0,
    loc,
});
exports.PLDI = PLDI;
const PLDU = (arg0, loc) => ({
    $: "PLDU",
    arg0,
    loc,
});
exports.PLDU = PLDU;
const LDIQ = (arg0, loc) => ({
    $: "LDIQ",
    arg0,
    loc,
});
exports.LDIQ = LDIQ;
const LDUQ = (arg0, loc) => ({
    $: "LDUQ",
    arg0,
    loc,
});
exports.LDUQ = LDUQ;
const PLDIQ = (arg0, loc) => ({
    $: "PLDIQ",
    arg0,
    loc,
});
exports.PLDIQ = PLDIQ;
const PLDUQ = (arg0, loc) => ({
    $: "PLDUQ",
    arg0,
    loc,
});
exports.PLDUQ = PLDUQ;
const PLDUZ = (arg0, loc) => ({
    $: "PLDUZ",
    arg0,
    loc,
});
exports.PLDUZ = PLDUZ;
const PLDSLICE = (arg0, loc) => ({
    $: "PLDSLICE",
    arg0,
    loc,
});
exports.PLDSLICE = PLDSLICE;
const LDSLICEQ = (arg0, loc) => ({
    $: "LDSLICEQ",
    arg0,
    loc,
});
exports.LDSLICEQ = LDSLICEQ;
const PLDSLICEQ = (arg0, loc) => ({
    $: "PLDSLICEQ",
    arg0,
    loc,
});
exports.PLDSLICEQ = PLDSLICEQ;
const IFBITJMP = (arg0, loc) => ({
    $: "IFBITJMP",
    arg0,
    loc,
});
exports.IFBITJMP = IFBITJMP;
const IFNBITJMP = (arg0, loc) => ({
    $: "IFNBITJMP",
    arg0,
    loc,
});
exports.IFNBITJMP = IFNBITJMP;
const INDEX2 = (arg0, arg1, loc) => ({
    $: "INDEX2",
    arg0,
    arg1,
    loc,
});
exports.INDEX2 = INDEX2;
const INDEX3 = (arg0, arg1, arg2, loc) => ({
    $: "INDEX3",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.INDEX3 = INDEX3;
const PUSHPOW2 = (arg0, loc) => ({
    $: "PUSHPOW2",
    arg0,
    loc,
});
exports.PUSHPOW2 = PUSHPOW2;
const BLKPUSH = (arg0, arg1, loc) => ({
    $: "BLKPUSH",
    arg0,
    arg1,
    loc,
});
exports.BLKPUSH = BLKPUSH;
const BLKDROP2 = (arg0, arg1, loc) => ({
    $: "BLKDROP2",
    arg0,
    arg1,
    loc,
});
exports.BLKDROP2 = BLKDROP2;
const GETGLOB = (arg0, loc) => ({
    $: "GETGLOB",
    arg0,
    loc,
});
exports.GETGLOB = GETGLOB;
const SETGLOB = (arg0, loc) => ({
    $: "SETGLOB",
    arg0,
    loc,
});
exports.SETGLOB = SETGLOB;
const GETPARAM = (arg0, loc) => ({
    $: "GETPARAM",
    arg0,
    loc,
});
exports.GETPARAM = GETPARAM;
const PUSHREF = (arg0, loc) => ({
    $: "PUSHREF",
    arg0,
    loc,
});
exports.PUSHREF = PUSHREF;
const PUSHREFSLICE = (arg0, loc) => ({
    $: "PUSHREFSLICE",
    arg0,
    loc,
});
exports.PUSHREFSLICE = PUSHREFSLICE;
const PUSHREFCONT = (arg0, loc) => ({
    $: "PUSHREFCONT",
    arg0,
    loc,
});
exports.PUSHREFCONT = PUSHREFCONT;
const CALLREF = (arg0, loc) => ({
    $: "CALLREF",
    arg0,
    loc,
});
exports.CALLREF = CALLREF;
const JMPREF = (arg0, loc) => ({
    $: "JMPREF",
    arg0,
    loc,
});
exports.JMPREF = JMPREF;
const JMPREFDATA = (arg0, loc) => ({
    $: "JMPREFDATA",
    arg0,
    loc,
});
exports.JMPREFDATA = JMPREFDATA;
const IFREF = (arg0, loc) => ({
    $: "IFREF",
    arg0,
    loc,
});
exports.IFREF = IFREF;
const IFNOTREF = (arg0, loc) => ({
    $: "IFNOTREF",
    arg0,
    loc,
});
exports.IFNOTREF = IFNOTREF;
const IFJMPREF = (arg0, loc) => ({
    $: "IFJMPREF",
    arg0,
    loc,
});
exports.IFJMPREF = IFJMPREF;
const IFNOTJMPREF = (arg0, loc) => ({
    $: "IFNOTJMPREF",
    arg0,
    loc,
});
exports.IFNOTJMPREF = IFNOTJMPREF;
const IFREFELSE = (arg0, loc) => ({
    $: "IFREFELSE",
    arg0,
    loc,
});
exports.IFREFELSE = IFREFELSE;
const IFELSEREF = (arg0, loc) => ({
    $: "IFELSEREF",
    arg0,
    loc,
});
exports.IFELSEREF = IFELSEREF;
const IFREFELSEREF = (arg0, arg1, loc) => ({
    $: "IFREFELSEREF",
    arg0,
    arg1,
    loc,
});
exports.IFREFELSEREF = IFREFELSEREF;
const IFBITJMPREF = (arg0, arg1, loc) => ({
    $: "IFBITJMPREF",
    arg0,
    arg1,
    loc,
});
exports.IFBITJMPREF = IFBITJMPREF;
const IFNBITJMPREF = (arg0, arg1, loc) => ({
    $: "IFNBITJMPREF",
    arg0,
    arg1,
    loc,
});
exports.IFNBITJMPREF = IFNBITJMPREF;
const DICTPUSHCONST = (arg0, arg1, loc) => ({
    $: "DICTPUSHCONST",
    arg0,
    arg1,
    loc,
});
exports.DICTPUSHCONST = DICTPUSHCONST;
const PFXDICTSWITCH = (arg0, arg1, loc) => ({
    $: "PFXDICTSWITCH",
    arg0,
    arg1,
    loc,
});
exports.PFXDICTSWITCH = PFXDICTSWITCH;
const SDBEGINSX = (loc) => ({
    $: "SDBEGINSX",
    loc,
});
exports.SDBEGINSX = SDBEGINSX;
const SDBEGINSXQ = (loc) => ({
    $: "SDBEGINSXQ",
    loc,
});
exports.SDBEGINSXQ = SDBEGINSXQ;
const SDBEGINS = (arg0, loc) => ({
    $: "SDBEGINS",
    arg0,
    loc,
});
exports.SDBEGINS = SDBEGINS;
const SDBEGINSQ = (arg0, loc) => ({
    $: "SDBEGINSQ",
    arg0,
    loc,
});
exports.SDBEGINSQ = SDBEGINSQ;
const STREFCONST = (arg0, loc) => ({
    $: "STREFCONST",
    arg0,
    loc,
});
exports.STREFCONST = STREFCONST;
const STREF2CONST = (arg0, arg1, loc) => ({
    $: "STREF2CONST",
    arg0,
    arg1,
    loc,
});
exports.STREF2CONST = STREF2CONST;
const THROWANYIF = (loc) => ({
    $: "THROWANYIF",
    loc,
});
exports.THROWANYIF = THROWANYIF;
const THROWARGANYIF = (loc) => ({
    $: "THROWARGANYIF",
    loc,
});
exports.THROWARGANYIF = THROWARGANYIF;
const DEBUGSTR = (arg0, loc) => ({
    $: "DEBUGSTR",
    arg0,
    loc,
});
exports.DEBUGSTR = DEBUGSTR;
const SETCONTCTR = (arg0, loc) => ({
    $: "SETCONTCTR",
    arg0,
    loc,
});
exports.SETCONTCTR = SETCONTCTR;
const SETRETCTR = (arg0, loc) => ({
    $: "SETRETCTR",
    arg0,
    loc,
});
exports.SETRETCTR = SETRETCTR;
const SETALTCTR = (arg0, loc) => ({
    $: "SETALTCTR",
    arg0,
    loc,
});
exports.SETALTCTR = SETALTCTR;
const POPSAVE = (arg0, loc) => ({
    $: "POPSAVE",
    arg0,
    loc,
});
exports.POPSAVE = POPSAVE;
const SAVECTR = (arg0, loc) => ({
    $: "SAVECTR",
    arg0,
    loc,
});
exports.SAVECTR = SAVECTR;
const SAVEALTCTR = (arg0, loc) => ({
    $: "SAVEALTCTR",
    arg0,
    loc,
});
exports.SAVEALTCTR = SAVEALTCTR;
const SAVEBOTHCTR = (arg0, loc) => ({
    $: "SAVEBOTHCTR",
    arg0,
    loc,
});
exports.SAVEBOTHCTR = SAVEBOTHCTR;
const RUNVM = (arg0, loc) => ({
    $: "RUNVM",
    arg0,
    loc,
});
exports.RUNVM = RUNVM;
const SWAP2 = (loc) => ({
    $: "SWAP2",
    loc,
});
exports.SWAP2 = SWAP2;
const DROP2 = (loc) => ({
    $: "DROP2",
    loc,
});
exports.DROP2 = DROP2;
const DUP2 = (loc) => ({
    $: "DUP2",
    loc,
});
exports.DUP2 = DUP2;
const OVER2 = (loc) => ({
    $: "OVER2",
    loc,
});
exports.OVER2 = OVER2;
const ADDRSHIFT_MOD = (arg0, loc) => ({
    $: "ADDRSHIFT_MOD",
    arg0,
    loc,
});
exports.ADDRSHIFT_MOD = ADDRSHIFT_MOD;
const ADDRSHIFTR_MOD = (arg0, loc) => ({
    $: "ADDRSHIFTR_MOD",
    arg0,
    loc,
});
exports.ADDRSHIFTR_MOD = ADDRSHIFTR_MOD;
const ADDRSHIFTC_MOD = (arg0, loc) => ({
    $: "ADDRSHIFTC_MOD",
    arg0,
    loc,
});
exports.ADDRSHIFTC_MOD = ADDRSHIFTC_MOD;
const RSHIFT_ = (arg0, loc) => ({
    $: "RSHIFT_",
    arg0,
    loc,
});
exports.RSHIFT_ = RSHIFT_;
const RSHIFTR_ = (arg0, loc) => ({
    $: "RSHIFTR_",
    arg0,
    loc,
});
exports.RSHIFTR_ = RSHIFTR_;
const RSHIFTC_ = (arg0, loc) => ({
    $: "RSHIFTC_",
    arg0,
    loc,
});
exports.RSHIFTC_ = RSHIFTC_;
const MODPOW2_ = (arg0, loc) => ({
    $: "MODPOW2_",
    arg0,
    loc,
});
exports.MODPOW2_ = MODPOW2_;
const MODPOW2R_ = (arg0, loc) => ({
    $: "MODPOW2R_",
    arg0,
    loc,
});
exports.MODPOW2R_ = MODPOW2R_;
const MODPOW2C_ = (arg0, loc) => ({
    $: "MODPOW2C_",
    arg0,
    loc,
});
exports.MODPOW2C_ = MODPOW2C_;
const RSHIFT_MOD = (arg0, loc) => ({
    $: "RSHIFT_MOD",
    arg0,
    loc,
});
exports.RSHIFT_MOD = RSHIFT_MOD;
const RSHIFTR_MOD = (arg0, loc) => ({
    $: "RSHIFTR_MOD",
    arg0,
    loc,
});
exports.RSHIFTR_MOD = RSHIFTR_MOD;
const RSHIFTC_MOD = (arg0, loc) => ({
    $: "RSHIFTC_MOD",
    arg0,
    loc,
});
exports.RSHIFTC_MOD = RSHIFTC_MOD;
const MULADDRSHIFT_MOD = (arg0, loc) => ({
    $: "MULADDRSHIFT_MOD",
    arg0,
    loc,
});
exports.MULADDRSHIFT_MOD = MULADDRSHIFT_MOD;
const MULADDRSHIFTR_MOD = (arg0, loc) => ({
    $: "MULADDRSHIFTR_MOD",
    arg0,
    loc,
});
exports.MULADDRSHIFTR_MOD = MULADDRSHIFTR_MOD;
const MULADDRSHIFTC_MOD = (arg0, loc) => ({
    $: "MULADDRSHIFTC_MOD",
    arg0,
    loc,
});
exports.MULADDRSHIFTC_MOD = MULADDRSHIFTC_MOD;
const MULRSHIFT_ = (arg0, loc) => ({
    $: "MULRSHIFT_",
    arg0,
    loc,
});
exports.MULRSHIFT_ = MULRSHIFT_;
const MULRSHIFTR_ = (arg0, loc) => ({
    $: "MULRSHIFTR_",
    arg0,
    loc,
});
exports.MULRSHIFTR_ = MULRSHIFTR_;
const MULRSHIFTC_ = (arg0, loc) => ({
    $: "MULRSHIFTC_",
    arg0,
    loc,
});
exports.MULRSHIFTC_ = MULRSHIFTC_;
const MULMODPOW2_ = (arg0, loc) => ({
    $: "MULMODPOW2_",
    arg0,
    loc,
});
exports.MULMODPOW2_ = MULMODPOW2_;
const MULMODPOW2R_ = (arg0, loc) => ({
    $: "MULMODPOW2R_",
    arg0,
    loc,
});
exports.MULMODPOW2R_ = MULMODPOW2R_;
const MULMODPOW2C_ = (arg0, loc) => ({
    $: "MULMODPOW2C_",
    arg0,
    loc,
});
exports.MULMODPOW2C_ = MULMODPOW2C_;
const MULRSHIFT_MOD = (arg0, loc) => ({
    $: "MULRSHIFT_MOD",
    arg0,
    loc,
});
exports.MULRSHIFT_MOD = MULRSHIFT_MOD;
const MULRSHIFTR_MOD = (arg0, loc) => ({
    $: "MULRSHIFTR_MOD",
    arg0,
    loc,
});
exports.MULRSHIFTR_MOD = MULRSHIFTR_MOD;
const MULRSHIFTC_MOD = (arg0, loc) => ({
    $: "MULRSHIFTC_MOD",
    arg0,
    loc,
});
exports.MULRSHIFTC_MOD = MULRSHIFTC_MOD;
const LSHIFT_ADDDIVMOD = (arg0, loc) => ({
    $: "LSHIFT_ADDDIVMOD",
    arg0,
    loc,
});
exports.LSHIFT_ADDDIVMOD = LSHIFT_ADDDIVMOD;
const LSHIFT_ADDDIVMODR = (arg0, loc) => ({
    $: "LSHIFT_ADDDIVMODR",
    arg0,
    loc,
});
exports.LSHIFT_ADDDIVMODR = LSHIFT_ADDDIVMODR;
const LSHIFT_ADDDIVMODC = (arg0, loc) => ({
    $: "LSHIFT_ADDDIVMODC",
    arg0,
    loc,
});
exports.LSHIFT_ADDDIVMODC = LSHIFT_ADDDIVMODC;
const LSHIFT_DIV = (arg0, loc) => ({
    $: "LSHIFT_DIV",
    arg0,
    loc,
});
exports.LSHIFT_DIV = LSHIFT_DIV;
const LSHIFT_DIVR = (arg0, loc) => ({
    $: "LSHIFT_DIVR",
    arg0,
    loc,
});
exports.LSHIFT_DIVR = LSHIFT_DIVR;
const LSHIFT_DIVC = (arg0, loc) => ({
    $: "LSHIFT_DIVC",
    arg0,
    loc,
});
exports.LSHIFT_DIVC = LSHIFT_DIVC;
const LSHIFT_MOD = (arg0, loc) => ({
    $: "LSHIFT_MOD",
    arg0,
    loc,
});
exports.LSHIFT_MOD = LSHIFT_MOD;
const LSHIFT_MODR = (arg0, loc) => ({
    $: "LSHIFT_MODR",
    arg0,
    loc,
});
exports.LSHIFT_MODR = LSHIFT_MODR;
const LSHIFT_MODC = (arg0, loc) => ({
    $: "LSHIFT_MODC",
    arg0,
    loc,
});
exports.LSHIFT_MODC = LSHIFT_MODC;
const LSHIFT_DIVMOD = (arg0, loc) => ({
    $: "LSHIFT_DIVMOD",
    arg0,
    loc,
});
exports.LSHIFT_DIVMOD = LSHIFT_DIVMOD;
const LSHIFT_DIVMODR = (arg0, loc) => ({
    $: "LSHIFT_DIVMODR",
    arg0,
    loc,
});
exports.LSHIFT_DIVMODR = LSHIFT_DIVMODR;
const LSHIFT_DIVMODC = (arg0, loc) => ({
    $: "LSHIFT_DIVMODC",
    arg0,
    loc,
});
exports.LSHIFT_DIVMODC = LSHIFT_DIVMODC;
const HASHEXT = (arg0, loc) => ({
    $: "HASHEXT",
    arg0,
    loc,
});
exports.HASHEXT = HASHEXT;
const HASHEXTR = (arg0, loc) => ({
    $: "HASHEXTR",
    arg0,
    loc,
});
exports.HASHEXTR = HASHEXTR;
const HASHEXTA = (arg0, loc) => ({
    $: "HASHEXTA",
    arg0,
    loc,
});
exports.HASHEXTA = HASHEXTA;
const HASHEXTAR = (arg0, loc) => ({
    $: "HASHEXTAR",
    arg0,
    loc,
});
exports.HASHEXTAR = HASHEXTAR;
const STREF = (loc) => ({
    $: "STREF",
    loc,
});
exports.STREF = STREF;
const STREF_ALT = (loc) => ({
    $: "STREF_ALT",
    loc,
});
exports.STREF_ALT = STREF_ALT;
const STSLICE = (loc) => ({
    $: "STSLICE",
    loc,
});
exports.STSLICE = STSLICE;
const STSLICE_ALT = (loc) => ({
    $: "STSLICE_ALT",
    loc,
});
exports.STSLICE_ALT = STSLICE_ALT;
const XCHG3 = (arg0, arg1, arg2, loc) => ({
    $: "XCHG3",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.XCHG3 = XCHG3;
const XCHG3_ALT = (arg0, arg1, arg2, loc) => ({
    $: "XCHG3_ALT",
    arg0,
    arg1,
    arg2,
    loc,
});
exports.XCHG3_ALT = XCHG3_ALT;
const STI = (arg0, loc) => ({
    $: "STI",
    arg0,
    loc,
});
exports.STI = STI;
const STI_ALT = (arg0, loc) => ({
    $: "STI_ALT",
    arg0,
    loc,
});
exports.STI_ALT = STI_ALT;
const STU = (arg0, loc) => ({
    $: "STU",
    arg0,
    loc,
});
exports.STU = STU;
const STU_ALT = (arg0, loc) => ({
    $: "STU_ALT",
    arg0,
    loc,
});
exports.STU_ALT = STU_ALT;
const LDI = (arg0, loc) => ({
    $: "LDI",
    arg0,
    loc,
});
exports.LDI = LDI;
const LDI_ALT = (arg0, loc) => ({
    $: "LDI_ALT",
    arg0,
    loc,
});
exports.LDI_ALT = LDI_ALT;
const LDU = (arg0, loc) => ({
    $: "LDU",
    arg0,
    loc,
});
exports.LDU = LDU;
const LDU_ALT = (arg0, loc) => ({
    $: "LDU_ALT",
    arg0,
    loc,
});
exports.LDU_ALT = LDU_ALT;
const LDSLICE = (arg0, loc) => ({
    $: "LDSLICE",
    arg0,
    loc,
});
exports.LDSLICE = LDSLICE;
const LDSLICE_ALT = (arg0, loc) => ({
    $: "LDSLICE_ALT",
    arg0,
    loc,
});
exports.LDSLICE_ALT = LDSLICE_ALT;
const LSHIFT = (loc) => ({
    $: "LSHIFT",
    loc,
});
exports.LSHIFT = LSHIFT;
const LSHIFT_1 = (arg0, loc) => ({
    $: "LSHIFT_1",
    arg0,
    loc,
});
exports.LSHIFT_1 = LSHIFT_1;
const QLSHIFT = (loc) => ({
    $: "QLSHIFT",
    loc,
});
exports.QLSHIFT = QLSHIFT;
const QLSHIFT_1 = (arg0, loc) => ({
    $: "QLSHIFT_1",
    arg0,
    loc,
});
exports.QLSHIFT_1 = QLSHIFT_1;
const BCHKBITS = (loc) => ({
    $: "BCHKBITS",
    loc,
});
exports.BCHKBITS = BCHKBITS;
const BCHKBITS_1 = (arg0, loc) => ({
    $: "BCHKBITS_1",
    arg0,
    loc,
});
exports.BCHKBITS_1 = BCHKBITS_1;
const BCHKBITSQ = (loc) => ({
    $: "BCHKBITSQ",
    loc,
});
exports.BCHKBITSQ = BCHKBITSQ;
const BCHKBITSQ_1 = (arg0, loc) => ({
    $: "BCHKBITSQ_1",
    arg0,
    loc,
});
exports.BCHKBITSQ_1 = BCHKBITSQ_1;
const RSHIFT = (loc) => ({
    $: "RSHIFT",
    loc,
});
exports.RSHIFT = RSHIFT;
const RSHIFT_1 = (arg0, loc) => ({
    $: "RSHIFT_1",
    arg0,
    loc,
});
exports.RSHIFT_1 = RSHIFT_1;
const RSHIFT_ALT = (loc) => ({
    $: "RSHIFT_ALT",
    loc,
});
exports.RSHIFT_ALT = RSHIFT_ALT;
const QRSHIFT = (loc) => ({
    $: "QRSHIFT",
    loc,
});
exports.QRSHIFT = QRSHIFT;
const QRSHIFT_1 = (arg0, loc) => ({
    $: "QRSHIFT_1",
    arg0,
    loc,
});
exports.QRSHIFT_1 = QRSHIFT_1;
const QRSHIFT_ALT = (loc) => ({
    $: "QRSHIFT_ALT",
    loc,
});
exports.QRSHIFT_ALT = QRSHIFT_ALT;
const CALLDICT = (arg0, loc) => ({
    $: "CALLDICT",
    arg0,
    loc,
});
exports.CALLDICT = CALLDICT;
const CALLDICT_LONG = (arg0, loc) => ({
    $: "CALLDICT_LONG",
    arg0,
    loc,
});
exports.CALLDICT_LONG = CALLDICT_LONG;
const THROW_SHORT = (arg0, loc) => ({
    $: "THROW_SHORT",
    arg0,
    loc,
});
exports.THROW_SHORT = THROW_SHORT;
const THROW = (arg0, loc) => ({
    $: "THROW",
    arg0,
    loc,
});
exports.THROW = THROW;
const THROWIF_SHORT = (arg0, loc) => ({
    $: "THROWIF_SHORT",
    arg0,
    loc,
});
exports.THROWIF_SHORT = THROWIF_SHORT;
const THROWIF = (arg0, loc) => ({
    $: "THROWIF",
    arg0,
    loc,
});
exports.THROWIF = THROWIF;
const THROWIFNOT_SHORT = (arg0, loc) => ({
    $: "THROWIFNOT_SHORT",
    arg0,
    loc,
});
exports.THROWIFNOT_SHORT = THROWIFNOT_SHORT;
const THROWIFNOT = (arg0, loc) => ({
    $: "THROWIFNOT",
    arg0,
    loc,
});
exports.THROWIFNOT = THROWIFNOT;
const PUSHINT = (arg0, loc) => ({
    $: "PUSHINT",
    arg0,
    loc,
});
exports.PUSHINT = PUSHINT;
const PUSHINT_8 = (arg0, loc) => ({
    $: "PUSHINT_8",
    arg0,
    loc,
});
exports.PUSHINT_8 = PUSHINT_8;
const PUSHINT_16 = (arg0, loc) => ({
    $: "PUSHINT_16",
    arg0,
    loc,
});
exports.PUSHINT_16 = PUSHINT_16;
const PUSHINT_LONG = (arg0, loc) => ({
    $: "PUSHINT_LONG",
    arg0,
    loc,
});
exports.PUSHINT_LONG = PUSHINT_LONG;
const XCHG_LONG = (arg0, loc) => ({
    $: "XCHG_LONG",
    arg0,
    loc,
});
exports.XCHG_LONG = XCHG_LONG;
const XCHG_0 = (arg0, loc) => ({
    $: "XCHG_0",
    arg0,
    loc,
});
exports.XCHG_0 = XCHG_0;
const XCHG_1 = (arg0, arg1, loc) => ({
    $: "XCHG_1",
    arg0,
    arg1,
    loc,
});
exports.XCHG_1 = XCHG_1;
const XCHG_3 = (arg0, arg1, loc) => ({
    $: "XCHG_3",
    arg0,
    arg1,
    loc,
});
exports.XCHG_3 = XCHG_3;
const DUMPSTK = (loc) => ({
    $: "DUMPSTK",
    loc,
});
exports.DUMPSTK = DUMPSTK;
const DEBUG = (arg0, loc) => ({
    $: "DEBUG",
    arg0,
    loc,
});
exports.DEBUG = DEBUG;
const STRDUMP = (loc) => ({
    $: "STRDUMP",
    loc,
});
exports.STRDUMP = STRDUMP;
const DEBUG_1 = (arg0, loc) => ({
    $: "DEBUG_1",
    arg0,
    loc,
});
exports.DEBUG_1 = DEBUG_1;
const DUMP = (arg0, loc) => ({
    $: "DUMP",
    arg0,
    loc,
});
exports.DUMP = DUMP;
const DEBUG_2 = (arg0, loc) => ({
    $: "DEBUG_2",
    arg0,
    loc,
});
exports.DEBUG_2 = DEBUG_2;
const PUSHCTR = (arg0, loc) => ({
    $: "PUSHCTR",
    arg0,
    loc,
});
exports.PUSHCTR = PUSHCTR;
const PUSH = (arg0, loc) => ({
    $: "PUSH",
    arg0,
    loc,
});
exports.PUSH = PUSH;
const PUSH_LONG = (arg0, loc) => ({
    $: "PUSH_LONG",
    arg0,
    loc,
});
exports.PUSH_LONG = PUSH_LONG;
const POPCTR = (arg0, loc) => ({
    $: "POPCTR",
    arg0,
    loc,
});
exports.POPCTR = POPCTR;
const POP = (arg0, loc) => ({
    $: "POP",
    arg0,
    loc,
});
exports.POP = POP;
const POP_LONG = (arg0, loc) => ({
    $: "POP_LONG",
    arg0,
    loc,
});
exports.POP_LONG = POP_LONG;
const CALLXARGS = (arg0, arg1, loc) => ({
    $: "CALLXARGS",
    arg0,
    arg1,
    loc,
});
exports.CALLXARGS = CALLXARGS;
const CALLXARGS_1 = (arg0, arg1, loc) => ({
    $: "CALLXARGS_1",
    arg0,
    arg1,
    loc,
});
exports.CALLXARGS_1 = CALLXARGS_1;
const PUSHSLICE = (arg0, loc) => ({
    $: "PUSHSLICE",
    arg0,
    loc,
});
exports.PUSHSLICE = PUSHSLICE;
const PUSHSLICE_REFS_1 = (arg0, loc) => ({
    $: "PUSHSLICE_REFS_1",
    arg0,
    loc,
});
exports.PUSHSLICE_REFS_1 = PUSHSLICE_REFS_1;
const PUSHSLICE_LONG_1 = (arg0, loc) => ({
    $: "PUSHSLICE_LONG_1",
    arg0,
    loc,
});
exports.PUSHSLICE_LONG_1 = PUSHSLICE_LONG_1;
const PUSHCONT = (arg0, loc) => ({
    $: "PUSHCONT",
    arg0,
    loc,
});
exports.PUSHCONT = PUSHCONT;
const PUSHCONT_SHORT = (arg0, loc) => ({
    $: "PUSHCONT_SHORT",
    arg0,
    loc,
});
exports.PUSHCONT_SHORT = PUSHCONT_SHORT;
const STSLICECONST = (arg0, loc) => ({
    $: "STSLICECONST",
    arg0,
    loc,
});
exports.STSLICECONST = STSLICECONST;
const SETCP = (arg0, loc) => ({
    $: "SETCP",
    arg0,
    loc,
});
exports.SETCP = SETCP;
const SETCP_SHORT = (arg0, loc) => ({
    $: "SETCP_SHORT",
    arg0,
    loc,
});
exports.SETCP_SHORT = SETCP_SHORT;
const PSEUDO_PUSHREF = (arg0, loc) => ({
    $: "PSEUDO_PUSHREF",
    arg0,
    loc,
});
exports.PSEUDO_PUSHREF = PSEUDO_PUSHREF;
const PSEUDO_PUSHSLICE = (arg0, loc) => ({
    $: "PSEUDO_PUSHSLICE",
    arg0,
    loc,
});
exports.PSEUDO_PUSHSLICE = PSEUDO_PUSHSLICE;
const PSEUDO_EXOTIC = (arg0, loc) => ({
    $: "PSEUDO_EXOTIC",
    arg0,
    loc,
});
exports.PSEUDO_EXOTIC = PSEUDO_EXOTIC;
const DEBUGMARK = (arg0, loc) => ({
    $: "DEBUGMARK",
    arg0,
    loc,
});
exports.DEBUGMARK = DEBUGMARK;
