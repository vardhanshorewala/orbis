import * as $ from "./util";
import * as c from "./constructors";
export type Instr = c.PUSHNAN | c.ADD | c.SUB | c.SUBR | c.NEGATE | c.INC | c.DEC | c.MUL | c.POW2 | c.AND | c.OR | c.XOR | c.NOT | c.FITSX | c.UFITSX | c.BITSIZE | c.UBITSIZE | c.MIN | c.MAX | c.MINMAX | c.ABS | c.QADD | c.QSUB | c.QSUBR | c.QNEGATE | c.QINC | c.QDEC | c.QMUL | c.QPOW2 | c.QAND | c.QOR | c.QXOR | c.QNOT | c.QFITSX | c.QUFITSX | c.QBITSIZE | c.QUBITSIZE | c.QMIN | c.QMAX | c.QMINMAX | c.QABS | c.SGN | c.LESS | c.EQUAL | c.LEQ | c.GREATER | c.NEQ | c.GEQ | c.CMP | c.ISNAN | c.CHKNAN | c.QSGN | c.QLESS | c.QEQUAL | c.QLEQ | c.QGREATER | c.QNEQ | c.QGEQ | c.QCMP | c.SEMPTY | c.SDEMPTY | c.SREMPTY | c.SDFIRST | c.SDLEXCMP | c.SDEQ | c.SDPFX | c.SDPFXREV | c.SDPPFX | c.SDPPFXREV | c.SDSFX | c.SDSFXREV | c.SDPSFX | c.SDPSFXREV | c.SDCNTLEAD0 | c.SDCNTLEAD1 | c.SDCNTTRAIL0 | c.SDCNTTRAIL1 | c.NEWC | c.ENDC | c.ENDCST | c.STBREF | c.STB | c.STREFR | c.STBREFR | c.STSLICER | c.STBR | c.STREFQ | c.STBREFQ | c.STSLICEQ | c.STBQ | c.STREFRQ | c.STBREFRQ | c.STSLICERQ | c.STBRQ | c.ENDXC | c.BDEPTH | c.BBITS | c.BREFS | c.BBITREFS | c.BREMBITS | c.BREMREFS | c.BREMBITREFS | c.BCHKREFS | c.BCHKBITREFS | c.BCHKREFSQ | c.BCHKBITREFSQ | c.STZEROES | c.STONES | c.STSAME | c.CTOS | c.ENDS | c.LDREF | c.LDREFRTOS | c.SDCUTFIRST | c.SDSKIPFIRST | c.SDCUTLAST | c.SDSKIPLAST | c.SDSUBSTR | c.SCUTFIRST | c.SSKIPFIRST | c.SCUTLAST | c.SSKIPLAST | c.SUBSLICE | c.SPLIT | c.SPLITQ | c.XCTOS | c.XLOAD | c.XLOADQ | c.SCHKBITS | c.SCHKREFS | c.SCHKBITREFS | c.SCHKBITSQ | c.SCHKREFSQ | c.SCHKBITREFSQ | c.PLDREFVAR | c.SBITS | c.SREFS | c.SBITREFS | c.LDZEROES | c.LDONES | c.LDSAME | c.SDEPTH | c.CDEPTH | c.CLEVEL | c.CLEVELMASK | c.CHASHIX | c.CDEPTHIX | c.EXECUTE | c.JMPX | c.RET | c.RETALT | c.RETBOOL | c.CALLCC | c.JMPXDATA | c.CALLXVARARGS | c.RETVARARGS | c.JMPXVARARGS | c.CALLCCVARARGS | c.RETDATA | c.RUNVMX | c.IFRET | c.IFNOTRET | c.IF | c.IFNOT | c.IFJMP | c.IFNOTJMP | c.IFELSE | c.CONDSEL | c.CONDSELCHK | c.IFRETALT | c.IFNOTRETALT | c.REPEAT | c.REPEATEND | c.UNTIL | c.UNTILEND | c.WHILE | c.WHILEEND | c.AGAIN | c.AGAINEND | c.REPEATBRK | c.REPEATENDBRK | c.UNTILBRK | c.UNTILENDBRK | c.WHILEBRK | c.WHILEENDBRK | c.AGAINBRK | c.AGAINENDBRK | c.RETURNVARARGS | c.SETCONTVARARGS | c.SETNUMVARARGS | c.BLESS | c.BLESSVARARGS | c.PUSHCTRX | c.POPCTRX | c.SETCONTCTRX | c.SETCONTCTRMANYX | c.BOOLAND | c.BOOLOR | c.COMPOSBOTH | c.ATEXIT | c.ATEXITALT | c.SETEXITALT | c.THENRET | c.THENRETALT | c.INVERT | c.BOOLEVAL | c.SAMEALT | c.SAMEALTSAVE | c.TRY | c.SETCPX | c.STDICT | c.SKIPDICT | c.LDDICTS | c.PLDDICTS | c.LDDICT | c.PLDDICT | c.LDDICTQ | c.PLDDICTQ | c.PFXDICTSET | c.PFXDICTREPLACE | c.PFXDICTADD | c.PFXDICTDEL | c.PFXDICTGETQ | c.PFXDICTGET | c.PFXDICTGETJMP | c.PFXDICTGETEXEC | c.NOP | c.SWAP | c.DUP | c.OVER | c.DROP | c.NIP | c.ROT | c.ROTREV | c.PICK | c.ROLL | c.ROLLREV | c.BLKSWX | c.REVX | c.DROPX | c.TUCK | c.XCHGX | c.DEPTH | c.CHKDEPTH | c.ONLYTOPX | c.ONLYX | c.ACCEPT | c.SETGASLIMIT | c.GASCONSUMED | c.COMMIT | c.NOW | c.BLOCKLT | c.LTIME | c.RANDSEED | c.BALANCE | c.MYADDR | c.CONFIGROOT | c.MYCODE | c.INCOMINGVALUE | c.STORAGEFEES | c.PREVBLOCKSINFOTUPLE | c.UNPACKEDCONFIGTUPLE | c.DUEPAYMENT | c.CONFIGDICT | c.CONFIGPARAM | c.CONFIGOPTPARAM | c.PREVMCBLOCKS | c.PREVKEYBLOCK | c.PREVMCBLOCKS_100 | c.GLOBALID | c.GETGASFEE | c.GETSTORAGEFEE | c.GETFORWARDFEE | c.GETPRECOMPILEDGAS | c.GETORIGINALFWDFEE | c.GETGASFEESIMPLE | c.GETFORWARDFEESIMPLE | c.GETGLOBVAR | c.SETGLOBVAR | c.RANDU256 | c.RAND | c.SETRAND | c.ADDRAND | c.HASHCU | c.HASHSU | c.SHA256U | c.CHKSIGNU | c.CHKSIGNS | c.ECRECOVER | c.SECP256K1_XONLY_PUBKEY_TWEAK_ADD | c.P256_CHKSIGNU | c.P256_CHKSIGNS | c.RIST255_FROMHASH | c.RIST255_VALIDATE | c.RIST255_ADD | c.RIST255_SUB | c.RIST255_MUL | c.RIST255_MULBASE | c.RIST255_PUSHL | c.RIST255_QVALIDATE | c.RIST255_QADD | c.RIST255_QSUB | c.RIST255_QMUL | c.RIST255_QMULBASE | c.BLS_VERIFY | c.BLS_AGGREGATE | c.BLS_FASTAGGREGATEVERIFY | c.BLS_AGGREGATEVERIFY | c.BLS_G1_ADD | c.BLS_G1_SUB | c.BLS_G1_NEG | c.BLS_G1_MUL | c.BLS_G1_MULTIEXP | c.BLS_G1_ZERO | c.BLS_MAP_TO_G1 | c.BLS_G1_INGROUP | c.BLS_G1_ISZERO | c.BLS_G2_ADD | c.BLS_G2_SUB | c.BLS_G2_NEG | c.BLS_G2_MUL | c.BLS_G2_MULTIEXP | c.BLS_G2_ZERO | c.BLS_MAP_TO_G2 | c.BLS_G2_INGROUP | c.BLS_G2_ISZERO | c.BLS_PAIRING | c.BLS_PUSHR | c.CDATASIZEQ | c.CDATASIZE | c.SDATASIZEQ | c.SDATASIZE | c.LDGRAMS | c.LDVARINT16 | c.STGRAMS | c.STVARINT16 | c.LDVARUINT32 | c.LDVARINT32 | c.STVARUINT32 | c.STVARINT32 | c.LDMSGADDR | c.LDMSGADDRQ | c.PARSEMSGADDR | c.PARSEMSGADDRQ | c.REWRITESTDADDR | c.REWRITESTDADDRQ | c.REWRITEVARADDR | c.REWRITEVARADDRQ | c.SENDRAWMSG | c.RAWRESERVE | c.RAWRESERVEX | c.SETCODE | c.SETLIBCODE | c.CHANGELIB | c.SENDMSG | c.PUSHNULL | c.ISNULL | c.TUPLEVAR | c.INDEXVAR | c.UNTUPLEVAR | c.UNPACKFIRSTVAR | c.EXPLODEVAR | c.SETINDEXVAR | c.INDEXVARQ | c.SETINDEXVARQ | c.TLEN | c.QTLEN | c.ISTUPLE | c.LAST | c.TPUSH | c.TPOP | c.NULLSWAPIF | c.NULLSWAPIFNOT | c.NULLROTRIF | c.NULLROTRIFNOT | c.NULLSWAPIF2 | c.NULLSWAPIFNOT2 | c.NULLROTRIF2 | c.NULLROTRIFNOT2 | c.ADDDIVMOD | c.ADDDIVMODR | c.ADDDIVMODC | c.DIV | c.DIVR | c.DIVC | c.MOD | c.MODR | c.MODC | c.DIVMOD | c.DIVMODR | c.DIVMODC | c.QADDDIVMOD | c.QADDDIVMODR | c.QADDDIVMODC | c.QDIV | c.QDIVR | c.QDIVC | c.QMOD | c.QMODR | c.QMODC | c.QDIVMOD | c.QDIVMODR | c.QDIVMODC | c.ADDRSHIFTMOD | c.ADDRSHIFTMODR | c.ADDRSHIFTMODC | c.RSHIFTR | c.RSHIFTC | c.MODPOW2 | c.MODPOW2R | c.MODPOW2C | c.RSHIFTMOD | c.RSHIFTMODR | c.RSHIFTMODC | c.QADDRSHIFTMOD | c.QADDRSHIFTMODR | c.QADDRSHIFTMODC | c.QRSHIFTR | c.QRSHIFTC | c.QMODPOW2 | c.QMODPOW2R | c.QMODPOW2C | c.QRSHIFTMOD | c.QRSHIFTMODR | c.QRSHIFTMODC | c.MULADDDIVMOD | c.MULADDDIVMODR | c.MULADDDIVMODC | c.MULDIV | c.MULDIVR | c.MULDIVC | c.MULMOD | c.MULMODR | c.MULMODC | c.MULDIVMOD | c.MULDIVMODR | c.MULDIVMODC | c.QMULADDDIVMOD | c.QMULADDDIVMODR | c.QMULADDDIVMODC | c.QMULDIV | c.QMULDIVR | c.QMULDIVC | c.QMULMOD | c.QMULMODR | c.QMULMODC | c.QMULDIVMOD | c.QMULDIVMODR | c.QMULDIVMODC | c.MULADDRSHIFTMOD | c.MULADDRSHIFTRMOD | c.MULADDRSHIFTCMOD | c.MULRSHIFT | c.MULRSHIFTR | c.MULRSHIFTC | c.MULMODPOW2 | c.MULMODPOW2R | c.MULMODPOW2C | c.MULRSHIFTMOD | c.MULRSHIFTRMOD | c.MULRSHIFTCMOD | c.QMULADDRSHIFTMOD | c.QMULADDRSHIFTRMOD | c.QMULADDRSHIFTCMOD | c.QMULRSHIFT | c.QMULRSHIFTR | c.QMULRSHIFTC | c.QMULMODPOW2 | c.QMULMODPOW2R | c.QMULMODPOW2C | c.QMULRSHIFTMOD | c.QMULRSHIFTRMOD | c.QMULRSHIFTCMOD | c.LSHIFTADDDIVMOD | c.LSHIFTADDDIVMODR | c.LSHIFTADDDIVMODC | c.LSHIFTDIV | c.LSHIFTDIVR | c.LSHIFTDIVC | c.LSHIFTMOD | c.LSHIFTMODR | c.LSHIFTMODC | c.LSHIFTDIVMOD | c.LSHIFTDIVMODR | c.LSHIFTDIVMODC | c.QLSHIFTADDDIVMOD | c.QLSHIFTADDDIVMODR | c.QLSHIFTADDDIVMODC | c.QLSHIFTDIV | c.QLSHIFTDIVR | c.QLSHIFTDIVC | c.QLSHIFTMOD | c.QLSHIFTMODR | c.QLSHIFTMODC | c.QLSHIFTDIVMOD | c.QLSHIFTDIVMODR | c.QLSHIFTDIVMODC | c.STIX | c.STUX | c.STIXR | c.STUXR | c.STIXQ | c.STUXQ | c.STIXRQ | c.STUXRQ | c.STILE4 | c.STULE4 | c.STILE8 | c.STULE8 | c.LDIX | c.LDUX | c.PLDIX | c.PLDUX | c.LDIXQ | c.LDUXQ | c.PLDIXQ | c.PLDUXQ | c.LDSLICEX | c.PLDSLICEX | c.LDSLICEXQ | c.PLDSLICEXQ | c.LDILE4 | c.LDULE4 | c.LDILE8 | c.LDULE8 | c.PLDILE4 | c.PLDULE4 | c.PLDILE8 | c.PLDULE8 | c.LDILE4Q | c.LDULE4Q | c.LDILE8Q | c.LDULE8Q | c.PLDILE4Q | c.PLDULE4Q | c.PLDILE8Q | c.PLDULE8Q | c.DICTIGETJMP | c.DICTUGETJMP | c.DICTIGETEXEC | c.DICTUGETEXEC | c.DICTIGETJMPZ | c.DICTUGETJMPZ | c.DICTIGETEXECZ | c.DICTUGETEXECZ | c.DICTGET | c.DICTGETREF | c.DICTIGET | c.DICTIGETREF | c.DICTUGET | c.DICTUGETREF | c.DICTSET | c.DICTSETREF | c.DICTISET | c.DICTISETREF | c.DICTUSET | c.DICTUSETREF | c.DICTSETGET | c.DICTSETGETREF | c.DICTISETGET | c.DICTISETGETREF | c.DICTUSETGET | c.DICTUSETGETREF | c.DICTREPLACE | c.DICTREPLACEREF | c.DICTIREPLACE | c.DICTIREPLACEREF | c.DICTUREPLACE | c.DICTUREPLACEREF | c.DICTREPLACEGET | c.DICTREPLACEGETREF | c.DICTIREPLACEGET | c.DICTIREPLACEGETREF | c.DICTUREPLACEGET | c.DICTUREPLACEGETREF | c.DICTADD | c.DICTADDREF | c.DICTIADD | c.DICTIADDREF | c.DICTUADD | c.DICTUADDREF | c.DICTADDGET | c.DICTADDGETREF | c.DICTIADDGET | c.DICTIADDGETREF | c.DICTUADDGET | c.DICTUADDGETREF | c.DICTDELGET | c.DICTDELGETREF | c.DICTIDELGET | c.DICTIDELGETREF | c.DICTUDELGET | c.DICTUDELGETREF | c.DICTMIN | c.DICTMINREF | c.DICTIMIN | c.DICTIMINREF | c.DICTUMIN | c.DICTUMINREF | c.DICTMAX | c.DICTMAXREF | c.DICTIMAX | c.DICTIMAXREF | c.DICTUMAX | c.DICTUMAXREF | c.DICTREMMIN | c.DICTREMMINREF | c.DICTIREMMIN | c.DICTIREMMINREF | c.DICTUREMMIN | c.DICTUREMMINREF | c.DICTREMMAX | c.DICTREMMAXREF | c.DICTIREMMAX | c.DICTIREMMAXREF | c.DICTUREMMAX | c.DICTUREMMAXREF | c.DICTSETB | c.DICTISETB | c.DICTUSETB | c.DICTSETGETB | c.DICTISETGETB | c.DICTUSETGETB | c.DICTREPLACEB | c.DICTIREPLACEB | c.DICTUREPLACEB | c.DICTREPLACEGETB | c.DICTIREPLACEGETB | c.DICTUREPLACEGETB | c.DICTADDB | c.DICTIADDB | c.DICTUADDB | c.DICTADDGETB | c.DICTIADDGETB | c.DICTUADDGETB | c.DICTDEL | c.DICTIDEL | c.DICTUDEL | c.DICTGETOPTREF | c.DICTIGETOPTREF | c.DICTUGETOPTREF | c.DICTSETGETOPTREF | c.DICTISETGETOPTREF | c.DICTUSETGETOPTREF | c.SUBDICTGET | c.SUBDICTIGET | c.SUBDICTUGET | c.SUBDICTRPGET | c.SUBDICTIRPGET | c.SUBDICTURPGET | c.THROWANY | c.THROWARGANY | c.THROWANYIFNOT | c.THROWARGANYIFNOT | c.DICTGETNEXT | c.DICTGETNEXTEQ | c.DICTGETPREV | c.DICTGETPREVEQ | c.DICTIGETNEXT | c.DICTIGETNEXTEQ | c.DICTIGETPREV | c.DICTIGETPREVEQ | c.DICTUGETNEXT | c.DICTUGETNEXTEQ | c.DICTUGETPREV | c.DICTUGETPREVEQ | c.ADDINT | c.MULINT | c.QADDINT | c.QMULINT | c.EQINT | c.LESSINT | c.GTINT | c.NEQINT | c.QEQINT | c.QLESSINT | c.QGTINT | c.QNEQINT | c.PUSHPOW2DEC | c.PUSHNEGPOW2 | c.FITS | c.UFITS | c.QFITS | c.QUFITS | c.SETCONTCTRMANY | c.CALLCCARGS | c.TRYARGS | c.PLDREFIDX | c.CHASHI | c.CDEPTHI | c.JMPDICT | c.PREPAREDICT | c.THROWARG | c.THROWARGIF | c.THROWARGIFNOT | c.JMPXARGS | c.RETARGS | c.RETURNARGS | c.BLKDROP | c.TUPLE | c.INDEX | c.UNTUPLE | c.UNPACKFIRST | c.EXPLODE | c.SETINDEX | c.INDEXQ | c.SETINDEXQ | c.XC2PU | c.XCPU2 | c.PUSH3 | c.XCHG2 | c.XCPU | c.PUSH2 | c.PUXC | c.XCPUXC | c.PUXC2 | c.PUXCPU | c.PU2XC | c.BLKSWAP | c.REVERSE | c.SETCONTARGS | c.BLESSARGS | c.STIR | c.STUR | c.STIQ | c.STUQ | c.STIRQ | c.STURQ | c.PLDI | c.PLDU | c.LDIQ | c.LDUQ | c.PLDIQ | c.PLDUQ | c.PLDUZ | c.PLDSLICE | c.LDSLICEQ | c.PLDSLICEQ | c.IFBITJMP | c.IFNBITJMP | c.INDEX2 | c.INDEX3 | c.PUSHPOW2 | c.BLKPUSH | c.BLKDROP2 | c.GETGLOB | c.SETGLOB | c.GETPARAM | c.PUSHREF | c.PUSHREFSLICE | c.PUSHREFCONT | c.CALLREF | c.JMPREF | c.JMPREFDATA | c.IFREF | c.IFNOTREF | c.IFJMPREF | c.IFNOTJMPREF | c.IFREFELSE | c.IFELSEREF | c.IFREFELSEREF | c.IFBITJMPREF | c.IFNBITJMPREF | c.DICTPUSHCONST | c.PFXDICTSWITCH | c.SDBEGINSX | c.SDBEGINSXQ | c.SDBEGINS | c.SDBEGINSQ | c.STREFCONST | c.STREF2CONST | c.THROWANYIF | c.THROWARGANYIF | c.DEBUGSTR | c.SETCONTCTR | c.SETRETCTR | c.SETALTCTR | c.POPSAVE | c.SAVECTR | c.SAVEALTCTR | c.SAVEBOTHCTR | c.RUNVM | c.SWAP2 | c.DROP2 | c.DUP2 | c.OVER2 | c.ADDRSHIFT_MOD | c.ADDRSHIFTR_MOD | c.ADDRSHIFTC_MOD | c.RSHIFT_ | c.RSHIFTR_ | c.RSHIFTC_ | c.MODPOW2_ | c.MODPOW2R_ | c.MODPOW2C_ | c.RSHIFT_MOD | c.RSHIFTR_MOD | c.RSHIFTC_MOD | c.MULADDRSHIFT_MOD | c.MULADDRSHIFTR_MOD | c.MULADDRSHIFTC_MOD | c.MULRSHIFT_ | c.MULRSHIFTR_ | c.MULRSHIFTC_ | c.MULMODPOW2_ | c.MULMODPOW2R_ | c.MULMODPOW2C_ | c.MULRSHIFT_MOD | c.MULRSHIFTR_MOD | c.MULRSHIFTC_MOD | c.LSHIFT_ADDDIVMOD | c.LSHIFT_ADDDIVMODR | c.LSHIFT_ADDDIVMODC | c.LSHIFT_DIV | c.LSHIFT_DIVR | c.LSHIFT_DIVC | c.LSHIFT_MOD | c.LSHIFT_MODR | c.LSHIFT_MODC | c.LSHIFT_DIVMOD | c.LSHIFT_DIVMODR | c.LSHIFT_DIVMODC | c.HASHEXT | c.HASHEXTR | c.HASHEXTA | c.HASHEXTAR | c.STREF | c.STREF_ALT | c.STSLICE | c.STSLICE_ALT | c.XCHG3 | c.XCHG3_ALT | c.STI | c.STI_ALT | c.STU | c.STU_ALT | c.LDI | c.LDI_ALT | c.LDU | c.LDU_ALT | c.LDSLICE | c.LDSLICE_ALT | c.LSHIFT | c.LSHIFT_1 | c.QLSHIFT | c.QLSHIFT_1 | c.BCHKBITS | c.BCHKBITS_1 | c.BCHKBITSQ | c.BCHKBITSQ_1 | c.RSHIFT | c.RSHIFT_1 | c.RSHIFT_ALT | c.QRSHIFT | c.QRSHIFT_1 | c.QRSHIFT_ALT | c.CALLDICT | c.CALLDICT_LONG | c.THROW_SHORT | c.THROW | c.THROWIF_SHORT | c.THROWIF | c.THROWIFNOT_SHORT | c.THROWIFNOT | c.PUSHINT | c.PUSHINT_8 | c.PUSHINT_16 | c.PUSHINT_LONG | c.XCHG_LONG | c.XCHG_0 | c.XCHG_1 | c.XCHG_3 | c.DUMPSTK | c.DEBUG | c.STRDUMP | c.DEBUG_1 | c.DUMP | c.DEBUG_2 | c.PUSHCTR | c.PUSH | c.PUSH_LONG | c.POPCTR | c.POP | c.POP_LONG | c.CALLXARGS | c.CALLXARGS_1 | c.PUSHSLICE | c.PUSHSLICE_REFS_1 | c.PUSHSLICE_LONG_1 | c.PUSHCONT | c.PUSHCONT_SHORT | c.STSLICECONST | c.SETCP | c.SETCP_SHORT | c.PSEUDO_PUSHREF | c.PSEUDO_PUSHSLICE | c.PSEUDO_EXOTIC | c.DEBUGMARK;
export declare const rangeToType: ({
    min: number;
    max: number;
    load: $.Load<c.PUSHNAN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NEGATE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MUL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.POW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.AND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.OR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XOR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.FITSX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UFITSX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BITSIZE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UBITSIZE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MINMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ABS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QSUB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QSUBR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QNEGATE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QINC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDEC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMUL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QAND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QOR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QXOR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QFITSX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QUFITSX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QBITSIZE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QUBITSIZE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMINMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QABS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SGN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LESS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.EQUAL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GREATER>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ISNAN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHKNAN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QSGN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLESS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QEQUAL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QGREATER>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QNEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QGEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QCMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SEMPTY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDEMPTY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SREMPTY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDFIRST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDLEXCMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDPFX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDPFXREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDPPFX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDPPFXREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDSFX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDSFXREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDPSFX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDPSFXREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDCNTLEAD0>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDCNTLEAD1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDCNTTRAIL0>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDCNTTRAIL1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NEWC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ENDC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ENDCST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREFR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBREFR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSLICER>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREFQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBREFQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSLICEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREFRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBREFRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSLICERQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STBRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ENDXC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BDEPTH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BBITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BBITREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BREMBITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BREMREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BREMBITREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKBITREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKREFSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKBITREFSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STZEROES>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STONES>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSAME>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CTOS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ENDS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDREFRTOS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDCUTFIRST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDSKIPFIRST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDCUTLAST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDSKIPLAST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDSUBSTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCUTFIRST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SSKIPFIRST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCUTLAST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SSKIPLAST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBSLICE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SPLIT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SPLITQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCTOS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XLOAD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XLOADQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCHKBITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCHKREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCHKBITREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCHKBITSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCHKREFSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SCHKBITREFSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDREFVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SBITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SBITREFS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDZEROES>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDONES>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDSAME>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDEPTH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CDEPTH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CLEVEL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CLEVELMASK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHASHIX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CDEPTHIX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.EXECUTE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETBOOL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLCC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPXDATA>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLXVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPXVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLCCVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETDATA>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RUNVMX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFRET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNOTRET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNOTJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFELSE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CONDSEL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CONDSELCHK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFRETALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNOTRETALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REPEAT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REPEATEND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNTIL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNTILEND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.WHILE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.WHILEEND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.AGAIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.AGAINEND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REPEATBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REPEATENDBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNTILBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNTILENDBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.WHILEBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.WHILEENDBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.AGAINBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.AGAINENDBRK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETURNVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCONTVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETNUMVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLESS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLESSVARARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHCTRX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.POPCTRX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCONTCTRX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCONTCTRMANYX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BOOLAND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BOOLOR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.COMPOSBOTH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ATEXIT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ATEXITALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETEXITALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THENRET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THENRETALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INVERT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BOOLEVAL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SAMEALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SAMEALTSAVE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TRY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCPX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SKIPDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDDICTS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDDICTS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDDICTQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDDICTQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTSET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTREPLACE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTDEL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTGETQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTGETJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTGETEXEC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NOP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SWAP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DUP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.OVER>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DROP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NIP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ROT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ROTREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PICK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ROLL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ROLLREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLKSWX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REVX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DROPX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TUCK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHGX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEPTH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHKDEPTH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ONLYTOPX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ONLYX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ACCEPT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETGASLIMIT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GASCONSUMED>;
} | {
    min: number;
    max: number;
    load: $.Load<c.COMMIT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NOW>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLOCKLT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LTIME>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RANDSEED>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BALANCE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MYADDR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CONFIGROOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MYCODE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INCOMINGVALUE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STORAGEFEES>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PREVBLOCKSINFOTUPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNPACKEDCONFIGTUPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DUEPAYMENT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CONFIGDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CONFIGPARAM>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CONFIGOPTPARAM>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PREVMCBLOCKS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PREVKEYBLOCK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PREVMCBLOCKS_100>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GLOBALID>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETGASFEE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETSTORAGEFEE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETFORWARDFEE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETPRECOMPILEDGAS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETORIGINALFWDFEE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETGASFEESIMPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETFORWARDFEESIMPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETGLOBVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETGLOBVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RANDU256>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RAND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETRAND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRAND>;
} | {
    min: number;
    max: number;
    load: $.Load<c.HASHCU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.HASHSU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SHA256U>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHKSIGNU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHKSIGNS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ECRECOVER>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SECP256K1_XONLY_PUBKEY_TWEAK_ADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.P256_CHKSIGNU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.P256_CHKSIGNS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_FROMHASH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_VALIDATE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_ADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_SUB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_MUL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_MULBASE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_PUSHL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_QVALIDATE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_QADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_QSUB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_QMUL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RIST255_QMULBASE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_VERIFY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_AGGREGATE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_FASTAGGREGATEVERIFY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_AGGREGATEVERIFY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_ADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_SUB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_NEG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_MUL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_MULTIEXP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_ZERO>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_MAP_TO_G1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_INGROUP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G1_ISZERO>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_ADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_SUB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_NEG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_MUL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_MULTIEXP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_ZERO>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_MAP_TO_G2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_INGROUP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_G2_ISZERO>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_PAIRING>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLS_PUSHR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CDATASIZEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CDATASIZE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDATASIZEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDATASIZE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDGRAMS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDVARINT16>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STGRAMS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STVARINT16>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDVARUINT32>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDVARINT32>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STVARUINT32>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STVARINT32>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDMSGADDR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDMSGADDRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PARSEMSGADDR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PARSEMSGADDRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REWRITESTDADDR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REWRITESTDADDRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REWRITEVARADDR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REWRITEVARADDRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SENDRAWMSG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RAWRESERVE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RAWRESERVEX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCODE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETLIBCODE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHANGELIB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SENDMSG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHNULL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ISNULL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TUPLEVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INDEXVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNTUPLEVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNPACKFIRSTVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.EXPLODEVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETINDEXVAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INDEXVARQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETINDEXVARQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TLEN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QTLEN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ISTUPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LAST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TPUSH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TPOP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLSWAPIF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLSWAPIFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLROTRIF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLROTRIFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLSWAPIF2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLSWAPIFNOT2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLROTRIF2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NULLROTRIFNOT2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRSHIFTMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRSHIFTMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODPOW2R>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODPOW2C>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDRSHIFTMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDRSHIFTMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFTC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMODPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMODPOW2R>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMODPOW2C>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFTMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFTMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULDIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULDIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULDIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULDIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULDIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULDIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDRSHIFTRMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDRSHIFTCMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODPOW2R>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODPOW2C>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTRMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTCMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULADDRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULADDRSHIFTRMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULADDRSHIFTCMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULRSHIFT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULRSHIFTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULRSHIFTC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULMODPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULMODPOW2R>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULMODPOW2C>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULRSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULRSHIFTRMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULRSHIFTCMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTDIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTDIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTDIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFTDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTDIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTDIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTDIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFTDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STUX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIXR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STUXR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STUXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIXRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STUXRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STILE4>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STULE4>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STILE8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STULE8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDIX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDUX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDIX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDUX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDIXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDUXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDIXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDUXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDSLICEX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDSLICEX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDSLICEXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDSLICEXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDILE4>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDULE4>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDILE8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDULE8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDILE4>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDULE4>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDILE8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDULE8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDILE4Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDULE4Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDILE8Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDULE8Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDILE4Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDULE4Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDILE8Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDULE8Q>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETEXEC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETEXEC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETJMPZ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETJMPZ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETEXECZ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETEXECZ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSETGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSETGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISETGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISETGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSETGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSETGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREPLACE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREPLACEREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREPLACE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREPLACEREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREPLACE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREPLACEREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREPLACEGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREPLACEGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREPLACEGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREPLACEGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREPLACEGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREPLACEGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTADDREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIADDREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUADD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUADDREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTADDGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTADDGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIADDGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIADDGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUADDGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUADDGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTDELGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTDELGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIDELGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIDELGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUDELGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUDELGETREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTMINREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIMINREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUMINREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTMAXREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIMAXREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUMAXREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREMMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREMMINREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREMMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREMMINREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREMMIN>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREMMINREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREMMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREMMAXREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREMMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREMMAXREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREMMAX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREMMAXREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSETGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISETGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSETGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREPLACEB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREPLACEB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREPLACEB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTREPLACEGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIREPLACEGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUREPLACEGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTADDB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIADDB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUADDB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTADDGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIADDGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUADDGETB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTDEL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIDEL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUDEL>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGETOPTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETOPTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETOPTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTSETGETOPTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTISETGETOPTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUSETGETOPTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBDICTGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBDICTIGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBDICTUGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBDICTRPGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBDICTIRPGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SUBDICTURPGET>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWANY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWARGANY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWANYIFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWARGANYIFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGETNEXT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGETNEXTEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGETPREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTGETPREVEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETNEXT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETNEXTEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETPREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTIGETPREVEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETNEXT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETNEXTEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETPREV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTUGETPREVEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QADDINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QMULINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.EQINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LESSINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GTINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.NEQINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QEQINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLESSINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QGTINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QNEQINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHPOW2DEC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHNEGPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.FITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UFITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QFITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QUFITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCONTCTRMANY>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLCCARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TRYARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDREFIDX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CHASHI>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CDEPTHI>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PREPAREDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWARG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWARGIF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWARGIFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPXARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RETURNARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLKDROP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.TUPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INDEX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNTUPLE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.UNPACKFIRST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.EXPLODE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETINDEX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INDEXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETINDEXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XC2PU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCPU2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSH3>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCPU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSH2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUXC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCPUXC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUXC2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUXCPU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PU2XC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLKSWAP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.REVERSE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCONTARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLESSARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STUR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STUQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STIRQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STURQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDI>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDIQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDUQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDIQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDUQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDUZ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDSLICE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDSLICEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PLDSLICEQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFBITJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNBITJMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INDEX2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.INDEX3>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHPOW2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLKPUSH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BLKDROP2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETGLOB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETGLOB>;
} | {
    min: number;
    max: number;
    load: $.Load<c.GETPARAM>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHREFSLICE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHREFCONT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.JMPREFDATA>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNOTREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFJMPREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNOTJMPREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFREFELSE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFELSEREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFREFELSEREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFBITJMPREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.IFNBITJMPREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DICTPUSHCONST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PFXDICTSWITCH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDBEGINSX>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDBEGINSXQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDBEGINS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SDBEGINSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREFCONST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREF2CONST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWANYIF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWARGANYIF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEBUGSTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCONTCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETRETCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETALTCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.POPSAVE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SAVECTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SAVEALTCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SAVEBOTHCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RUNVM>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SWAP2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DROP2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DUP2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.OVER2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRSHIFT_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRSHIFTR_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.ADDRSHIFTC_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFT_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTR_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTC_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODPOW2_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODPOW2R_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MODPOW2C_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFT_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTR_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFTC_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDRSHIFT_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDRSHIFTR_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULADDRSHIFTC_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFT_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTR_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTC_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODPOW2_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODPOW2R_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULMODPOW2C_>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFT_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTR_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.MULRSHIFTC_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_ADDDIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_ADDDIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_ADDDIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_DIV>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_DIVR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_DIVC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_MOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_MODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_MODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_DIVMOD>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_DIVMODR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_DIVMODC>;
} | {
    min: number;
    max: number;
    load: $.Load<c.HASHEXT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.HASHEXTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.HASHEXTA>;
} | {
    min: number;
    max: number;
    load: $.Load<c.HASHEXTAR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STREF_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSLICE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSLICE_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG3>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG3_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STI>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STI_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STU_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDI>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDI_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDU>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDU_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDSLICE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LDSLICE_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.LSHIFT_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QLSHIFT_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKBITS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKBITS_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKBITSQ>;
} | {
    min: number;
    max: number;
    load: $.Load<c.BCHKBITSQ_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFT_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.RSHIFT_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFT_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.QRSHIFT_ALT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLDICT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLDICT_LONG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROW_SHORT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROW>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWIF_SHORT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWIF>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWIFNOT_SHORT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.THROWIFNOT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHINT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHINT_8>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHINT_16>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHINT_LONG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG_LONG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG_0>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.XCHG_3>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DUMPSTK>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEBUG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STRDUMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEBUG_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DUMP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEBUG_2>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSH>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSH_LONG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.POPCTR>;
} | {
    min: number;
    max: number;
    load: $.Load<c.POP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.POP_LONG>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLXARGS>;
} | {
    min: number;
    max: number;
    load: $.Load<c.CALLXARGS_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHSLICE>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHSLICE_REFS_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHSLICE_LONG_1>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHCONT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.PUSHCONT_SHORT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.STSLICECONST>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCP>;
} | {
    min: number;
    max: number;
    load: $.Load<c.SETCP_SHORT>;
} | {
    min: number;
    max: number;
    load: $.Load<c.DEBUGMARK>;
})[];
export declare const storeMapping: Map<string, $.Store<any>>;
