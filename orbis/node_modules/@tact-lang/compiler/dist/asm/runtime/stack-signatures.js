"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signatureOf = exports.signatureString = void 0;
let signatures = undefined;
const signatureString = (signature) => {
    return (stackString(signature.inputs?.stack ?? []) +
        " -> " +
        stackString(signature.outputs?.stack ?? []));
};
exports.signatureString = signatureString;
const stackString = (values) => {
    if (values.length === 0) {
        return "âˆ…";
    }
    return values.map((value) => entryString(value)).join(" ");
};
const entryString = (entry) => {
    if (entry.type === "simple") {
        const types = entry.value_types ?? [];
        if (types.length === 0) {
            return entry.name + ":Any";
        }
        const typesStr = types
            .map((it) => (it === "Integer" ? "Int" : it))
            .join("|");
        return entry.name + ":" + typesStr;
    }
    if (entry.type === "const") {
        if (entry.value === null) {
            return "null";
        }
        return entry.value.toString();
    }
    if (entry.type === "array") {
        return `x_1...x_${entry.length_var}`;
    }
    const variants = entry.match
        .map((arm) => "(" + stackString(arm.stack) + " " + arm.value.toString() + ")")
        .join("|");
    if (entry.else) {
        const elseValues = stackString(entry.else);
        return variants + "|" + elseValues;
    }
    return variants;
};
const signatureOf = async (name) => {
    const fs = await Promise.resolve().then(() => __importStar(require("node:fs")));
    if (signatures) {
        return signatures[name];
    }
    const signaturesData = fs.readFileSync(`${__dirname}/stack-signatures-data.json`, "utf8");
    signatures = JSON.parse(signaturesData);
    return signatures[name];
};
exports.signatureOf = signatureOf;
