"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = parse;
const $ = __importStar(require("@tonstudio/parser-runtime"));
const G = __importStar(require("./grammar"));
const util_1 = require("./util");
const success = (instructions) => ({
    $: "ParseSuccess",
    instructions,
});
const failure = (error) => ({
    $: "ParseFailure",
    error,
});
function parse(filepath, code) {
    const lines = code.split("\n");
    const ctx = { lines, filepath };
    const res = $.parse({
        grammar: G.File,
        space: G.space,
        text: code,
    });
    if (res.$ !== "success") {
        const { expected, position } = res.error;
        const loc = (0, util_1.createLoc)(ctx, { $: "empty", at: position });
        return failure(new util_1.ParseError(loc, `Expected ${getExpectedText(expected)}`));
    }
    try {
        return success((0, util_1.processInstructions)(ctx, res.value.instructions));
    }
    catch (error) {
        if (error instanceof util_1.ParseError) {
            return failure(error);
        }
        throw error;
    }
}
const getExpectedText = (expected) => {
    const result = [];
    const failures = [...expected].sort();
    for (const [idx, failure] of failures.entries()) {
        if (idx > 0) {
            if (idx === failures.length - 1) {
                result.push(failures.length > 2 ? ", or " : " or ");
            }
            else {
                result.push(", ");
            }
        }
        result.push(failure);
    }
    return result.join("");
};
