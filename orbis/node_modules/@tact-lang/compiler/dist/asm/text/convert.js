"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ISNAN = exports.CMP = exports.GEQ = exports.NEQ = exports.GREATER = exports.LEQ = exports.EQUAL = exports.LESS = exports.SGN = exports.QABS = exports.QMINMAX = exports.QMAX = exports.QMIN = exports.QUBITSIZE = exports.QBITSIZE = exports.QUFITSX = exports.QFITSX = exports.QNOT = exports.QXOR = exports.QOR = exports.QAND = exports.QPOW2 = exports.QMUL = exports.QDEC = exports.QINC = exports.QNEGATE = exports.QSUBR = exports.QSUB = exports.QADD = exports.ABS = exports.MINMAX = exports.MAX = exports.MIN = exports.UBITSIZE = exports.BITSIZE = exports.UFITSX = exports.FITSX = exports.NOT = exports.XOR = exports.OR = exports.AND = exports.POW2 = exports.MUL = exports.DEC = exports.INC = exports.NEGATE = exports.SUBR = exports.SUB = exports.ADD = exports.PUSHNAN = void 0;
exports.BREMBITS = exports.BBITREFS = exports.BREFS = exports.BBITS = exports.BDEPTH = exports.ENDXC = exports.STBRQ = exports.STSLICERQ = exports.STBREFRQ = exports.STREFRQ = exports.STBQ = exports.STSLICEQ = exports.STBREFQ = exports.STREFQ = exports.STBR = exports.STSLICER = exports.STBREFR = exports.STREFR = exports.STB = exports.STBREF = exports.ENDCST = exports.ENDC = exports.NEWC = exports.SDCNTTRAIL1 = exports.SDCNTTRAIL0 = exports.SDCNTLEAD1 = exports.SDCNTLEAD0 = exports.SDPSFXREV = exports.SDPSFX = exports.SDSFXREV = exports.SDSFX = exports.SDPPFXREV = exports.SDPPFX = exports.SDPFXREV = exports.SDPFX = exports.SDEQ = exports.SDLEXCMP = exports.SDFIRST = exports.SREMPTY = exports.SDEMPTY = exports.SEMPTY = exports.QCMP = exports.QGEQ = exports.QNEQ = exports.QGREATER = exports.QLEQ = exports.QEQUAL = exports.QLESS = exports.QSGN = exports.CHKNAN = void 0;
exports.RET = exports.JMPX = exports.EXECUTE = exports.CDEPTHIX = exports.CHASHIX = exports.CLEVELMASK = exports.CLEVEL = exports.CDEPTH = exports.SDEPTH = exports.LDSAME = exports.LDONES = exports.LDZEROES = exports.SBITREFS = exports.SREFS = exports.SBITS = exports.PLDREFVAR = exports.SCHKBITREFSQ = exports.SCHKREFSQ = exports.SCHKBITSQ = exports.SCHKBITREFS = exports.SCHKREFS = exports.SCHKBITS = exports.XLOADQ = exports.XLOAD = exports.XCTOS = exports.SPLITQ = exports.SPLIT = exports.SUBSLICE = exports.SSKIPLAST = exports.SCUTLAST = exports.SSKIPFIRST = exports.SCUTFIRST = exports.SDSUBSTR = exports.SDSKIPLAST = exports.SDCUTLAST = exports.SDSKIPFIRST = exports.SDCUTFIRST = exports.LDREFRTOS = exports.LDREF = exports.ENDS = exports.CTOS = exports.STSAME = exports.STONES = exports.STZEROES = exports.BCHKBITREFSQ = exports.BCHKREFSQ = exports.BCHKBITREFS = exports.BCHKREFS = exports.BREMBITREFS = exports.BREMREFS = void 0;
exports.ATEXIT = exports.COMPOSBOTH = exports.BOOLOR = exports.BOOLAND = exports.SETCONTCTRMANYX = exports.SETCONTCTRX = exports.POPCTRX = exports.PUSHCTRX = exports.BLESSVARARGS = exports.BLESS = exports.SETNUMVARARGS = exports.SETCONTVARARGS = exports.RETURNVARARGS = exports.AGAINENDBRK = exports.AGAINBRK = exports.WHILEENDBRK = exports.WHILEBRK = exports.UNTILENDBRK = exports.UNTILBRK = exports.REPEATENDBRK = exports.REPEATBRK = exports.AGAINEND = exports.AGAIN = exports.WHILEEND = exports.WHILE = exports.UNTILEND = exports.UNTIL = exports.REPEATEND = exports.REPEAT = exports.IFNOTRETALT = exports.IFRETALT = exports.CONDSELCHK = exports.CONDSEL = exports.IFELSE = exports.IFNOTJMP = exports.IFJMP = exports.IFNOT = exports.IF = exports.IFNOTRET = exports.IFRET = exports.RUNVMX = exports.RETDATA = exports.CALLCCVARARGS = exports.JMPXVARARGS = exports.RETVARARGS = exports.CALLXVARARGS = exports.JMPXDATA = exports.CALLCC = exports.RETBOOL = exports.RETALT = void 0;
exports.COMMIT = exports.GASCONSUMED = exports.SETGASLIMIT = exports.ACCEPT = exports.ONLYX = exports.ONLYTOPX = exports.CHKDEPTH = exports.DEPTH = exports.XCHGX = exports.TUCK = exports.DROPX = exports.REVX = exports.BLKSWX = exports.ROLLREV = exports.ROLL = exports.PICK = exports.ROTREV = exports.ROT = exports.NIP = exports.DROP = exports.OVER = exports.DUP = exports.SWAP = exports.NOP = exports.PFXDICTGETEXEC = exports.PFXDICTGETJMP = exports.PFXDICTGET = exports.PFXDICTGETQ = exports.PFXDICTDEL = exports.PFXDICTADD = exports.PFXDICTREPLACE = exports.PFXDICTSET = exports.PLDDICTQ = exports.LDDICTQ = exports.PLDDICT = exports.LDDICT = exports.PLDDICTS = exports.LDDICTS = exports.SKIPDICT = exports.STDICT = exports.SETCPX = exports.TRY = exports.SAMEALTSAVE = exports.SAMEALT = exports.BOOLEVAL = exports.INVERT = exports.THENRETALT = exports.THENRET = exports.SETEXITALT = exports.ATEXITALT = void 0;
exports.RIST255_QVALIDATE = exports.RIST255_PUSHL = exports.RIST255_MULBASE = exports.RIST255_MUL = exports.RIST255_SUB = exports.RIST255_ADD = exports.RIST255_VALIDATE = exports.RIST255_FROMHASH = exports.P256_CHKSIGNS = exports.P256_CHKSIGNU = exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD = exports.ECRECOVER = exports.CHKSIGNS = exports.CHKSIGNU = exports.SHA256U = exports.HASHSU = exports.HASHCU = exports.ADDRAND = exports.SETRAND = exports.RAND = exports.RANDU256 = exports.SETGLOBVAR = exports.GETGLOBVAR = exports.GETFORWARDFEESIMPLE = exports.GETGASFEESIMPLE = exports.GETORIGINALFWDFEE = exports.GETPRECOMPILEDGAS = exports.GETFORWARDFEE = exports.GETSTORAGEFEE = exports.GETGASFEE = exports.GLOBALID = exports.PREVMCBLOCKS_100 = exports.PREVKEYBLOCK = exports.PREVMCBLOCKS = exports.CONFIGOPTPARAM = exports.CONFIGPARAM = exports.CONFIGDICT = exports.DUEPAYMENT = exports.UNPACKEDCONFIGTUPLE = exports.PREVBLOCKSINFOTUPLE = exports.STORAGEFEES = exports.INCOMINGVALUE = exports.MYCODE = exports.CONFIGROOT = exports.MYADDR = exports.BALANCE = exports.RANDSEED = exports.LTIME = exports.BLOCKLT = exports.NOW = void 0;
exports.RAWRESERVE = exports.SENDRAWMSG = exports.REWRITEVARADDRQ = exports.REWRITEVARADDR = exports.REWRITESTDADDRQ = exports.REWRITESTDADDR = exports.PARSEMSGADDRQ = exports.PARSEMSGADDR = exports.LDMSGADDRQ = exports.LDMSGADDR = exports.STVARINT32 = exports.STVARUINT32 = exports.LDVARINT32 = exports.LDVARUINT32 = exports.STVARINT16 = exports.STGRAMS = exports.LDVARINT16 = exports.LDGRAMS = exports.SDATASIZE = exports.SDATASIZEQ = exports.CDATASIZE = exports.CDATASIZEQ = exports.BLS_PUSHR = exports.BLS_PAIRING = exports.BLS_G2_ISZERO = exports.BLS_G2_INGROUP = exports.BLS_MAP_TO_G2 = exports.BLS_G2_ZERO = exports.BLS_G2_MULTIEXP = exports.BLS_G2_MUL = exports.BLS_G2_NEG = exports.BLS_G2_SUB = exports.BLS_G2_ADD = exports.BLS_G1_ISZERO = exports.BLS_G1_INGROUP = exports.BLS_MAP_TO_G1 = exports.BLS_G1_ZERO = exports.BLS_G1_MULTIEXP = exports.BLS_G1_MUL = exports.BLS_G1_NEG = exports.BLS_G1_SUB = exports.BLS_G1_ADD = exports.BLS_AGGREGATEVERIFY = exports.BLS_FASTAGGREGATEVERIFY = exports.BLS_AGGREGATE = exports.BLS_VERIFY = exports.RIST255_QMULBASE = exports.RIST255_QMUL = exports.RIST255_QSUB = exports.RIST255_QADD = void 0;
exports.QMODC = exports.QMODR = exports.QMOD = exports.QDIVC = exports.QDIVR = exports.QDIV = exports.QADDDIVMODC = exports.QADDDIVMODR = exports.QADDDIVMOD = exports.DIVMODC = exports.DIVMODR = exports.DIVMOD = exports.MODC = exports.MODR = exports.MOD = exports.DIVC = exports.DIVR = exports.DIV = exports.ADDDIVMODC = exports.ADDDIVMODR = exports.ADDDIVMOD = exports.NULLROTRIFNOT2 = exports.NULLROTRIF2 = exports.NULLSWAPIFNOT2 = exports.NULLSWAPIF2 = exports.NULLROTRIFNOT = exports.NULLROTRIF = exports.NULLSWAPIFNOT = exports.NULLSWAPIF = exports.TPOP = exports.TPUSH = exports.LAST = exports.ISTUPLE = exports.QTLEN = exports.TLEN = exports.SETINDEXVARQ = exports.INDEXVARQ = exports.SETINDEXVAR = exports.EXPLODEVAR = exports.UNPACKFIRSTVAR = exports.UNTUPLEVAR = exports.INDEXVAR = exports.TUPLEVAR = exports.ISNULL = exports.PUSHNULL = exports.SENDMSG = exports.CHANGELIB = exports.SETLIBCODE = exports.SETCODE = exports.RAWRESERVEX = void 0;
exports.MULADDRSHIFTMOD = exports.QMULDIVMODC = exports.QMULDIVMODR = exports.QMULDIVMOD = exports.QMULMODC = exports.QMULMODR = exports.QMULMOD = exports.QMULDIVC = exports.QMULDIVR = exports.QMULDIV = exports.QMULADDDIVMODC = exports.QMULADDDIVMODR = exports.QMULADDDIVMOD = exports.MULDIVMODC = exports.MULDIVMODR = exports.MULDIVMOD = exports.MULMODC = exports.MULMODR = exports.MULMOD = exports.MULDIVC = exports.MULDIVR = exports.MULDIV = exports.MULADDDIVMODC = exports.MULADDDIVMODR = exports.MULADDDIVMOD = exports.QRSHIFTMODC = exports.QRSHIFTMODR = exports.QRSHIFTMOD = exports.QMODPOW2C = exports.QMODPOW2R = exports.QMODPOW2 = exports.QRSHIFTC = exports.QRSHIFTR = exports.QADDRSHIFTMODC = exports.QADDRSHIFTMODR = exports.QADDRSHIFTMOD = exports.RSHIFTMODC = exports.RSHIFTMODR = exports.RSHIFTMOD = exports.MODPOW2C = exports.MODPOW2R = exports.MODPOW2 = exports.RSHIFTC = exports.RSHIFTR = exports.ADDRSHIFTMODC = exports.ADDRSHIFTMODR = exports.ADDRSHIFTMOD = exports.QDIVMODC = exports.QDIVMODR = exports.QDIVMOD = void 0;
exports.STIXR = exports.STUX = exports.STIX = exports.QLSHIFTDIVMODC = exports.QLSHIFTDIVMODR = exports.QLSHIFTDIVMOD = exports.QLSHIFTMODC = exports.QLSHIFTMODR = exports.QLSHIFTMOD = exports.QLSHIFTDIVC = exports.QLSHIFTDIVR = exports.QLSHIFTDIV = exports.QLSHIFTADDDIVMODC = exports.QLSHIFTADDDIVMODR = exports.QLSHIFTADDDIVMOD = exports.LSHIFTDIVMODC = exports.LSHIFTDIVMODR = exports.LSHIFTDIVMOD = exports.LSHIFTMODC = exports.LSHIFTMODR = exports.LSHIFTMOD = exports.LSHIFTDIVC = exports.LSHIFTDIVR = exports.LSHIFTDIV = exports.LSHIFTADDDIVMODC = exports.LSHIFTADDDIVMODR = exports.LSHIFTADDDIVMOD = exports.QMULRSHIFTCMOD = exports.QMULRSHIFTRMOD = exports.QMULRSHIFTMOD = exports.QMULMODPOW2C = exports.QMULMODPOW2R = exports.QMULMODPOW2 = exports.QMULRSHIFTC = exports.QMULRSHIFTR = exports.QMULRSHIFT = exports.QMULADDRSHIFTCMOD = exports.QMULADDRSHIFTRMOD = exports.QMULADDRSHIFTMOD = exports.MULRSHIFTCMOD = exports.MULRSHIFTRMOD = exports.MULRSHIFTMOD = exports.MULMODPOW2C = exports.MULMODPOW2R = exports.MULMODPOW2 = exports.MULRSHIFTC = exports.MULRSHIFTR = exports.MULRSHIFT = exports.MULADDRSHIFTCMOD = exports.MULADDRSHIFTRMOD = void 0;
exports.DICTUGET = exports.DICTIGETREF = exports.DICTIGET = exports.DICTGETREF = exports.DICTGET = exports.DICTUGETEXECZ = exports.DICTIGETEXECZ = exports.DICTUGETJMPZ = exports.DICTIGETJMPZ = exports.DICTUGETEXEC = exports.DICTIGETEXEC = exports.DICTUGETJMP = exports.DICTIGETJMP = exports.PLDULE8Q = exports.PLDILE8Q = exports.PLDULE4Q = exports.PLDILE4Q = exports.LDULE8Q = exports.LDILE8Q = exports.LDULE4Q = exports.LDILE4Q = exports.PLDULE8 = exports.PLDILE8 = exports.PLDULE4 = exports.PLDILE4 = exports.LDULE8 = exports.LDILE8 = exports.LDULE4 = exports.LDILE4 = exports.PLDSLICEXQ = exports.LDSLICEXQ = exports.PLDSLICEX = exports.LDSLICEX = exports.PLDUXQ = exports.PLDIXQ = exports.LDUXQ = exports.LDIXQ = exports.PLDUX = exports.PLDIX = exports.LDUX = exports.LDIX = exports.STULE8 = exports.STILE8 = exports.STULE4 = exports.STILE4 = exports.STUXRQ = exports.STIXRQ = exports.STUXQ = exports.STIXQ = exports.STUXR = void 0;
exports.DICTMAX = exports.DICTUMINREF = exports.DICTUMIN = exports.DICTIMINREF = exports.DICTIMIN = exports.DICTMINREF = exports.DICTMIN = exports.DICTUDELGETREF = exports.DICTUDELGET = exports.DICTIDELGETREF = exports.DICTIDELGET = exports.DICTDELGETREF = exports.DICTDELGET = exports.DICTUADDGETREF = exports.DICTUADDGET = exports.DICTIADDGETREF = exports.DICTIADDGET = exports.DICTADDGETREF = exports.DICTADDGET = exports.DICTUADDREF = exports.DICTUADD = exports.DICTIADDREF = exports.DICTIADD = exports.DICTADDREF = exports.DICTADD = exports.DICTUREPLACEGETREF = exports.DICTUREPLACEGET = exports.DICTIREPLACEGETREF = exports.DICTIREPLACEGET = exports.DICTREPLACEGETREF = exports.DICTREPLACEGET = exports.DICTUREPLACEREF = exports.DICTUREPLACE = exports.DICTIREPLACEREF = exports.DICTIREPLACE = exports.DICTREPLACEREF = exports.DICTREPLACE = exports.DICTUSETGETREF = exports.DICTUSETGET = exports.DICTISETGETREF = exports.DICTISETGET = exports.DICTSETGETREF = exports.DICTSETGET = exports.DICTUSETREF = exports.DICTUSET = exports.DICTISETREF = exports.DICTISET = exports.DICTSETREF = exports.DICTSET = exports.DICTUGETREF = void 0;
exports.SUBDICTURPGET = exports.SUBDICTIRPGET = exports.SUBDICTRPGET = exports.SUBDICTUGET = exports.SUBDICTIGET = exports.SUBDICTGET = exports.DICTUSETGETOPTREF = exports.DICTISETGETOPTREF = exports.DICTSETGETOPTREF = exports.DICTUGETOPTREF = exports.DICTIGETOPTREF = exports.DICTGETOPTREF = exports.DICTUDEL = exports.DICTIDEL = exports.DICTDEL = exports.DICTUADDGETB = exports.DICTIADDGETB = exports.DICTADDGETB = exports.DICTUADDB = exports.DICTIADDB = exports.DICTADDB = exports.DICTUREPLACEGETB = exports.DICTIREPLACEGETB = exports.DICTREPLACEGETB = exports.DICTUREPLACEB = exports.DICTIREPLACEB = exports.DICTREPLACEB = exports.DICTUSETGETB = exports.DICTISETGETB = exports.DICTSETGETB = exports.DICTUSETB = exports.DICTISETB = exports.DICTSETB = exports.DICTUREMMAXREF = exports.DICTUREMMAX = exports.DICTIREMMAXREF = exports.DICTIREMMAX = exports.DICTREMMAXREF = exports.DICTREMMAX = exports.DICTUREMMINREF = exports.DICTUREMMIN = exports.DICTIREMMINREF = exports.DICTIREMMIN = exports.DICTREMMINREF = exports.DICTREMMIN = exports.DICTUMAXREF = exports.DICTUMAX = exports.DICTIMAXREF = exports.DICTIMAX = exports.DICTMAXREF = void 0;
exports.TUPLE = exports.BLKDROP = exports.RETURNARGS = exports.RETARGS = exports.JMPXARGS = exports.THROWARGIFNOT = exports.THROWARGIF = exports.THROWARG = exports.PREPAREDICT = exports.JMPDICT = exports.CDEPTHI = exports.CHASHI = exports.PLDREFIDX = exports.TRYARGS = exports.CALLCCARGS = exports.SETCONTCTRMANY = exports.QUFITS = exports.QFITS = exports.UFITS = exports.FITS = exports.PUSHNEGPOW2 = exports.PUSHPOW2DEC = exports.QNEQINT = exports.QGTINT = exports.QLESSINT = exports.QEQINT = exports.NEQINT = exports.GTINT = exports.LESSINT = exports.EQINT = exports.QMULINT = exports.QADDINT = exports.MULINT = exports.ADDINT = exports.DICTUGETPREVEQ = exports.DICTUGETPREV = exports.DICTUGETNEXTEQ = exports.DICTUGETNEXT = exports.DICTIGETPREVEQ = exports.DICTIGETPREV = exports.DICTIGETNEXTEQ = exports.DICTIGETNEXT = exports.DICTGETPREVEQ = exports.DICTGETPREV = exports.DICTGETNEXTEQ = exports.DICTGETNEXT = exports.THROWARGANYIFNOT = exports.THROWANYIFNOT = exports.THROWARGANY = exports.THROWANY = void 0;
exports.PUSHREFSLICE = exports.PUSHREF = exports.GETPARAM = exports.SETGLOB = exports.GETGLOB = exports.BLKDROP2 = exports.BLKPUSH = exports.PUSHPOW2 = exports.INDEX3 = exports.INDEX2 = exports.IFNBITJMP = exports.IFBITJMP = exports.PLDSLICEQ = exports.LDSLICEQ = exports.PLDSLICE = exports.PLDUZ = exports.PLDUQ = exports.PLDIQ = exports.LDUQ = exports.LDIQ = exports.PLDU = exports.PLDI = exports.STURQ = exports.STIRQ = exports.STUQ = exports.STIQ = exports.STUR = exports.STIR = exports.BLESSARGS = exports.SETCONTARGS = exports.REVERSE = exports.BLKSWAP = exports.PU2XC = exports.PUXCPU = exports.PUXC2 = exports.XCPUXC = exports.PUXC = exports.PUSH2 = exports.XCPU = exports.XCHG2 = exports.PUSH3 = exports.XCPU2 = exports.XC2PU = exports.SETINDEXQ = exports.INDEXQ = exports.SETINDEX = exports.EXPLODE = exports.UNPACKFIRST = exports.UNTUPLE = exports.INDEX = void 0;
exports.MULADDRSHIFTR_MOD = exports.MULADDRSHIFT_MOD = exports.RSHIFTC_MOD = exports.RSHIFTR_MOD = exports.RSHIFT_MOD = exports.MODPOW2C_ = exports.MODPOW2R_ = exports.MODPOW2_ = exports.RSHIFTC_ = exports.RSHIFTR_ = exports.RSHIFT_ = exports.ADDRSHIFTC_MOD = exports.ADDRSHIFTR_MOD = exports.ADDRSHIFT_MOD = exports.OVER2 = exports.DUP2 = exports.DROP2 = exports.SWAP2 = exports.RUNVM = exports.SAVEBOTHCTR = exports.SAVEALTCTR = exports.SAVECTR = exports.POPSAVE = exports.SETALTCTR = exports.SETRETCTR = exports.SETCONTCTR = exports.DEBUGSTR = exports.THROWARGANYIF = exports.THROWANYIF = exports.STREF2CONST = exports.STREFCONST = exports.SDBEGINSQ = exports.SDBEGINS = exports.SDBEGINSXQ = exports.SDBEGINSX = exports.PFXDICTSWITCH = exports.DICTPUSHCONST = exports.IFNBITJMPREF = exports.IFBITJMPREF = exports.IFREFELSEREF = exports.IFELSEREF = exports.IFREFELSE = exports.IFNOTJMPREF = exports.IFJMPREF = exports.IFNOTREF = exports.IFREF = exports.JMPREFDATA = exports.JMPREF = exports.CALLREF = exports.PUSHREFCONT = void 0;
exports.BCHKBITSQ_1 = exports.BCHKBITSQ = exports.BCHKBITS_1 = exports.BCHKBITS = exports.QLSHIFT_1 = exports.QLSHIFT = exports.LSHIFT_1 = exports.LSHIFT = exports.LDSLICE_ALT = exports.LDSLICE = exports.LDU_ALT = exports.LDU = exports.LDI_ALT = exports.LDI = exports.STU_ALT = exports.STU = exports.STI_ALT = exports.STI = exports.XCHG3_ALT = exports.XCHG3 = exports.STSLICE_ALT = exports.STSLICE = exports.STREF_ALT = exports.STREF = exports.HASHEXTAR = exports.HASHEXTA = exports.HASHEXTR = exports.HASHEXT = exports.LSHIFT_DIVMODC = exports.LSHIFT_DIVMODR = exports.LSHIFT_DIVMOD = exports.LSHIFT_MODC = exports.LSHIFT_MODR = exports.LSHIFT_MOD = exports.LSHIFT_DIVC = exports.LSHIFT_DIVR = exports.LSHIFT_DIV = exports.LSHIFT_ADDDIVMODC = exports.LSHIFT_ADDDIVMODR = exports.LSHIFT_ADDDIVMOD = exports.MULRSHIFTC_MOD = exports.MULRSHIFTR_MOD = exports.MULRSHIFT_MOD = exports.MULMODPOW2C_ = exports.MULMODPOW2R_ = exports.MULMODPOW2_ = exports.MULRSHIFTC_ = exports.MULRSHIFTR_ = exports.MULRSHIFT_ = exports.MULADDRSHIFTC_MOD = void 0;
exports.convertInstruction = exports.DEBUGMARK = exports.SETCP_SHORT = exports.SETCP = exports.STSLICECONST = exports.PUSHCONT_SHORT = exports.PUSHCONT = exports.PUSHSLICE_LONG_1 = exports.PUSHSLICE_REFS_1 = exports.PUSHSLICE = exports.CALLXARGS_1 = exports.CALLXARGS = exports.POP_LONG = exports.POP = exports.POPCTR = exports.PUSH_LONG = exports.PUSH = exports.PUSHCTR = exports.DEBUG_2 = exports.DUMP = exports.DEBUG_1 = exports.STRDUMP = exports.DEBUG = exports.DUMPSTK = exports.XCHG_3 = exports.XCHG_1 = exports.XCHG_0 = exports.XCHG_LONG = exports.PUSHINT_LONG = exports.PUSHINT_16 = exports.PUSHINT_8 = exports.PUSHINT = exports.THROWIFNOT = exports.THROWIFNOT_SHORT = exports.THROWIF = exports.THROWIF_SHORT = exports.THROW = exports.THROW_SHORT = exports.CALLDICT_LONG = exports.CALLDICT = exports.QRSHIFT_ALT = exports.QRSHIFT_1 = exports.QRSHIFT = exports.RSHIFT_ALT = exports.RSHIFT_1 = exports.RSHIFT = void 0;
// AUTOGENERATED, DO NOT EDIT, generated by ../generator/gen-converter.ts
const $ = __importStar(require("./util"));
const c = __importStar(require("../runtime"));
const PUSHNAN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PUSHNAN(loc);
};
exports.PUSHNAN = PUSHNAN;
const ADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADD(loc);
};
exports.ADD = ADD;
const SUB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUB(loc);
};
exports.SUB = SUB;
const SUBR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBR(loc);
};
exports.SUBR = SUBR;
const NEGATE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NEGATE(loc);
};
exports.NEGATE = NEGATE;
const INC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.INC(loc);
};
exports.INC = INC;
const DEC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DEC(loc);
};
exports.DEC = DEC;
const MUL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MUL(loc);
};
exports.MUL = MUL;
const POW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.POW2(loc);
};
exports.POW2 = POW2;
const AND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.AND(loc);
};
exports.AND = AND;
const OR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.OR(loc);
};
exports.OR = OR;
const XOR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.XOR(loc);
};
exports.XOR = XOR;
const NOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NOT(loc);
};
exports.NOT = NOT;
const FITSX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.FITSX(loc);
};
exports.FITSX = FITSX;
const UFITSX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UFITSX(loc);
};
exports.UFITSX = UFITSX;
const BITSIZE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BITSIZE(loc);
};
exports.BITSIZE = BITSIZE;
const UBITSIZE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UBITSIZE(loc);
};
exports.UBITSIZE = UBITSIZE;
const MIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MIN(loc);
};
exports.MIN = MIN;
const MAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MAX(loc);
};
exports.MAX = MAX;
const MINMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MINMAX(loc);
};
exports.MINMAX = MINMAX;
const ABS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ABS(loc);
};
exports.ABS = ABS;
const QADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADD(loc);
};
exports.QADD = QADD;
const QSUB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QSUB(loc);
};
exports.QSUB = QSUB;
const QSUBR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QSUBR(loc);
};
exports.QSUBR = QSUBR;
const QNEGATE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QNEGATE(loc);
};
exports.QNEGATE = QNEGATE;
const QINC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QINC(loc);
};
exports.QINC = QINC;
const QDEC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDEC(loc);
};
exports.QDEC = QDEC;
const QMUL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMUL(loc);
};
exports.QMUL = QMUL;
const QPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QPOW2(loc);
};
exports.QPOW2 = QPOW2;
const QAND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QAND(loc);
};
exports.QAND = QAND;
const QOR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QOR(loc);
};
exports.QOR = QOR;
const QXOR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QXOR(loc);
};
exports.QXOR = QXOR;
const QNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QNOT(loc);
};
exports.QNOT = QNOT;
const QFITSX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QFITSX(loc);
};
exports.QFITSX = QFITSX;
const QUFITSX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QUFITSX(loc);
};
exports.QUFITSX = QUFITSX;
const QBITSIZE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QBITSIZE(loc);
};
exports.QBITSIZE = QBITSIZE;
const QUBITSIZE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QUBITSIZE(loc);
};
exports.QUBITSIZE = QUBITSIZE;
const QMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMIN(loc);
};
exports.QMIN = QMIN;
const QMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMAX(loc);
};
exports.QMAX = QMAX;
const QMINMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMINMAX(loc);
};
exports.QMINMAX = QMINMAX;
const QABS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QABS(loc);
};
exports.QABS = QABS;
const SGN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SGN(loc);
};
exports.SGN = SGN;
const LESS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LESS(loc);
};
exports.LESS = LESS;
const EQUAL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.EQUAL(loc);
};
exports.EQUAL = EQUAL;
const LEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LEQ(loc);
};
exports.LEQ = LEQ;
const GREATER = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GREATER(loc);
};
exports.GREATER = GREATER;
const NEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NEQ(loc);
};
exports.NEQ = NEQ;
const GEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GEQ(loc);
};
exports.GEQ = GEQ;
const CMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CMP(loc);
};
exports.CMP = CMP;
const ISNAN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ISNAN(loc);
};
exports.ISNAN = ISNAN;
const CHKNAN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CHKNAN(loc);
};
exports.CHKNAN = CHKNAN;
const QSGN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QSGN(loc);
};
exports.QSGN = QSGN;
const QLESS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLESS(loc);
};
exports.QLESS = QLESS;
const QEQUAL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QEQUAL(loc);
};
exports.QEQUAL = QEQUAL;
const QLEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLEQ(loc);
};
exports.QLEQ = QLEQ;
const QGREATER = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QGREATER(loc);
};
exports.QGREATER = QGREATER;
const QNEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QNEQ(loc);
};
exports.QNEQ = QNEQ;
const QGEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QGEQ(loc);
};
exports.QGEQ = QGEQ;
const QCMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QCMP(loc);
};
exports.QCMP = QCMP;
const SEMPTY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SEMPTY(loc);
};
exports.SEMPTY = SEMPTY;
const SDEMPTY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDEMPTY(loc);
};
exports.SDEMPTY = SDEMPTY;
const SREMPTY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SREMPTY(loc);
};
exports.SREMPTY = SREMPTY;
const SDFIRST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDFIRST(loc);
};
exports.SDFIRST = SDFIRST;
const SDLEXCMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDLEXCMP(loc);
};
exports.SDLEXCMP = SDLEXCMP;
const SDEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDEQ(loc);
};
exports.SDEQ = SDEQ;
const SDPFX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDPFX(loc);
};
exports.SDPFX = SDPFX;
const SDPFXREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDPFXREV(loc);
};
exports.SDPFXREV = SDPFXREV;
const SDPPFX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDPPFX(loc);
};
exports.SDPPFX = SDPPFX;
const SDPPFXREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDPPFXREV(loc);
};
exports.SDPPFXREV = SDPPFXREV;
const SDSFX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDSFX(loc);
};
exports.SDSFX = SDSFX;
const SDSFXREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDSFXREV(loc);
};
exports.SDSFXREV = SDSFXREV;
const SDPSFX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDPSFX(loc);
};
exports.SDPSFX = SDPSFX;
const SDPSFXREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDPSFXREV(loc);
};
exports.SDPSFXREV = SDPSFXREV;
const SDCNTLEAD0 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDCNTLEAD0(loc);
};
exports.SDCNTLEAD0 = SDCNTLEAD0;
const SDCNTLEAD1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDCNTLEAD1(loc);
};
exports.SDCNTLEAD1 = SDCNTLEAD1;
const SDCNTTRAIL0 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDCNTTRAIL0(loc);
};
exports.SDCNTTRAIL0 = SDCNTTRAIL0;
const SDCNTTRAIL1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDCNTTRAIL1(loc);
};
exports.SDCNTTRAIL1 = SDCNTTRAIL1;
const NEWC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NEWC(loc);
};
exports.NEWC = NEWC;
const ENDC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ENDC(loc);
};
exports.ENDC = ENDC;
const ENDCST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ENDCST(loc);
};
exports.ENDCST = ENDCST;
const STBREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBREF(loc);
};
exports.STBREF = STBREF;
const STB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STB(loc);
};
exports.STB = STB;
const STREFR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STREFR(loc);
};
exports.STREFR = STREFR;
const STBREFR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBREFR(loc);
};
exports.STBREFR = STBREFR;
const STSLICER = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STSLICER(loc);
};
exports.STSLICER = STSLICER;
const STBR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBR(loc);
};
exports.STBR = STBR;
const STREFQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STREFQ(loc);
};
exports.STREFQ = STREFQ;
const STBREFQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBREFQ(loc);
};
exports.STBREFQ = STBREFQ;
const STSLICEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STSLICEQ(loc);
};
exports.STSLICEQ = STSLICEQ;
const STBQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBQ(loc);
};
exports.STBQ = STBQ;
const STREFRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STREFRQ(loc);
};
exports.STREFRQ = STREFRQ;
const STBREFRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBREFRQ(loc);
};
exports.STBREFRQ = STBREFRQ;
const STSLICERQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STSLICERQ(loc);
};
exports.STSLICERQ = STSLICERQ;
const STBRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STBRQ(loc);
};
exports.STBRQ = STBRQ;
const ENDXC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ENDXC(loc);
};
exports.ENDXC = ENDXC;
const BDEPTH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BDEPTH(loc);
};
exports.BDEPTH = BDEPTH;
const BBITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BBITS(loc);
};
exports.BBITS = BBITS;
const BREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BREFS(loc);
};
exports.BREFS = BREFS;
const BBITREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BBITREFS(loc);
};
exports.BBITREFS = BBITREFS;
const BREMBITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BREMBITS(loc);
};
exports.BREMBITS = BREMBITS;
const BREMREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BREMREFS(loc);
};
exports.BREMREFS = BREMREFS;
const BREMBITREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BREMBITREFS(loc);
};
exports.BREMBITREFS = BREMBITREFS;
const BCHKREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BCHKREFS(loc);
};
exports.BCHKREFS = BCHKREFS;
const BCHKBITREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BCHKBITREFS(loc);
};
exports.BCHKBITREFS = BCHKBITREFS;
const BCHKREFSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BCHKREFSQ(loc);
};
exports.BCHKREFSQ = BCHKREFSQ;
const BCHKBITREFSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BCHKBITREFSQ(loc);
};
exports.BCHKBITREFSQ = BCHKBITREFSQ;
const STZEROES = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STZEROES(loc);
};
exports.STZEROES = STZEROES;
const STONES = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STONES(loc);
};
exports.STONES = STONES;
const STSAME = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STSAME(loc);
};
exports.STSAME = STSAME;
const CTOS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CTOS(loc);
};
exports.CTOS = CTOS;
const ENDS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ENDS(loc);
};
exports.ENDS = ENDS;
const LDREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDREF(loc);
};
exports.LDREF = LDREF;
const LDREFRTOS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDREFRTOS(loc);
};
exports.LDREFRTOS = LDREFRTOS;
const SDCUTFIRST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDCUTFIRST(loc);
};
exports.SDCUTFIRST = SDCUTFIRST;
const SDSKIPFIRST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDSKIPFIRST(loc);
};
exports.SDSKIPFIRST = SDSKIPFIRST;
const SDCUTLAST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDCUTLAST(loc);
};
exports.SDCUTLAST = SDCUTLAST;
const SDSKIPLAST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDSKIPLAST(loc);
};
exports.SDSKIPLAST = SDSKIPLAST;
const SDSUBSTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDSUBSTR(loc);
};
exports.SDSUBSTR = SDSUBSTR;
const SCUTFIRST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCUTFIRST(loc);
};
exports.SCUTFIRST = SCUTFIRST;
const SSKIPFIRST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SSKIPFIRST(loc);
};
exports.SSKIPFIRST = SSKIPFIRST;
const SCUTLAST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCUTLAST(loc);
};
exports.SCUTLAST = SCUTLAST;
const SSKIPLAST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SSKIPLAST(loc);
};
exports.SSKIPLAST = SSKIPLAST;
const SUBSLICE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBSLICE(loc);
};
exports.SUBSLICE = SUBSLICE;
const SPLIT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SPLIT(loc);
};
exports.SPLIT = SPLIT;
const SPLITQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SPLITQ(loc);
};
exports.SPLITQ = SPLITQ;
const XCTOS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.XCTOS(loc);
};
exports.XCTOS = XCTOS;
const XLOAD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.XLOAD(loc);
};
exports.XLOAD = XLOAD;
const XLOADQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.XLOADQ(loc);
};
exports.XLOADQ = XLOADQ;
const SCHKBITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCHKBITS(loc);
};
exports.SCHKBITS = SCHKBITS;
const SCHKREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCHKREFS(loc);
};
exports.SCHKREFS = SCHKREFS;
const SCHKBITREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCHKBITREFS(loc);
};
exports.SCHKBITREFS = SCHKBITREFS;
const SCHKBITSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCHKBITSQ(loc);
};
exports.SCHKBITSQ = SCHKBITSQ;
const SCHKREFSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCHKREFSQ(loc);
};
exports.SCHKREFSQ = SCHKREFSQ;
const SCHKBITREFSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SCHKBITREFSQ(loc);
};
exports.SCHKBITREFSQ = SCHKBITREFSQ;
const PLDREFVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDREFVAR(loc);
};
exports.PLDREFVAR = PLDREFVAR;
const SBITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SBITS(loc);
};
exports.SBITS = SBITS;
const SREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SREFS(loc);
};
exports.SREFS = SREFS;
const SBITREFS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SBITREFS(loc);
};
exports.SBITREFS = SBITREFS;
const LDZEROES = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDZEROES(loc);
};
exports.LDZEROES = LDZEROES;
const LDONES = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDONES(loc);
};
exports.LDONES = LDONES;
const LDSAME = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDSAME(loc);
};
exports.LDSAME = LDSAME;
const SDEPTH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDEPTH(loc);
};
exports.SDEPTH = SDEPTH;
const CDEPTH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CDEPTH(loc);
};
exports.CDEPTH = CDEPTH;
const CLEVEL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CLEVEL(loc);
};
exports.CLEVEL = CLEVEL;
const CLEVELMASK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CLEVELMASK(loc);
};
exports.CLEVELMASK = CLEVELMASK;
const CHASHIX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CHASHIX(loc);
};
exports.CHASHIX = CHASHIX;
const CDEPTHIX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CDEPTHIX(loc);
};
exports.CDEPTHIX = CDEPTHIX;
const EXECUTE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.EXECUTE(loc);
};
exports.EXECUTE = EXECUTE;
const JMPX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.JMPX(loc);
};
exports.JMPX = JMPX;
const RET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RET(loc);
};
exports.RET = RET;
const RETALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RETALT(loc);
};
exports.RETALT = RETALT;
const RETBOOL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RETBOOL(loc);
};
exports.RETBOOL = RETBOOL;
const CALLCC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CALLCC(loc);
};
exports.CALLCC = CALLCC;
const JMPXDATA = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.JMPXDATA(loc);
};
exports.JMPXDATA = JMPXDATA;
const CALLXVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CALLXVARARGS(loc);
};
exports.CALLXVARARGS = CALLXVARARGS;
const RETVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RETVARARGS(loc);
};
exports.RETVARARGS = RETVARARGS;
const JMPXVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.JMPXVARARGS(loc);
};
exports.JMPXVARARGS = JMPXVARARGS;
const CALLCCVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CALLCCVARARGS(loc);
};
exports.CALLCCVARARGS = CALLCCVARARGS;
const RETDATA = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RETDATA(loc);
};
exports.RETDATA = RETDATA;
const RUNVMX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RUNVMX(loc);
};
exports.RUNVMX = RUNVMX;
const IFRET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFRET(loc);
};
exports.IFRET = IFRET;
const IFNOTRET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFNOTRET(loc);
};
exports.IFNOTRET = IFNOTRET;
const IF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IF(loc);
};
exports.IF = IF;
const IFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFNOT(loc);
};
exports.IFNOT = IFNOT;
const IFJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFJMP(loc);
};
exports.IFJMP = IFJMP;
const IFNOTJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFNOTJMP(loc);
};
exports.IFNOTJMP = IFNOTJMP;
const IFELSE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFELSE(loc);
};
exports.IFELSE = IFELSE;
const CONDSEL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CONDSEL(loc);
};
exports.CONDSEL = CONDSEL;
const CONDSELCHK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CONDSELCHK(loc);
};
exports.CONDSELCHK = CONDSELCHK;
const IFRETALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFRETALT(loc);
};
exports.IFRETALT = IFRETALT;
const IFNOTRETALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.IFNOTRETALT(loc);
};
exports.IFNOTRETALT = IFNOTRETALT;
const REPEAT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REPEAT(loc);
};
exports.REPEAT = REPEAT;
const REPEATEND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REPEATEND(loc);
};
exports.REPEATEND = REPEATEND;
const UNTIL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNTIL(loc);
};
exports.UNTIL = UNTIL;
const UNTILEND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNTILEND(loc);
};
exports.UNTILEND = UNTILEND;
const WHILE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.WHILE(loc);
};
exports.WHILE = WHILE;
const WHILEEND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.WHILEEND(loc);
};
exports.WHILEEND = WHILEEND;
const AGAIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.AGAIN(loc);
};
exports.AGAIN = AGAIN;
const AGAINEND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.AGAINEND(loc);
};
exports.AGAINEND = AGAINEND;
const REPEATBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REPEATBRK(loc);
};
exports.REPEATBRK = REPEATBRK;
const REPEATENDBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REPEATENDBRK(loc);
};
exports.REPEATENDBRK = REPEATENDBRK;
const UNTILBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNTILBRK(loc);
};
exports.UNTILBRK = UNTILBRK;
const UNTILENDBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNTILENDBRK(loc);
};
exports.UNTILENDBRK = UNTILENDBRK;
const WHILEBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.WHILEBRK(loc);
};
exports.WHILEBRK = WHILEBRK;
const WHILEENDBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.WHILEENDBRK(loc);
};
exports.WHILEENDBRK = WHILEENDBRK;
const AGAINBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.AGAINBRK(loc);
};
exports.AGAINBRK = AGAINBRK;
const AGAINENDBRK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.AGAINENDBRK(loc);
};
exports.AGAINENDBRK = AGAINENDBRK;
const RETURNVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RETURNVARARGS(loc);
};
exports.RETURNVARARGS = RETURNVARARGS;
const SETCONTVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETCONTVARARGS(loc);
};
exports.SETCONTVARARGS = SETCONTVARARGS;
const SETNUMVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETNUMVARARGS(loc);
};
exports.SETNUMVARARGS = SETNUMVARARGS;
const BLESS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLESS(loc);
};
exports.BLESS = BLESS;
const BLESSVARARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLESSVARARGS(loc);
};
exports.BLESSVARARGS = BLESSVARARGS;
const PUSHCTRX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PUSHCTRX(loc);
};
exports.PUSHCTRX = PUSHCTRX;
const POPCTRX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.POPCTRX(loc);
};
exports.POPCTRX = POPCTRX;
const SETCONTCTRX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETCONTCTRX(loc);
};
exports.SETCONTCTRX = SETCONTCTRX;
const SETCONTCTRMANYX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETCONTCTRMANYX(loc);
};
exports.SETCONTCTRMANYX = SETCONTCTRMANYX;
const BOOLAND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BOOLAND(loc);
};
exports.BOOLAND = BOOLAND;
const BOOLOR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BOOLOR(loc);
};
exports.BOOLOR = BOOLOR;
const COMPOSBOTH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.COMPOSBOTH(loc);
};
exports.COMPOSBOTH = COMPOSBOTH;
const ATEXIT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ATEXIT(loc);
};
exports.ATEXIT = ATEXIT;
const ATEXITALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ATEXITALT(loc);
};
exports.ATEXITALT = ATEXITALT;
const SETEXITALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETEXITALT(loc);
};
exports.SETEXITALT = SETEXITALT;
const THENRET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THENRET(loc);
};
exports.THENRET = THENRET;
const THENRETALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THENRETALT(loc);
};
exports.THENRETALT = THENRETALT;
const INVERT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.INVERT(loc);
};
exports.INVERT = INVERT;
const BOOLEVAL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BOOLEVAL(loc);
};
exports.BOOLEVAL = BOOLEVAL;
const SAMEALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SAMEALT(loc);
};
exports.SAMEALT = SAMEALT;
const SAMEALTSAVE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SAMEALTSAVE(loc);
};
exports.SAMEALTSAVE = SAMEALTSAVE;
const TRY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.TRY(loc);
};
exports.TRY = TRY;
const SETCPX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETCPX(loc);
};
exports.SETCPX = SETCPX;
const STDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STDICT(loc);
};
exports.STDICT = STDICT;
const SKIPDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SKIPDICT(loc);
};
exports.SKIPDICT = SKIPDICT;
const LDDICTS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDDICTS(loc);
};
exports.LDDICTS = LDDICTS;
const PLDDICTS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDDICTS(loc);
};
exports.PLDDICTS = PLDDICTS;
const LDDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDDICT(loc);
};
exports.LDDICT = LDDICT;
const PLDDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDDICT(loc);
};
exports.PLDDICT = PLDDICT;
const LDDICTQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDDICTQ(loc);
};
exports.LDDICTQ = LDDICTQ;
const PLDDICTQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDDICTQ(loc);
};
exports.PLDDICTQ = PLDDICTQ;
const PFXDICTSET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTSET(loc);
};
exports.PFXDICTSET = PFXDICTSET;
const PFXDICTREPLACE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTREPLACE(loc);
};
exports.PFXDICTREPLACE = PFXDICTREPLACE;
const PFXDICTADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTADD(loc);
};
exports.PFXDICTADD = PFXDICTADD;
const PFXDICTDEL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTDEL(loc);
};
exports.PFXDICTDEL = PFXDICTDEL;
const PFXDICTGETQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTGETQ(loc);
};
exports.PFXDICTGETQ = PFXDICTGETQ;
const PFXDICTGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTGET(loc);
};
exports.PFXDICTGET = PFXDICTGET;
const PFXDICTGETJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTGETJMP(loc);
};
exports.PFXDICTGETJMP = PFXDICTGETJMP;
const PFXDICTGETEXEC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PFXDICTGETEXEC(loc);
};
exports.PFXDICTGETEXEC = PFXDICTGETEXEC;
const NOP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NOP(loc);
};
exports.NOP = NOP;
const SWAP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SWAP(loc);
};
exports.SWAP = SWAP;
const DUP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DUP(loc);
};
exports.DUP = DUP;
const OVER = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.OVER(loc);
};
exports.OVER = OVER;
const DROP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DROP(loc);
};
exports.DROP = DROP;
const NIP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NIP(loc);
};
exports.NIP = NIP;
const ROT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ROT(loc);
};
exports.ROT = ROT;
const ROTREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ROTREV(loc);
};
exports.ROTREV = ROTREV;
const PICK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PICK(loc);
};
exports.PICK = PICK;
const ROLL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ROLL(loc);
};
exports.ROLL = ROLL;
const ROLLREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ROLLREV(loc);
};
exports.ROLLREV = ROLLREV;
const BLKSWX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLKSWX(loc);
};
exports.BLKSWX = BLKSWX;
const REVX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REVX(loc);
};
exports.REVX = REVX;
const DROPX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DROPX(loc);
};
exports.DROPX = DROPX;
const TUCK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.TUCK(loc);
};
exports.TUCK = TUCK;
const XCHGX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.XCHGX(loc);
};
exports.XCHGX = XCHGX;
const DEPTH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DEPTH(loc);
};
exports.DEPTH = DEPTH;
const CHKDEPTH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CHKDEPTH(loc);
};
exports.CHKDEPTH = CHKDEPTH;
const ONLYTOPX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ONLYTOPX(loc);
};
exports.ONLYTOPX = ONLYTOPX;
const ONLYX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ONLYX(loc);
};
exports.ONLYX = ONLYX;
const ACCEPT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ACCEPT(loc);
};
exports.ACCEPT = ACCEPT;
const SETGASLIMIT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETGASLIMIT(loc);
};
exports.SETGASLIMIT = SETGASLIMIT;
const GASCONSUMED = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GASCONSUMED(loc);
};
exports.GASCONSUMED = GASCONSUMED;
const COMMIT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.COMMIT(loc);
};
exports.COMMIT = COMMIT;
const NOW = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NOW(loc);
};
exports.NOW = NOW;
const BLOCKLT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLOCKLT(loc);
};
exports.BLOCKLT = BLOCKLT;
const LTIME = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LTIME(loc);
};
exports.LTIME = LTIME;
const RANDSEED = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RANDSEED(loc);
};
exports.RANDSEED = RANDSEED;
const BALANCE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BALANCE(loc);
};
exports.BALANCE = BALANCE;
const MYADDR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MYADDR(loc);
};
exports.MYADDR = MYADDR;
const CONFIGROOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CONFIGROOT(loc);
};
exports.CONFIGROOT = CONFIGROOT;
const MYCODE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MYCODE(loc);
};
exports.MYCODE = MYCODE;
const INCOMINGVALUE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.INCOMINGVALUE(loc);
};
exports.INCOMINGVALUE = INCOMINGVALUE;
const STORAGEFEES = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STORAGEFEES(loc);
};
exports.STORAGEFEES = STORAGEFEES;
const PREVBLOCKSINFOTUPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PREVBLOCKSINFOTUPLE(loc);
};
exports.PREVBLOCKSINFOTUPLE = PREVBLOCKSINFOTUPLE;
const UNPACKEDCONFIGTUPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNPACKEDCONFIGTUPLE(loc);
};
exports.UNPACKEDCONFIGTUPLE = UNPACKEDCONFIGTUPLE;
const DUEPAYMENT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DUEPAYMENT(loc);
};
exports.DUEPAYMENT = DUEPAYMENT;
const CONFIGDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CONFIGDICT(loc);
};
exports.CONFIGDICT = CONFIGDICT;
const CONFIGPARAM = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CONFIGPARAM(loc);
};
exports.CONFIGPARAM = CONFIGPARAM;
const CONFIGOPTPARAM = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CONFIGOPTPARAM(loc);
};
exports.CONFIGOPTPARAM = CONFIGOPTPARAM;
const PREVMCBLOCKS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PREVMCBLOCKS(loc);
};
exports.PREVMCBLOCKS = PREVMCBLOCKS;
const PREVKEYBLOCK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PREVKEYBLOCK(loc);
};
exports.PREVKEYBLOCK = PREVKEYBLOCK;
const PREVMCBLOCKS_100 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PREVMCBLOCKS_100(loc);
};
exports.PREVMCBLOCKS_100 = PREVMCBLOCKS_100;
const GLOBALID = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GLOBALID(loc);
};
exports.GLOBALID = GLOBALID;
const GETGASFEE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETGASFEE(loc);
};
exports.GETGASFEE = GETGASFEE;
const GETSTORAGEFEE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETSTORAGEFEE(loc);
};
exports.GETSTORAGEFEE = GETSTORAGEFEE;
const GETFORWARDFEE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETFORWARDFEE(loc);
};
exports.GETFORWARDFEE = GETFORWARDFEE;
const GETPRECOMPILEDGAS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETPRECOMPILEDGAS(loc);
};
exports.GETPRECOMPILEDGAS = GETPRECOMPILEDGAS;
const GETORIGINALFWDFEE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETORIGINALFWDFEE(loc);
};
exports.GETORIGINALFWDFEE = GETORIGINALFWDFEE;
const GETGASFEESIMPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETGASFEESIMPLE(loc);
};
exports.GETGASFEESIMPLE = GETGASFEESIMPLE;
const GETFORWARDFEESIMPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETFORWARDFEESIMPLE(loc);
};
exports.GETFORWARDFEESIMPLE = GETFORWARDFEESIMPLE;
const GETGLOBVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.GETGLOBVAR(loc);
};
exports.GETGLOBVAR = GETGLOBVAR;
const SETGLOBVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETGLOBVAR(loc);
};
exports.SETGLOBVAR = SETGLOBVAR;
const RANDU256 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RANDU256(loc);
};
exports.RANDU256 = RANDU256;
const RAND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RAND(loc);
};
exports.RAND = RAND;
const SETRAND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETRAND(loc);
};
exports.SETRAND = SETRAND;
const ADDRAND = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDRAND(loc);
};
exports.ADDRAND = ADDRAND;
const HASHCU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.HASHCU(loc);
};
exports.HASHCU = HASHCU;
const HASHSU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.HASHSU(loc);
};
exports.HASHSU = HASHSU;
const SHA256U = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SHA256U(loc);
};
exports.SHA256U = SHA256U;
const CHKSIGNU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CHKSIGNU(loc);
};
exports.CHKSIGNU = CHKSIGNU;
const CHKSIGNS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CHKSIGNS(loc);
};
exports.CHKSIGNS = CHKSIGNS;
const ECRECOVER = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ECRECOVER(loc);
};
exports.ECRECOVER = ECRECOVER;
const SECP256K1_XONLY_PUBKEY_TWEAK_ADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SECP256K1_XONLY_PUBKEY_TWEAK_ADD(loc);
};
exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD = SECP256K1_XONLY_PUBKEY_TWEAK_ADD;
const P256_CHKSIGNU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.P256_CHKSIGNU(loc);
};
exports.P256_CHKSIGNU = P256_CHKSIGNU;
const P256_CHKSIGNS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.P256_CHKSIGNS(loc);
};
exports.P256_CHKSIGNS = P256_CHKSIGNS;
const RIST255_FROMHASH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_FROMHASH(loc);
};
exports.RIST255_FROMHASH = RIST255_FROMHASH;
const RIST255_VALIDATE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_VALIDATE(loc);
};
exports.RIST255_VALIDATE = RIST255_VALIDATE;
const RIST255_ADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_ADD(loc);
};
exports.RIST255_ADD = RIST255_ADD;
const RIST255_SUB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_SUB(loc);
};
exports.RIST255_SUB = RIST255_SUB;
const RIST255_MUL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_MUL(loc);
};
exports.RIST255_MUL = RIST255_MUL;
const RIST255_MULBASE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_MULBASE(loc);
};
exports.RIST255_MULBASE = RIST255_MULBASE;
const RIST255_PUSHL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_PUSHL(loc);
};
exports.RIST255_PUSHL = RIST255_PUSHL;
const RIST255_QVALIDATE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_QVALIDATE(loc);
};
exports.RIST255_QVALIDATE = RIST255_QVALIDATE;
const RIST255_QADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_QADD(loc);
};
exports.RIST255_QADD = RIST255_QADD;
const RIST255_QSUB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_QSUB(loc);
};
exports.RIST255_QSUB = RIST255_QSUB;
const RIST255_QMUL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_QMUL(loc);
};
exports.RIST255_QMUL = RIST255_QMUL;
const RIST255_QMULBASE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RIST255_QMULBASE(loc);
};
exports.RIST255_QMULBASE = RIST255_QMULBASE;
const BLS_VERIFY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_VERIFY(loc);
};
exports.BLS_VERIFY = BLS_VERIFY;
const BLS_AGGREGATE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_AGGREGATE(loc);
};
exports.BLS_AGGREGATE = BLS_AGGREGATE;
const BLS_FASTAGGREGATEVERIFY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_FASTAGGREGATEVERIFY(loc);
};
exports.BLS_FASTAGGREGATEVERIFY = BLS_FASTAGGREGATEVERIFY;
const BLS_AGGREGATEVERIFY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_AGGREGATEVERIFY(loc);
};
exports.BLS_AGGREGATEVERIFY = BLS_AGGREGATEVERIFY;
const BLS_G1_ADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_ADD(loc);
};
exports.BLS_G1_ADD = BLS_G1_ADD;
const BLS_G1_SUB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_SUB(loc);
};
exports.BLS_G1_SUB = BLS_G1_SUB;
const BLS_G1_NEG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_NEG(loc);
};
exports.BLS_G1_NEG = BLS_G1_NEG;
const BLS_G1_MUL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_MUL(loc);
};
exports.BLS_G1_MUL = BLS_G1_MUL;
const BLS_G1_MULTIEXP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_MULTIEXP(loc);
};
exports.BLS_G1_MULTIEXP = BLS_G1_MULTIEXP;
const BLS_G1_ZERO = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_ZERO(loc);
};
exports.BLS_G1_ZERO = BLS_G1_ZERO;
const BLS_MAP_TO_G1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_MAP_TO_G1(loc);
};
exports.BLS_MAP_TO_G1 = BLS_MAP_TO_G1;
const BLS_G1_INGROUP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_INGROUP(loc);
};
exports.BLS_G1_INGROUP = BLS_G1_INGROUP;
const BLS_G1_ISZERO = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G1_ISZERO(loc);
};
exports.BLS_G1_ISZERO = BLS_G1_ISZERO;
const BLS_G2_ADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_ADD(loc);
};
exports.BLS_G2_ADD = BLS_G2_ADD;
const BLS_G2_SUB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_SUB(loc);
};
exports.BLS_G2_SUB = BLS_G2_SUB;
const BLS_G2_NEG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_NEG(loc);
};
exports.BLS_G2_NEG = BLS_G2_NEG;
const BLS_G2_MUL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_MUL(loc);
};
exports.BLS_G2_MUL = BLS_G2_MUL;
const BLS_G2_MULTIEXP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_MULTIEXP(loc);
};
exports.BLS_G2_MULTIEXP = BLS_G2_MULTIEXP;
const BLS_G2_ZERO = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_ZERO(loc);
};
exports.BLS_G2_ZERO = BLS_G2_ZERO;
const BLS_MAP_TO_G2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_MAP_TO_G2(loc);
};
exports.BLS_MAP_TO_G2 = BLS_MAP_TO_G2;
const BLS_G2_INGROUP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_INGROUP(loc);
};
exports.BLS_G2_INGROUP = BLS_G2_INGROUP;
const BLS_G2_ISZERO = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_G2_ISZERO(loc);
};
exports.BLS_G2_ISZERO = BLS_G2_ISZERO;
const BLS_PAIRING = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_PAIRING(loc);
};
exports.BLS_PAIRING = BLS_PAIRING;
const BLS_PUSHR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BLS_PUSHR(loc);
};
exports.BLS_PUSHR = BLS_PUSHR;
const CDATASIZEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CDATASIZEQ(loc);
};
exports.CDATASIZEQ = CDATASIZEQ;
const CDATASIZE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CDATASIZE(loc);
};
exports.CDATASIZE = CDATASIZE;
const SDATASIZEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDATASIZEQ(loc);
};
exports.SDATASIZEQ = SDATASIZEQ;
const SDATASIZE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDATASIZE(loc);
};
exports.SDATASIZE = SDATASIZE;
const LDGRAMS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDGRAMS(loc);
};
exports.LDGRAMS = LDGRAMS;
const LDVARINT16 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDVARINT16(loc);
};
exports.LDVARINT16 = LDVARINT16;
const STGRAMS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STGRAMS(loc);
};
exports.STGRAMS = STGRAMS;
const STVARINT16 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STVARINT16(loc);
};
exports.STVARINT16 = STVARINT16;
const LDVARUINT32 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDVARUINT32(loc);
};
exports.LDVARUINT32 = LDVARUINT32;
const LDVARINT32 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDVARINT32(loc);
};
exports.LDVARINT32 = LDVARINT32;
const STVARUINT32 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STVARUINT32(loc);
};
exports.STVARUINT32 = STVARUINT32;
const STVARINT32 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STVARINT32(loc);
};
exports.STVARINT32 = STVARINT32;
const LDMSGADDR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDMSGADDR(loc);
};
exports.LDMSGADDR = LDMSGADDR;
const LDMSGADDRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDMSGADDRQ(loc);
};
exports.LDMSGADDRQ = LDMSGADDRQ;
const PARSEMSGADDR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PARSEMSGADDR(loc);
};
exports.PARSEMSGADDR = PARSEMSGADDR;
const PARSEMSGADDRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PARSEMSGADDRQ(loc);
};
exports.PARSEMSGADDRQ = PARSEMSGADDRQ;
const REWRITESTDADDR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REWRITESTDADDR(loc);
};
exports.REWRITESTDADDR = REWRITESTDADDR;
const REWRITESTDADDRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REWRITESTDADDRQ(loc);
};
exports.REWRITESTDADDRQ = REWRITESTDADDRQ;
const REWRITEVARADDR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REWRITEVARADDR(loc);
};
exports.REWRITEVARADDR = REWRITEVARADDR;
const REWRITEVARADDRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.REWRITEVARADDRQ(loc);
};
exports.REWRITEVARADDRQ = REWRITEVARADDRQ;
const SENDRAWMSG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SENDRAWMSG(loc);
};
exports.SENDRAWMSG = SENDRAWMSG;
const RAWRESERVE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RAWRESERVE(loc);
};
exports.RAWRESERVE = RAWRESERVE;
const RAWRESERVEX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RAWRESERVEX(loc);
};
exports.RAWRESERVEX = RAWRESERVEX;
const SETCODE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETCODE(loc);
};
exports.SETCODE = SETCODE;
const SETLIBCODE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETLIBCODE(loc);
};
exports.SETLIBCODE = SETLIBCODE;
const CHANGELIB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.CHANGELIB(loc);
};
exports.CHANGELIB = CHANGELIB;
const SENDMSG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SENDMSG(loc);
};
exports.SENDMSG = SENDMSG;
const PUSHNULL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PUSHNULL(loc);
};
exports.PUSHNULL = PUSHNULL;
const ISNULL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ISNULL(loc);
};
exports.ISNULL = ISNULL;
const TUPLEVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.TUPLEVAR(loc);
};
exports.TUPLEVAR = TUPLEVAR;
const INDEXVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.INDEXVAR(loc);
};
exports.INDEXVAR = INDEXVAR;
const UNTUPLEVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNTUPLEVAR(loc);
};
exports.UNTUPLEVAR = UNTUPLEVAR;
const UNPACKFIRSTVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.UNPACKFIRSTVAR(loc);
};
exports.UNPACKFIRSTVAR = UNPACKFIRSTVAR;
const EXPLODEVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.EXPLODEVAR(loc);
};
exports.EXPLODEVAR = EXPLODEVAR;
const SETINDEXVAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETINDEXVAR(loc);
};
exports.SETINDEXVAR = SETINDEXVAR;
const INDEXVARQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.INDEXVARQ(loc);
};
exports.INDEXVARQ = INDEXVARQ;
const SETINDEXVARQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SETINDEXVARQ(loc);
};
exports.SETINDEXVARQ = SETINDEXVARQ;
const TLEN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.TLEN(loc);
};
exports.TLEN = TLEN;
const QTLEN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QTLEN(loc);
};
exports.QTLEN = QTLEN;
const ISTUPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ISTUPLE(loc);
};
exports.ISTUPLE = ISTUPLE;
const LAST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LAST(loc);
};
exports.LAST = LAST;
const TPUSH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.TPUSH(loc);
};
exports.TPUSH = TPUSH;
const TPOP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.TPOP(loc);
};
exports.TPOP = TPOP;
const NULLSWAPIF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLSWAPIF(loc);
};
exports.NULLSWAPIF = NULLSWAPIF;
const NULLSWAPIFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLSWAPIFNOT(loc);
};
exports.NULLSWAPIFNOT = NULLSWAPIFNOT;
const NULLROTRIF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLROTRIF(loc);
};
exports.NULLROTRIF = NULLROTRIF;
const NULLROTRIFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLROTRIFNOT(loc);
};
exports.NULLROTRIFNOT = NULLROTRIFNOT;
const NULLSWAPIF2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLSWAPIF2(loc);
};
exports.NULLSWAPIF2 = NULLSWAPIF2;
const NULLSWAPIFNOT2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLSWAPIFNOT2(loc);
};
exports.NULLSWAPIFNOT2 = NULLSWAPIFNOT2;
const NULLROTRIF2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLROTRIF2(loc);
};
exports.NULLROTRIF2 = NULLROTRIF2;
const NULLROTRIFNOT2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.NULLROTRIFNOT2(loc);
};
exports.NULLROTRIFNOT2 = NULLROTRIFNOT2;
const ADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDDIVMOD(loc);
};
exports.ADDDIVMOD = ADDDIVMOD;
const ADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDDIVMODR(loc);
};
exports.ADDDIVMODR = ADDDIVMODR;
const ADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDDIVMODC(loc);
};
exports.ADDDIVMODC = ADDDIVMODC;
const DIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DIV(loc);
};
exports.DIV = DIV;
const DIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DIVR(loc);
};
exports.DIVR = DIVR;
const DIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DIVC(loc);
};
exports.DIVC = DIVC;
const MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MOD(loc);
};
exports.MOD = MOD;
const MODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MODR(loc);
};
exports.MODR = MODR;
const MODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MODC(loc);
};
exports.MODC = MODC;
const DIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DIVMOD(loc);
};
exports.DIVMOD = DIVMOD;
const DIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DIVMODR(loc);
};
exports.DIVMODR = DIVMODR;
const DIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DIVMODC(loc);
};
exports.DIVMODC = DIVMODC;
const QADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADDDIVMOD(loc);
};
exports.QADDDIVMOD = QADDDIVMOD;
const QADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADDDIVMODR(loc);
};
exports.QADDDIVMODR = QADDDIVMODR;
const QADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADDDIVMODC(loc);
};
exports.QADDDIVMODC = QADDDIVMODC;
const QDIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDIV(loc);
};
exports.QDIV = QDIV;
const QDIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDIVR(loc);
};
exports.QDIVR = QDIVR;
const QDIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDIVC(loc);
};
exports.QDIVC = QDIVC;
const QMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMOD(loc);
};
exports.QMOD = QMOD;
const QMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMODR(loc);
};
exports.QMODR = QMODR;
const QMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMODC(loc);
};
exports.QMODC = QMODC;
const QDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDIVMOD(loc);
};
exports.QDIVMOD = QDIVMOD;
const QDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDIVMODR(loc);
};
exports.QDIVMODR = QDIVMODR;
const QDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QDIVMODC(loc);
};
exports.QDIVMODC = QDIVMODC;
const ADDRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDRSHIFTMOD(loc);
};
exports.ADDRSHIFTMOD = ADDRSHIFTMOD;
const ADDRSHIFTMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDRSHIFTMODR(loc);
};
exports.ADDRSHIFTMODR = ADDRSHIFTMODR;
const ADDRSHIFTMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.ADDRSHIFTMODC(loc);
};
exports.ADDRSHIFTMODC = ADDRSHIFTMODC;
const RSHIFTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFTR(loc);
};
exports.RSHIFTR = RSHIFTR;
const RSHIFTC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFTC(loc);
};
exports.RSHIFTC = RSHIFTC;
const MODPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MODPOW2(loc);
};
exports.MODPOW2 = MODPOW2;
const MODPOW2R = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MODPOW2R(loc);
};
exports.MODPOW2R = MODPOW2R;
const MODPOW2C = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MODPOW2C(loc);
};
exports.MODPOW2C = MODPOW2C;
const RSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFTMOD(loc);
};
exports.RSHIFTMOD = RSHIFTMOD;
const RSHIFTMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFTMODR(loc);
};
exports.RSHIFTMODR = RSHIFTMODR;
const RSHIFTMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFTMODC(loc);
};
exports.RSHIFTMODC = RSHIFTMODC;
const QADDRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADDRSHIFTMOD(loc);
};
exports.QADDRSHIFTMOD = QADDRSHIFTMOD;
const QADDRSHIFTMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADDRSHIFTMODR(loc);
};
exports.QADDRSHIFTMODR = QADDRSHIFTMODR;
const QADDRSHIFTMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QADDRSHIFTMODC(loc);
};
exports.QADDRSHIFTMODC = QADDRSHIFTMODC;
const QRSHIFTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFTR(loc);
};
exports.QRSHIFTR = QRSHIFTR;
const QRSHIFTC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFTC(loc);
};
exports.QRSHIFTC = QRSHIFTC;
const QMODPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMODPOW2(loc);
};
exports.QMODPOW2 = QMODPOW2;
const QMODPOW2R = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMODPOW2R(loc);
};
exports.QMODPOW2R = QMODPOW2R;
const QMODPOW2C = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMODPOW2C(loc);
};
exports.QMODPOW2C = QMODPOW2C;
const QRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFTMOD(loc);
};
exports.QRSHIFTMOD = QRSHIFTMOD;
const QRSHIFTMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFTMODR(loc);
};
exports.QRSHIFTMODR = QRSHIFTMODR;
const QRSHIFTMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFTMODC(loc);
};
exports.QRSHIFTMODC = QRSHIFTMODC;
const MULADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULADDDIVMOD(loc);
};
exports.MULADDDIVMOD = MULADDDIVMOD;
const MULADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULADDDIVMODR(loc);
};
exports.MULADDDIVMODR = MULADDDIVMODR;
const MULADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULADDDIVMODC(loc);
};
exports.MULADDDIVMODC = MULADDDIVMODC;
const MULDIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULDIV(loc);
};
exports.MULDIV = MULDIV;
const MULDIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULDIVR(loc);
};
exports.MULDIVR = MULDIVR;
const MULDIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULDIVC(loc);
};
exports.MULDIVC = MULDIVC;
const MULMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULMOD(loc);
};
exports.MULMOD = MULMOD;
const MULMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULMODR(loc);
};
exports.MULMODR = MULMODR;
const MULMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULMODC(loc);
};
exports.MULMODC = MULMODC;
const MULDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULDIVMOD(loc);
};
exports.MULDIVMOD = MULDIVMOD;
const MULDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULDIVMODR(loc);
};
exports.MULDIVMODR = MULDIVMODR;
const MULDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULDIVMODC(loc);
};
exports.MULDIVMODC = MULDIVMODC;
const QMULADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULADDDIVMOD(loc);
};
exports.QMULADDDIVMOD = QMULADDDIVMOD;
const QMULADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULADDDIVMODR(loc);
};
exports.QMULADDDIVMODR = QMULADDDIVMODR;
const QMULADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULADDDIVMODC(loc);
};
exports.QMULADDDIVMODC = QMULADDDIVMODC;
const QMULDIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULDIV(loc);
};
exports.QMULDIV = QMULDIV;
const QMULDIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULDIVR(loc);
};
exports.QMULDIVR = QMULDIVR;
const QMULDIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULDIVC(loc);
};
exports.QMULDIVC = QMULDIVC;
const QMULMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULMOD(loc);
};
exports.QMULMOD = QMULMOD;
const QMULMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULMODR(loc);
};
exports.QMULMODR = QMULMODR;
const QMULMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULMODC(loc);
};
exports.QMULMODC = QMULMODC;
const QMULDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULDIVMOD(loc);
};
exports.QMULDIVMOD = QMULDIVMOD;
const QMULDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULDIVMODR(loc);
};
exports.QMULDIVMODR = QMULDIVMODR;
const QMULDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULDIVMODC(loc);
};
exports.QMULDIVMODC = QMULDIVMODC;
const MULADDRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULADDRSHIFTMOD(loc);
};
exports.MULADDRSHIFTMOD = MULADDRSHIFTMOD;
const MULADDRSHIFTRMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULADDRSHIFTRMOD(loc);
};
exports.MULADDRSHIFTRMOD = MULADDRSHIFTRMOD;
const MULADDRSHIFTCMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULADDRSHIFTCMOD(loc);
};
exports.MULADDRSHIFTCMOD = MULADDRSHIFTCMOD;
const MULRSHIFT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULRSHIFT(loc);
};
exports.MULRSHIFT = MULRSHIFT;
const MULRSHIFTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULRSHIFTR(loc);
};
exports.MULRSHIFTR = MULRSHIFTR;
const MULRSHIFTC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULRSHIFTC(loc);
};
exports.MULRSHIFTC = MULRSHIFTC;
const MULMODPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULMODPOW2(loc);
};
exports.MULMODPOW2 = MULMODPOW2;
const MULMODPOW2R = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULMODPOW2R(loc);
};
exports.MULMODPOW2R = MULMODPOW2R;
const MULMODPOW2C = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULMODPOW2C(loc);
};
exports.MULMODPOW2C = MULMODPOW2C;
const MULRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULRSHIFTMOD(loc);
};
exports.MULRSHIFTMOD = MULRSHIFTMOD;
const MULRSHIFTRMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULRSHIFTRMOD(loc);
};
exports.MULRSHIFTRMOD = MULRSHIFTRMOD;
const MULRSHIFTCMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.MULRSHIFTCMOD(loc);
};
exports.MULRSHIFTCMOD = MULRSHIFTCMOD;
const QMULADDRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULADDRSHIFTMOD(loc);
};
exports.QMULADDRSHIFTMOD = QMULADDRSHIFTMOD;
const QMULADDRSHIFTRMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULADDRSHIFTRMOD(loc);
};
exports.QMULADDRSHIFTRMOD = QMULADDRSHIFTRMOD;
const QMULADDRSHIFTCMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULADDRSHIFTCMOD(loc);
};
exports.QMULADDRSHIFTCMOD = QMULADDRSHIFTCMOD;
const QMULRSHIFT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULRSHIFT(loc);
};
exports.QMULRSHIFT = QMULRSHIFT;
const QMULRSHIFTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULRSHIFTR(loc);
};
exports.QMULRSHIFTR = QMULRSHIFTR;
const QMULRSHIFTC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULRSHIFTC(loc);
};
exports.QMULRSHIFTC = QMULRSHIFTC;
const QMULMODPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULMODPOW2(loc);
};
exports.QMULMODPOW2 = QMULMODPOW2;
const QMULMODPOW2R = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULMODPOW2R(loc);
};
exports.QMULMODPOW2R = QMULMODPOW2R;
const QMULMODPOW2C = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULMODPOW2C(loc);
};
exports.QMULMODPOW2C = QMULMODPOW2C;
const QMULRSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULRSHIFTMOD(loc);
};
exports.QMULRSHIFTMOD = QMULRSHIFTMOD;
const QMULRSHIFTRMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULRSHIFTRMOD(loc);
};
exports.QMULRSHIFTRMOD = QMULRSHIFTRMOD;
const QMULRSHIFTCMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QMULRSHIFTCMOD(loc);
};
exports.QMULRSHIFTCMOD = QMULRSHIFTCMOD;
const LSHIFTADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTADDDIVMOD(loc);
};
exports.LSHIFTADDDIVMOD = LSHIFTADDDIVMOD;
const LSHIFTADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTADDDIVMODR(loc);
};
exports.LSHIFTADDDIVMODR = LSHIFTADDDIVMODR;
const LSHIFTADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTADDDIVMODC(loc);
};
exports.LSHIFTADDDIVMODC = LSHIFTADDDIVMODC;
const LSHIFTDIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTDIV(loc);
};
exports.LSHIFTDIV = LSHIFTDIV;
const LSHIFTDIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTDIVR(loc);
};
exports.LSHIFTDIVR = LSHIFTDIVR;
const LSHIFTDIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTDIVC(loc);
};
exports.LSHIFTDIVC = LSHIFTDIVC;
const LSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTMOD(loc);
};
exports.LSHIFTMOD = LSHIFTMOD;
const LSHIFTMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTMODR(loc);
};
exports.LSHIFTMODR = LSHIFTMODR;
const LSHIFTMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTMODC(loc);
};
exports.LSHIFTMODC = LSHIFTMODC;
const LSHIFTDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTDIVMOD(loc);
};
exports.LSHIFTDIVMOD = LSHIFTDIVMOD;
const LSHIFTDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTDIVMODR(loc);
};
exports.LSHIFTDIVMODR = LSHIFTDIVMODR;
const LSHIFTDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFTDIVMODC(loc);
};
exports.LSHIFTDIVMODC = LSHIFTDIVMODC;
const QLSHIFTADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTADDDIVMOD(loc);
};
exports.QLSHIFTADDDIVMOD = QLSHIFTADDDIVMOD;
const QLSHIFTADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTADDDIVMODR(loc);
};
exports.QLSHIFTADDDIVMODR = QLSHIFTADDDIVMODR;
const QLSHIFTADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTADDDIVMODC(loc);
};
exports.QLSHIFTADDDIVMODC = QLSHIFTADDDIVMODC;
const QLSHIFTDIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTDIV(loc);
};
exports.QLSHIFTDIV = QLSHIFTDIV;
const QLSHIFTDIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTDIVR(loc);
};
exports.QLSHIFTDIVR = QLSHIFTDIVR;
const QLSHIFTDIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTDIVC(loc);
};
exports.QLSHIFTDIVC = QLSHIFTDIVC;
const QLSHIFTMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTMOD(loc);
};
exports.QLSHIFTMOD = QLSHIFTMOD;
const QLSHIFTMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTMODR(loc);
};
exports.QLSHIFTMODR = QLSHIFTMODR;
const QLSHIFTMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTMODC(loc);
};
exports.QLSHIFTMODC = QLSHIFTMODC;
const QLSHIFTDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTDIVMOD(loc);
};
exports.QLSHIFTDIVMOD = QLSHIFTDIVMOD;
const QLSHIFTDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTDIVMODR(loc);
};
exports.QLSHIFTDIVMODR = QLSHIFTDIVMODR;
const QLSHIFTDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFTDIVMODC(loc);
};
exports.QLSHIFTDIVMODC = QLSHIFTDIVMODC;
const STIX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STIX(loc);
};
exports.STIX = STIX;
const STUX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STUX(loc);
};
exports.STUX = STUX;
const STIXR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STIXR(loc);
};
exports.STIXR = STIXR;
const STUXR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STUXR(loc);
};
exports.STUXR = STUXR;
const STIXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STIXQ(loc);
};
exports.STIXQ = STIXQ;
const STUXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STUXQ(loc);
};
exports.STUXQ = STUXQ;
const STIXRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STIXRQ(loc);
};
exports.STIXRQ = STIXRQ;
const STUXRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STUXRQ(loc);
};
exports.STUXRQ = STUXRQ;
const STILE4 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STILE4(loc);
};
exports.STILE4 = STILE4;
const STULE4 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STULE4(loc);
};
exports.STULE4 = STULE4;
const STILE8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STILE8(loc);
};
exports.STILE8 = STILE8;
const STULE8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STULE8(loc);
};
exports.STULE8 = STULE8;
const LDIX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDIX(loc);
};
exports.LDIX = LDIX;
const LDUX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDUX(loc);
};
exports.LDUX = LDUX;
const PLDIX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDIX(loc);
};
exports.PLDIX = PLDIX;
const PLDUX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDUX(loc);
};
exports.PLDUX = PLDUX;
const LDIXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDIXQ(loc);
};
exports.LDIXQ = LDIXQ;
const LDUXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDUXQ(loc);
};
exports.LDUXQ = LDUXQ;
const PLDIXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDIXQ(loc);
};
exports.PLDIXQ = PLDIXQ;
const PLDUXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDUXQ(loc);
};
exports.PLDUXQ = PLDUXQ;
const LDSLICEX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDSLICEX(loc);
};
exports.LDSLICEX = LDSLICEX;
const PLDSLICEX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDSLICEX(loc);
};
exports.PLDSLICEX = PLDSLICEX;
const LDSLICEXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDSLICEXQ(loc);
};
exports.LDSLICEXQ = LDSLICEXQ;
const PLDSLICEXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDSLICEXQ(loc);
};
exports.PLDSLICEXQ = PLDSLICEXQ;
const LDILE4 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDILE4(loc);
};
exports.LDILE4 = LDILE4;
const LDULE4 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDULE4(loc);
};
exports.LDULE4 = LDULE4;
const LDILE8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDILE8(loc);
};
exports.LDILE8 = LDILE8;
const LDULE8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDULE8(loc);
};
exports.LDULE8 = LDULE8;
const PLDILE4 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDILE4(loc);
};
exports.PLDILE4 = PLDILE4;
const PLDULE4 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDULE4(loc);
};
exports.PLDULE4 = PLDULE4;
const PLDILE8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDILE8(loc);
};
exports.PLDILE8 = PLDILE8;
const PLDULE8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDULE8(loc);
};
exports.PLDULE8 = PLDULE8;
const LDILE4Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDILE4Q(loc);
};
exports.LDILE4Q = LDILE4Q;
const LDULE4Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDULE4Q(loc);
};
exports.LDULE4Q = LDULE4Q;
const LDILE8Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDILE8Q(loc);
};
exports.LDILE8Q = LDILE8Q;
const LDULE8Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LDULE8Q(loc);
};
exports.LDULE8Q = LDULE8Q;
const PLDILE4Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDILE4Q(loc);
};
exports.PLDILE4Q = PLDILE4Q;
const PLDULE4Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDULE4Q(loc);
};
exports.PLDULE4Q = PLDULE4Q;
const PLDILE8Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDILE8Q(loc);
};
exports.PLDILE8Q = PLDILE8Q;
const PLDULE8Q = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.PLDULE8Q(loc);
};
exports.PLDULE8Q = PLDULE8Q;
const DICTIGETJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETJMP(loc);
};
exports.DICTIGETJMP = DICTIGETJMP;
const DICTUGETJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETJMP(loc);
};
exports.DICTUGETJMP = DICTUGETJMP;
const DICTIGETEXEC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETEXEC(loc);
};
exports.DICTIGETEXEC = DICTIGETEXEC;
const DICTUGETEXEC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETEXEC(loc);
};
exports.DICTUGETEXEC = DICTUGETEXEC;
const DICTIGETJMPZ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETJMPZ(loc);
};
exports.DICTIGETJMPZ = DICTIGETJMPZ;
const DICTUGETJMPZ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETJMPZ(loc);
};
exports.DICTUGETJMPZ = DICTUGETJMPZ;
const DICTIGETEXECZ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETEXECZ(loc);
};
exports.DICTIGETEXECZ = DICTIGETEXECZ;
const DICTUGETEXECZ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETEXECZ(loc);
};
exports.DICTUGETEXECZ = DICTUGETEXECZ;
const DICTGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGET(loc);
};
exports.DICTGET = DICTGET;
const DICTGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGETREF(loc);
};
exports.DICTGETREF = DICTGETREF;
const DICTIGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGET(loc);
};
exports.DICTIGET = DICTIGET;
const DICTIGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETREF(loc);
};
exports.DICTIGETREF = DICTIGETREF;
const DICTUGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGET(loc);
};
exports.DICTUGET = DICTUGET;
const DICTUGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETREF(loc);
};
exports.DICTUGETREF = DICTUGETREF;
const DICTSET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSET(loc);
};
exports.DICTSET = DICTSET;
const DICTSETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSETREF(loc);
};
exports.DICTSETREF = DICTSETREF;
const DICTISET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISET(loc);
};
exports.DICTISET = DICTISET;
const DICTISETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISETREF(loc);
};
exports.DICTISETREF = DICTISETREF;
const DICTUSET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSET(loc);
};
exports.DICTUSET = DICTUSET;
const DICTUSETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSETREF(loc);
};
exports.DICTUSETREF = DICTUSETREF;
const DICTSETGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSETGET(loc);
};
exports.DICTSETGET = DICTSETGET;
const DICTSETGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSETGETREF(loc);
};
exports.DICTSETGETREF = DICTSETGETREF;
const DICTISETGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISETGET(loc);
};
exports.DICTISETGET = DICTISETGET;
const DICTISETGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISETGETREF(loc);
};
exports.DICTISETGETREF = DICTISETGETREF;
const DICTUSETGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSETGET(loc);
};
exports.DICTUSETGET = DICTUSETGET;
const DICTUSETGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSETGETREF(loc);
};
exports.DICTUSETGETREF = DICTUSETGETREF;
const DICTREPLACE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREPLACE(loc);
};
exports.DICTREPLACE = DICTREPLACE;
const DICTREPLACEREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREPLACEREF(loc);
};
exports.DICTREPLACEREF = DICTREPLACEREF;
const DICTIREPLACE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREPLACE(loc);
};
exports.DICTIREPLACE = DICTIREPLACE;
const DICTIREPLACEREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREPLACEREF(loc);
};
exports.DICTIREPLACEREF = DICTIREPLACEREF;
const DICTUREPLACE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREPLACE(loc);
};
exports.DICTUREPLACE = DICTUREPLACE;
const DICTUREPLACEREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREPLACEREF(loc);
};
exports.DICTUREPLACEREF = DICTUREPLACEREF;
const DICTREPLACEGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREPLACEGET(loc);
};
exports.DICTREPLACEGET = DICTREPLACEGET;
const DICTREPLACEGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREPLACEGETREF(loc);
};
exports.DICTREPLACEGETREF = DICTREPLACEGETREF;
const DICTIREPLACEGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREPLACEGET(loc);
};
exports.DICTIREPLACEGET = DICTIREPLACEGET;
const DICTIREPLACEGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREPLACEGETREF(loc);
};
exports.DICTIREPLACEGETREF = DICTIREPLACEGETREF;
const DICTUREPLACEGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREPLACEGET(loc);
};
exports.DICTUREPLACEGET = DICTUREPLACEGET;
const DICTUREPLACEGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREPLACEGETREF(loc);
};
exports.DICTUREPLACEGETREF = DICTUREPLACEGETREF;
const DICTADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTADD(loc);
};
exports.DICTADD = DICTADD;
const DICTADDREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTADDREF(loc);
};
exports.DICTADDREF = DICTADDREF;
const DICTIADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIADD(loc);
};
exports.DICTIADD = DICTIADD;
const DICTIADDREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIADDREF(loc);
};
exports.DICTIADDREF = DICTIADDREF;
const DICTUADD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUADD(loc);
};
exports.DICTUADD = DICTUADD;
const DICTUADDREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUADDREF(loc);
};
exports.DICTUADDREF = DICTUADDREF;
const DICTADDGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTADDGET(loc);
};
exports.DICTADDGET = DICTADDGET;
const DICTADDGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTADDGETREF(loc);
};
exports.DICTADDGETREF = DICTADDGETREF;
const DICTIADDGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIADDGET(loc);
};
exports.DICTIADDGET = DICTIADDGET;
const DICTIADDGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIADDGETREF(loc);
};
exports.DICTIADDGETREF = DICTIADDGETREF;
const DICTUADDGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUADDGET(loc);
};
exports.DICTUADDGET = DICTUADDGET;
const DICTUADDGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUADDGETREF(loc);
};
exports.DICTUADDGETREF = DICTUADDGETREF;
const DICTDELGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTDELGET(loc);
};
exports.DICTDELGET = DICTDELGET;
const DICTDELGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTDELGETREF(loc);
};
exports.DICTDELGETREF = DICTDELGETREF;
const DICTIDELGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIDELGET(loc);
};
exports.DICTIDELGET = DICTIDELGET;
const DICTIDELGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIDELGETREF(loc);
};
exports.DICTIDELGETREF = DICTIDELGETREF;
const DICTUDELGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUDELGET(loc);
};
exports.DICTUDELGET = DICTUDELGET;
const DICTUDELGETREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUDELGETREF(loc);
};
exports.DICTUDELGETREF = DICTUDELGETREF;
const DICTMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTMIN(loc);
};
exports.DICTMIN = DICTMIN;
const DICTMINREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTMINREF(loc);
};
exports.DICTMINREF = DICTMINREF;
const DICTIMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIMIN(loc);
};
exports.DICTIMIN = DICTIMIN;
const DICTIMINREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIMINREF(loc);
};
exports.DICTIMINREF = DICTIMINREF;
const DICTUMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUMIN(loc);
};
exports.DICTUMIN = DICTUMIN;
const DICTUMINREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUMINREF(loc);
};
exports.DICTUMINREF = DICTUMINREF;
const DICTMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTMAX(loc);
};
exports.DICTMAX = DICTMAX;
const DICTMAXREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTMAXREF(loc);
};
exports.DICTMAXREF = DICTMAXREF;
const DICTIMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIMAX(loc);
};
exports.DICTIMAX = DICTIMAX;
const DICTIMAXREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIMAXREF(loc);
};
exports.DICTIMAXREF = DICTIMAXREF;
const DICTUMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUMAX(loc);
};
exports.DICTUMAX = DICTUMAX;
const DICTUMAXREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUMAXREF(loc);
};
exports.DICTUMAXREF = DICTUMAXREF;
const DICTREMMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREMMIN(loc);
};
exports.DICTREMMIN = DICTREMMIN;
const DICTREMMINREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREMMINREF(loc);
};
exports.DICTREMMINREF = DICTREMMINREF;
const DICTIREMMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREMMIN(loc);
};
exports.DICTIREMMIN = DICTIREMMIN;
const DICTIREMMINREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREMMINREF(loc);
};
exports.DICTIREMMINREF = DICTIREMMINREF;
const DICTUREMMIN = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREMMIN(loc);
};
exports.DICTUREMMIN = DICTUREMMIN;
const DICTUREMMINREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREMMINREF(loc);
};
exports.DICTUREMMINREF = DICTUREMMINREF;
const DICTREMMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREMMAX(loc);
};
exports.DICTREMMAX = DICTREMMAX;
const DICTREMMAXREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREMMAXREF(loc);
};
exports.DICTREMMAXREF = DICTREMMAXREF;
const DICTIREMMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREMMAX(loc);
};
exports.DICTIREMMAX = DICTIREMMAX;
const DICTIREMMAXREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREMMAXREF(loc);
};
exports.DICTIREMMAXREF = DICTIREMMAXREF;
const DICTUREMMAX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREMMAX(loc);
};
exports.DICTUREMMAX = DICTUREMMAX;
const DICTUREMMAXREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREMMAXREF(loc);
};
exports.DICTUREMMAXREF = DICTUREMMAXREF;
const DICTSETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSETB(loc);
};
exports.DICTSETB = DICTSETB;
const DICTISETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISETB(loc);
};
exports.DICTISETB = DICTISETB;
const DICTUSETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSETB(loc);
};
exports.DICTUSETB = DICTUSETB;
const DICTSETGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSETGETB(loc);
};
exports.DICTSETGETB = DICTSETGETB;
const DICTISETGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISETGETB(loc);
};
exports.DICTISETGETB = DICTISETGETB;
const DICTUSETGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSETGETB(loc);
};
exports.DICTUSETGETB = DICTUSETGETB;
const DICTREPLACEB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREPLACEB(loc);
};
exports.DICTREPLACEB = DICTREPLACEB;
const DICTIREPLACEB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREPLACEB(loc);
};
exports.DICTIREPLACEB = DICTIREPLACEB;
const DICTUREPLACEB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREPLACEB(loc);
};
exports.DICTUREPLACEB = DICTUREPLACEB;
const DICTREPLACEGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTREPLACEGETB(loc);
};
exports.DICTREPLACEGETB = DICTREPLACEGETB;
const DICTIREPLACEGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIREPLACEGETB(loc);
};
exports.DICTIREPLACEGETB = DICTIREPLACEGETB;
const DICTUREPLACEGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUREPLACEGETB(loc);
};
exports.DICTUREPLACEGETB = DICTUREPLACEGETB;
const DICTADDB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTADDB(loc);
};
exports.DICTADDB = DICTADDB;
const DICTIADDB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIADDB(loc);
};
exports.DICTIADDB = DICTIADDB;
const DICTUADDB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUADDB(loc);
};
exports.DICTUADDB = DICTUADDB;
const DICTADDGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTADDGETB(loc);
};
exports.DICTADDGETB = DICTADDGETB;
const DICTIADDGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIADDGETB(loc);
};
exports.DICTIADDGETB = DICTIADDGETB;
const DICTUADDGETB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUADDGETB(loc);
};
exports.DICTUADDGETB = DICTUADDGETB;
const DICTDEL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTDEL(loc);
};
exports.DICTDEL = DICTDEL;
const DICTIDEL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIDEL(loc);
};
exports.DICTIDEL = DICTIDEL;
const DICTUDEL = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUDEL(loc);
};
exports.DICTUDEL = DICTUDEL;
const DICTGETOPTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGETOPTREF(loc);
};
exports.DICTGETOPTREF = DICTGETOPTREF;
const DICTIGETOPTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETOPTREF(loc);
};
exports.DICTIGETOPTREF = DICTIGETOPTREF;
const DICTUGETOPTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETOPTREF(loc);
};
exports.DICTUGETOPTREF = DICTUGETOPTREF;
const DICTSETGETOPTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTSETGETOPTREF(loc);
};
exports.DICTSETGETOPTREF = DICTSETGETOPTREF;
const DICTISETGETOPTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTISETGETOPTREF(loc);
};
exports.DICTISETGETOPTREF = DICTISETGETOPTREF;
const DICTUSETGETOPTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUSETGETOPTREF(loc);
};
exports.DICTUSETGETOPTREF = DICTUSETGETOPTREF;
const SUBDICTGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBDICTGET(loc);
};
exports.SUBDICTGET = SUBDICTGET;
const SUBDICTIGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBDICTIGET(loc);
};
exports.SUBDICTIGET = SUBDICTIGET;
const SUBDICTUGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBDICTUGET(loc);
};
exports.SUBDICTUGET = SUBDICTUGET;
const SUBDICTRPGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBDICTRPGET(loc);
};
exports.SUBDICTRPGET = SUBDICTRPGET;
const SUBDICTIRPGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBDICTIRPGET(loc);
};
exports.SUBDICTIRPGET = SUBDICTIRPGET;
const SUBDICTURPGET = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SUBDICTURPGET(loc);
};
exports.SUBDICTURPGET = SUBDICTURPGET;
const THROWANY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THROWANY(loc);
};
exports.THROWANY = THROWANY;
const THROWARGANY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THROWARGANY(loc);
};
exports.THROWARGANY = THROWARGANY;
const THROWANYIFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THROWANYIFNOT(loc);
};
exports.THROWANYIFNOT = THROWANYIFNOT;
const THROWARGANYIFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THROWARGANYIFNOT(loc);
};
exports.THROWARGANYIFNOT = THROWARGANYIFNOT;
const DICTGETNEXT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGETNEXT(loc);
};
exports.DICTGETNEXT = DICTGETNEXT;
const DICTGETNEXTEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGETNEXTEQ(loc);
};
exports.DICTGETNEXTEQ = DICTGETNEXTEQ;
const DICTGETPREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGETPREV(loc);
};
exports.DICTGETPREV = DICTGETPREV;
const DICTGETPREVEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTGETPREVEQ(loc);
};
exports.DICTGETPREVEQ = DICTGETPREVEQ;
const DICTIGETNEXT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETNEXT(loc);
};
exports.DICTIGETNEXT = DICTIGETNEXT;
const DICTIGETNEXTEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETNEXTEQ(loc);
};
exports.DICTIGETNEXTEQ = DICTIGETNEXTEQ;
const DICTIGETPREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETPREV(loc);
};
exports.DICTIGETPREV = DICTIGETPREV;
const DICTIGETPREVEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTIGETPREVEQ(loc);
};
exports.DICTIGETPREVEQ = DICTIGETPREVEQ;
const DICTUGETNEXT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETNEXT(loc);
};
exports.DICTUGETNEXT = DICTUGETNEXT;
const DICTUGETNEXTEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETNEXTEQ(loc);
};
exports.DICTUGETNEXTEQ = DICTUGETNEXTEQ;
const DICTUGETPREV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETPREV(loc);
};
exports.DICTUGETPREV = DICTUGETPREV;
const DICTUGETPREVEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DICTUGETPREVEQ(loc);
};
exports.DICTUGETPREVEQ = DICTUGETPREVEQ;
const ADDINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.ADDINT(args, loc);
};
exports.ADDINT = ADDINT;
const MULINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULINT(args, loc);
};
exports.MULINT = MULINT;
const QADDINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QADDINT(args, loc);
};
exports.QADDINT = QADDINT;
const QMULINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QMULINT(args, loc);
};
exports.QMULINT = QMULINT;
const EQINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.EQINT(args, loc);
};
exports.EQINT = EQINT;
const LESSINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LESSINT(args, loc);
};
exports.LESSINT = LESSINT;
const GTINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.GTINT(args, loc);
};
exports.GTINT = GTINT;
const NEQINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.NEQINT(args, loc);
};
exports.NEQINT = NEQINT;
const QEQINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QEQINT(args, loc);
};
exports.QEQINT = QEQINT;
const QLESSINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QLESSINT(args, loc);
};
exports.QLESSINT = QLESSINT;
const QGTINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QGTINT(args, loc);
};
exports.QGTINT = QGTINT;
const QNEQINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QNEQINT(args, loc);
};
exports.QNEQINT = QNEQINT;
const PUSHPOW2DEC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PUSHPOW2DEC(args, loc);
};
exports.PUSHPOW2DEC = PUSHPOW2DEC;
const PUSHNEGPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PUSHNEGPOW2(args, loc);
};
exports.PUSHNEGPOW2 = PUSHNEGPOW2;
const FITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.FITS(args, loc);
};
exports.FITS = FITS;
const UFITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.UFITS(args, loc);
};
exports.UFITS = UFITS;
const QFITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QFITS(args, loc);
};
exports.QFITS = QFITS;
const QUFITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QUFITS(args, loc);
};
exports.QUFITS = QUFITS;
const SETCONTCTRMANY = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.SETCONTCTRMANY(args, loc);
};
exports.SETCONTCTRMANY = SETCONTCTRMANY;
const CALLCCARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.CALLCCARGS(args[0], args[1], loc);
};
exports.CALLCCARGS = CALLCCARGS;
const TRYARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.TRYARGS(args[0], args[1], loc);
};
exports.TRYARGS = TRYARGS;
const PLDREFIDX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDREFIDX(args, loc);
};
exports.PLDREFIDX = PLDREFIDX;
const CHASHI = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.CHASHI(args, loc);
};
exports.CHASHI = CHASHI;
const CDEPTHI = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.CDEPTHI(args, loc);
};
exports.CDEPTHI = CDEPTHI;
const JMPDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.JMPDICT(args, loc);
};
exports.JMPDICT = JMPDICT;
const PREPAREDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PREPAREDICT(args, loc);
};
exports.PREPAREDICT = PREPAREDICT;
const THROWARG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWARG(args, loc);
};
exports.THROWARG = THROWARG;
const THROWARGIF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWARGIF(args, loc);
};
exports.THROWARGIF = THROWARGIF;
const THROWARGIFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWARGIFNOT(args, loc);
};
exports.THROWARGIFNOT = THROWARGIFNOT;
const JMPXARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.JMPXARGS(args, loc);
};
exports.JMPXARGS = JMPXARGS;
const RETARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RETARGS(args, loc);
};
exports.RETARGS = RETARGS;
const RETURNARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RETURNARGS(args, loc);
};
exports.RETURNARGS = RETURNARGS;
const BLKDROP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.BLKDROP(args, loc);
};
exports.BLKDROP = BLKDROP;
const TUPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.TUPLE(args, loc);
};
exports.TUPLE = TUPLE;
const INDEX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.INDEX(args, loc);
};
exports.INDEX = INDEX;
const UNTUPLE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.UNTUPLE(args, loc);
};
exports.UNTUPLE = UNTUPLE;
const UNPACKFIRST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.UNPACKFIRST(args, loc);
};
exports.UNPACKFIRST = UNPACKFIRST;
const EXPLODE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.EXPLODE(args, loc);
};
exports.EXPLODE = EXPLODE;
const SETINDEX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.SETINDEX(args, loc);
};
exports.SETINDEX = SETINDEX;
const INDEXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.INDEXQ(args, loc);
};
exports.INDEXQ = INDEXQ;
const SETINDEXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.SETINDEXQ(args, loc);
};
exports.SETINDEXQ = SETINDEXQ;
const XC2PU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.XC2PU(args[0], args[1], args[2], loc);
};
exports.XC2PU = XC2PU;
const XCPU2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.XCPU2(args[0], args[1], args[2], loc);
};
exports.XCPU2 = XCPU2;
const PUSH3 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.PUSH3(args[0], args[1], args[2], loc);
};
exports.PUSH3 = PUSH3;
const XCHG2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoStackArgs(instr);
    return c.XCHG2(args[0], args[1], loc);
};
exports.XCHG2 = XCHG2;
const XCPU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoStackArgs(instr);
    return c.XCPU(args[0], args[1], loc);
};
exports.XCPU = XCPU;
const PUSH2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoStackArgs(instr);
    return c.PUSH2(args[0], args[1], loc);
};
exports.PUSH2 = PUSH2;
const PUXC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoStackArgs(instr);
    return c.PUXC(args[0], args[1], loc);
};
exports.PUXC = PUXC;
const XCPUXC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.XCPUXC(args[0], args[1], args[2], loc);
};
exports.XCPUXC = XCPUXC;
const PUXC2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.PUXC2(args[0], args[1], args[2], loc);
};
exports.PUXC2 = PUXC2;
const PUXCPU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.PUXCPU(args[0], args[1], args[2], loc);
};
exports.PUXCPU = PUXCPU;
const PU2XC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.PU2XC(args[0], args[1], args[2], loc);
};
exports.PU2XC = PU2XC;
const BLKSWAP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.BLKSWAP(args[0], args[1], loc);
};
exports.BLKSWAP = BLKSWAP;
const REVERSE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.REVERSE(args[0], args[1], loc);
};
exports.REVERSE = REVERSE;
const SETCONTARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.SETCONTARGS(args[0], args[1], loc);
};
exports.SETCONTARGS = SETCONTARGS;
const BLESSARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.BLESSARGS(args[0], args[1], loc);
};
exports.BLESSARGS = BLESSARGS;
const STIR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STIR(args, loc);
};
exports.STIR = STIR;
const STUR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STUR(args, loc);
};
exports.STUR = STUR;
const STIQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STIQ(args, loc);
};
exports.STIQ = STIQ;
const STUQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STUQ(args, loc);
};
exports.STUQ = STUQ;
const STIRQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STIRQ(args, loc);
};
exports.STIRQ = STIRQ;
const STURQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STURQ(args, loc);
};
exports.STURQ = STURQ;
const PLDI = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDI(args, loc);
};
exports.PLDI = PLDI;
const PLDU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDU(args, loc);
};
exports.PLDU = PLDU;
const LDIQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDIQ(args, loc);
};
exports.LDIQ = LDIQ;
const LDUQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDUQ(args, loc);
};
exports.LDUQ = LDUQ;
const PLDIQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDIQ(args, loc);
};
exports.PLDIQ = PLDIQ;
const PLDUQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDUQ(args, loc);
};
exports.PLDUQ = PLDUQ;
const PLDUZ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDUZ(args, loc);
};
exports.PLDUZ = PLDUZ;
const PLDSLICE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDSLICE(args, loc);
};
exports.PLDSLICE = PLDSLICE;
const LDSLICEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDSLICEQ(args, loc);
};
exports.LDSLICEQ = LDSLICEQ;
const PLDSLICEQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PLDSLICEQ(args, loc);
};
exports.PLDSLICEQ = PLDSLICEQ;
const IFBITJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.IFBITJMP(args, loc);
};
exports.IFBITJMP = IFBITJMP;
const IFNBITJMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.IFNBITJMP(args, loc);
};
exports.IFNBITJMP = IFNBITJMP;
const INDEX2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.INDEX2(args[0], args[1], loc);
};
exports.INDEX2 = INDEX2;
const INDEX3 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeIntegerArgs(instr);
    return c.INDEX3(args[0], args[1], args[2], loc);
};
exports.INDEX3 = INDEX3;
const PUSHPOW2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PUSHPOW2(args, loc);
};
exports.PUSHPOW2 = PUSHPOW2;
const BLKPUSH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.BLKPUSH(args[0], args[1], loc);
};
exports.BLKPUSH = BLKPUSH;
const BLKDROP2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.BLKDROP2(args[0], args[1], loc);
};
exports.BLKDROP2 = BLKDROP2;
const GETGLOB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.GETGLOB(args, loc);
};
exports.GETGLOB = GETGLOB;
const SETGLOB = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.SETGLOB(args, loc);
};
exports.SETGLOB = SETGLOB;
const GETPARAM = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.GETPARAM(args, loc);
};
exports.GETPARAM = GETPARAM;
const PUSHREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.PUSHREF(args, loc);
};
exports.PUSHREF = PUSHREF;
const PUSHREFSLICE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.PUSHREFSLICE(args, loc);
};
exports.PUSHREFSLICE = PUSHREFSLICE;
const PUSHREFCONT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.PUSHREFCONT(args, loc);
};
exports.PUSHREFCONT = PUSHREFCONT;
const CALLREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.CALLREF(args, loc);
};
exports.CALLREF = CALLREF;
const JMPREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.JMPREF(args, loc);
};
exports.JMPREF = JMPREF;
const JMPREFDATA = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.JMPREFDATA(args, loc);
};
exports.JMPREFDATA = JMPREFDATA;
const IFREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.IFREF(args, loc);
};
exports.IFREF = IFREF;
const IFNOTREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.IFNOTREF(args, loc);
};
exports.IFNOTREF = IFNOTREF;
const IFJMPREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.IFJMPREF(args, loc);
};
exports.IFJMPREF = IFJMPREF;
const IFNOTJMPREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.IFNOTJMPREF(args, loc);
};
exports.IFNOTJMPREF = IFNOTJMPREF;
const IFREFELSE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.IFREFELSE(args, loc);
};
exports.IFREFELSE = IFREFELSE;
const IFELSEREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.IFELSEREF(args, loc);
};
exports.IFELSEREF = IFELSEREF;
const IFREFELSEREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoCodeSliceArgs(ctx, instr);
    return c.IFREFELSEREF(args[0], args[1], loc);
};
exports.IFREFELSEREF = IFREFELSEREF;
const IFBITJMPREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.ifBitArgs(ctx, instr);
    return c.IFBITJMPREF(args[0], args[1], loc);
};
exports.IFBITJMPREF = IFBITJMPREF;
const IFNBITJMPREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.ifBitArgs(ctx, instr);
    return c.IFNBITJMPREF(args[0], args[1], loc);
};
exports.IFNBITJMPREF = IFNBITJMPREF;
const DICTPUSHCONST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.dictpushArg(ctx, instr);
    return c.DICTPUSHCONST(args[0], args[1], loc);
};
exports.DICTPUSHCONST = DICTPUSHCONST;
const PFXDICTSWITCH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.dictpushArg(ctx, instr);
    return c.PFXDICTSWITCH(args[0], args[1], loc);
};
exports.PFXDICTSWITCH = PFXDICTSWITCH;
const SDBEGINSX = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDBEGINSX(loc);
};
exports.SDBEGINSX = SDBEGINSX;
const SDBEGINSXQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SDBEGINSXQ(loc);
};
exports.SDBEGINSXQ = SDBEGINSXQ;
const SDBEGINS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.sliceArg(instr);
    return c.SDBEGINS(args, loc);
};
exports.SDBEGINS = SDBEGINS;
const SDBEGINSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.sliceArg(instr);
    return c.SDBEGINSQ(args, loc);
};
exports.SDBEGINSQ = SDBEGINSQ;
const STREFCONST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.STREFCONST(args, loc);
};
exports.STREFCONST = STREFCONST;
const STREF2CONST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoCodeSliceArgs(ctx, instr);
    return c.STREF2CONST(args[0], args[1], loc);
};
exports.STREF2CONST = STREF2CONST;
const THROWANYIF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THROWANYIF(loc);
};
exports.THROWANYIF = THROWANYIF;
const THROWARGANYIF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.THROWARGANYIF(loc);
};
exports.THROWARGANYIF = THROWARGANYIF;
const DEBUGSTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.debugstrArg(instr);
    return c.DEBUGSTR(args, loc);
};
exports.DEBUGSTR = DEBUGSTR;
const SETCONTCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.SETCONTCTR(args, loc);
};
exports.SETCONTCTR = SETCONTCTR;
const SETRETCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.SETRETCTR(args, loc);
};
exports.SETRETCTR = SETRETCTR;
const SETALTCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.SETALTCTR(args, loc);
};
exports.SETALTCTR = SETALTCTR;
const POPSAVE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.POPSAVE(args, loc);
};
exports.POPSAVE = POPSAVE;
const SAVECTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.SAVECTR(args, loc);
};
exports.SAVECTR = SAVECTR;
const SAVEALTCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.SAVEALTCTR(args, loc);
};
exports.SAVEALTCTR = SAVEALTCTR;
const SAVEBOTHCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.SAVEBOTHCTR(args, loc);
};
exports.SAVEBOTHCTR = SAVEBOTHCTR;
const RUNVM = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RUNVM(args, loc);
};
exports.RUNVM = RUNVM;
const SWAP2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.SWAP2(loc);
};
exports.SWAP2 = SWAP2;
const DROP2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DROP2(loc);
};
exports.DROP2 = DROP2;
const DUP2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DUP2(loc);
};
exports.DUP2 = DUP2;
const OVER2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.OVER2(loc);
};
exports.OVER2 = OVER2;
const ADDRSHIFT_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.ADDRSHIFT_MOD(args, loc);
};
exports.ADDRSHIFT_MOD = ADDRSHIFT_MOD;
const ADDRSHIFTR_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.ADDRSHIFTR_MOD(args, loc);
};
exports.ADDRSHIFTR_MOD = ADDRSHIFTR_MOD;
const ADDRSHIFTC_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.ADDRSHIFTC_MOD(args, loc);
};
exports.ADDRSHIFTC_MOD = ADDRSHIFTC_MOD;
const RSHIFT_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFT_(args, loc);
};
exports.RSHIFT_ = RSHIFT_;
const RSHIFTR_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFTR_(args, loc);
};
exports.RSHIFTR_ = RSHIFTR_;
const RSHIFTC_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFTC_(args, loc);
};
exports.RSHIFTC_ = RSHIFTC_;
const MODPOW2_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MODPOW2_(args, loc);
};
exports.MODPOW2_ = MODPOW2_;
const MODPOW2R_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MODPOW2R_(args, loc);
};
exports.MODPOW2R_ = MODPOW2R_;
const MODPOW2C_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MODPOW2C_(args, loc);
};
exports.MODPOW2C_ = MODPOW2C_;
const RSHIFT_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFT_MOD(args, loc);
};
exports.RSHIFT_MOD = RSHIFT_MOD;
const RSHIFTR_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFTR_MOD(args, loc);
};
exports.RSHIFTR_MOD = RSHIFTR_MOD;
const RSHIFTC_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFTC_MOD(args, loc);
};
exports.RSHIFTC_MOD = RSHIFTC_MOD;
const MULADDRSHIFT_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULADDRSHIFT_MOD(args, loc);
};
exports.MULADDRSHIFT_MOD = MULADDRSHIFT_MOD;
const MULADDRSHIFTR_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULADDRSHIFTR_MOD(args, loc);
};
exports.MULADDRSHIFTR_MOD = MULADDRSHIFTR_MOD;
const MULADDRSHIFTC_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULADDRSHIFTC_MOD(args, loc);
};
exports.MULADDRSHIFTC_MOD = MULADDRSHIFTC_MOD;
const MULRSHIFT_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULRSHIFT_(args, loc);
};
exports.MULRSHIFT_ = MULRSHIFT_;
const MULRSHIFTR_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULRSHIFTR_(args, loc);
};
exports.MULRSHIFTR_ = MULRSHIFTR_;
const MULRSHIFTC_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULRSHIFTC_(args, loc);
};
exports.MULRSHIFTC_ = MULRSHIFTC_;
const MULMODPOW2_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULMODPOW2_(args, loc);
};
exports.MULMODPOW2_ = MULMODPOW2_;
const MULMODPOW2R_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULMODPOW2R_(args, loc);
};
exports.MULMODPOW2R_ = MULMODPOW2R_;
const MULMODPOW2C_ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULMODPOW2C_(args, loc);
};
exports.MULMODPOW2C_ = MULMODPOW2C_;
const MULRSHIFT_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULRSHIFT_MOD(args, loc);
};
exports.MULRSHIFT_MOD = MULRSHIFT_MOD;
const MULRSHIFTR_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULRSHIFTR_MOD(args, loc);
};
exports.MULRSHIFTR_MOD = MULRSHIFTR_MOD;
const MULRSHIFTC_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.MULRSHIFTC_MOD(args, loc);
};
exports.MULRSHIFTC_MOD = MULRSHIFTC_MOD;
const LSHIFT_ADDDIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_ADDDIVMOD(args, loc);
};
exports.LSHIFT_ADDDIVMOD = LSHIFT_ADDDIVMOD;
const LSHIFT_ADDDIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_ADDDIVMODR(args, loc);
};
exports.LSHIFT_ADDDIVMODR = LSHIFT_ADDDIVMODR;
const LSHIFT_ADDDIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_ADDDIVMODC(args, loc);
};
exports.LSHIFT_ADDDIVMODC = LSHIFT_ADDDIVMODC;
const LSHIFT_DIV = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_DIV(args, loc);
};
exports.LSHIFT_DIV = LSHIFT_DIV;
const LSHIFT_DIVR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_DIVR(args, loc);
};
exports.LSHIFT_DIVR = LSHIFT_DIVR;
const LSHIFT_DIVC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_DIVC(args, loc);
};
exports.LSHIFT_DIVC = LSHIFT_DIVC;
const LSHIFT_MOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_MOD(args, loc);
};
exports.LSHIFT_MOD = LSHIFT_MOD;
const LSHIFT_MODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_MODR(args, loc);
};
exports.LSHIFT_MODR = LSHIFT_MODR;
const LSHIFT_MODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_MODC(args, loc);
};
exports.LSHIFT_MODC = LSHIFT_MODC;
const LSHIFT_DIVMOD = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_DIVMOD(args, loc);
};
exports.LSHIFT_DIVMOD = LSHIFT_DIVMOD;
const LSHIFT_DIVMODR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_DIVMODR(args, loc);
};
exports.LSHIFT_DIVMODR = LSHIFT_DIVMODR;
const LSHIFT_DIVMODC = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_DIVMODC(args, loc);
};
exports.LSHIFT_DIVMODC = LSHIFT_DIVMODC;
const HASHEXT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.HASHEXT(args, loc);
};
exports.HASHEXT = HASHEXT;
const HASHEXTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.HASHEXTR(args, loc);
};
exports.HASHEXTR = HASHEXTR;
const HASHEXTA = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.HASHEXTA(args, loc);
};
exports.HASHEXTA = HASHEXTA;
const HASHEXTAR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.HASHEXTAR(args, loc);
};
exports.HASHEXTAR = HASHEXTAR;
const STREF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STREF(loc);
};
exports.STREF = STREF;
const STREF_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STREF_ALT(loc);
};
exports.STREF_ALT = STREF_ALT;
const STSLICE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STSLICE(loc);
};
exports.STSLICE = STSLICE;
const STSLICE_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STSLICE_ALT(loc);
};
exports.STSLICE_ALT = STSLICE_ALT;
const XCHG3 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.XCHG3(args[0], args[1], args[2], loc);
};
exports.XCHG3 = XCHG3;
const XCHG3_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 3) {
        throw new $.ParseError(loc, "Expected 3 arguments");
    }
    const args = $.threeStackArgs(instr);
    return c.XCHG3_ALT(args[0], args[1], args[2], loc);
};
exports.XCHG3_ALT = XCHG3_ALT;
const STI = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STI(args, loc);
};
exports.STI = STI;
const STI_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STI_ALT(args, loc);
};
exports.STI_ALT = STI_ALT;
const STU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STU(args, loc);
};
exports.STU = STU;
const STU_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.STU_ALT(args, loc);
};
exports.STU_ALT = STU_ALT;
const LDI = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDI(args, loc);
};
exports.LDI = LDI;
const LDI_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDI_ALT(args, loc);
};
exports.LDI_ALT = LDI_ALT;
const LDU = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDU(args, loc);
};
exports.LDU = LDU;
const LDU_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDU_ALT(args, loc);
};
exports.LDU_ALT = LDU_ALT;
const LDSLICE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDSLICE(args, loc);
};
exports.LDSLICE = LDSLICE;
const LDSLICE_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LDSLICE_ALT(args, loc);
};
exports.LDSLICE_ALT = LDSLICE_ALT;
const LSHIFT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.LSHIFT(loc);
};
exports.LSHIFT = LSHIFT;
const LSHIFT_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.LSHIFT_1(args, loc);
};
exports.LSHIFT_1 = LSHIFT_1;
const QLSHIFT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QLSHIFT(loc);
};
exports.QLSHIFT = QLSHIFT;
const QLSHIFT_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QLSHIFT_1(args, loc);
};
exports.QLSHIFT_1 = QLSHIFT_1;
const BCHKBITS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BCHKBITS(loc);
};
exports.BCHKBITS = BCHKBITS;
const BCHKBITS_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.BCHKBITS_1(args, loc);
};
exports.BCHKBITS_1 = BCHKBITS_1;
const BCHKBITSQ = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.BCHKBITSQ(loc);
};
exports.BCHKBITSQ = BCHKBITSQ;
const BCHKBITSQ_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.BCHKBITSQ_1(args, loc);
};
exports.BCHKBITSQ_1 = BCHKBITSQ_1;
const RSHIFT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFT(loc);
};
exports.RSHIFT = RSHIFT;
const RSHIFT_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.RSHIFT_1(args, loc);
};
exports.RSHIFT_1 = RSHIFT_1;
const RSHIFT_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.RSHIFT_ALT(loc);
};
exports.RSHIFT_ALT = RSHIFT_ALT;
const QRSHIFT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFT(loc);
};
exports.QRSHIFT = QRSHIFT;
const QRSHIFT_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.QRSHIFT_1(args, loc);
};
exports.QRSHIFT_1 = QRSHIFT_1;
const QRSHIFT_ALT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.QRSHIFT_ALT(loc);
};
exports.QRSHIFT_ALT = QRSHIFT_ALT;
const CALLDICT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.CALLDICT(args, loc);
};
exports.CALLDICT = CALLDICT;
const CALLDICT_LONG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.CALLDICT_LONG(args, loc);
};
exports.CALLDICT_LONG = CALLDICT_LONG;
const THROW_SHORT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROW_SHORT(args, loc);
};
exports.THROW_SHORT = THROW_SHORT;
const THROW = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROW(args, loc);
};
exports.THROW = THROW;
const THROWIF_SHORT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWIF_SHORT(args, loc);
};
exports.THROWIF_SHORT = THROWIF_SHORT;
const THROWIF = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWIF(args, loc);
};
exports.THROWIF = THROWIF;
const THROWIFNOT_SHORT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWIFNOT_SHORT(args, loc);
};
exports.THROWIFNOT_SHORT = THROWIFNOT_SHORT;
const THROWIFNOT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.THROWIFNOT(args, loc);
};
exports.THROWIFNOT = THROWIFNOT;
const PUSHINT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PUSHINT(args, loc);
};
exports.PUSHINT = PUSHINT;
const PUSHINT_8 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PUSHINT_8(args, loc);
};
exports.PUSHINT_8 = PUSHINT_8;
const PUSHINT_16 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.PUSHINT_16(args, loc);
};
exports.PUSHINT_16 = PUSHINT_16;
const PUSHINT_LONG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleBigIntArg(instr);
    return c.PUSHINT_LONG(args, loc);
};
exports.PUSHINT_LONG = PUSHINT_LONG;
const XCHG_LONG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.XCHG_LONG(args, loc);
};
exports.XCHG_LONG = XCHG_LONG;
const XCHG_0 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.XCHG_0(args, loc);
};
exports.XCHG_0 = XCHG_0;
const XCHG_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoStackArgs(instr);
    return c.XCHG_1(args[0], args[1], loc);
};
exports.XCHG_1 = XCHG_1;
const XCHG_3 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoStackArgs(instr);
    return c.XCHG_3(args[0], args[1], loc);
};
exports.XCHG_3 = XCHG_3;
const DUMPSTK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.DUMPSTK(loc);
};
exports.DUMPSTK = DUMPSTK;
const DEBUG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.DEBUG(args, loc);
};
exports.DEBUG = DEBUG;
const STRDUMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 0) {
        throw new $.ParseError(loc, "Expected 0 arguments");
    }
    return c.STRDUMP(loc);
};
exports.STRDUMP = STRDUMP;
const DEBUG_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.DEBUG_1(args, loc);
};
exports.DEBUG_1 = DEBUG_1;
const DUMP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.DUMP(args, loc);
};
exports.DUMP = DUMP;
const DEBUG_2 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.DEBUG_2(args, loc);
};
exports.DEBUG_2 = DEBUG_2;
const PUSHCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.PUSHCTR(args, loc);
};
exports.PUSHCTR = PUSHCTR;
const PUSH = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.PUSH(args, loc);
};
exports.PUSH = PUSH;
const PUSH_LONG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.PUSH_LONG(args, loc);
};
exports.PUSH_LONG = PUSH_LONG;
const POPCTR = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleControlArg(instr);
    return c.POPCTR(args, loc);
};
exports.POPCTR = POPCTR;
const POP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.POP(args, loc);
};
exports.POP = POP;
const POP_LONG = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleStackArg(instr);
    return c.POP_LONG(args, loc);
};
exports.POP_LONG = POP_LONG;
const CALLXARGS = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.CALLXARGS(args[0], args[1], loc);
};
exports.CALLXARGS = CALLXARGS;
const CALLXARGS_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 2) {
        throw new $.ParseError(loc, "Expected 2 arguments");
    }
    const args = $.twoIntegerArgs(instr);
    return c.CALLXARGS_1(args[0], args[1], loc);
};
exports.CALLXARGS_1 = CALLXARGS_1;
const PUSHSLICE = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.sliceArg(instr);
    return c.PUSHSLICE(args, loc);
};
exports.PUSHSLICE = PUSHSLICE;
const PUSHSLICE_REFS_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.sliceArg(instr);
    return c.PUSHSLICE_REFS_1(args, loc);
};
exports.PUSHSLICE_REFS_1 = PUSHSLICE_REFS_1;
const PUSHSLICE_LONG_1 = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.sliceArg(instr);
    return c.PUSHSLICE_LONG_1(args, loc);
};
exports.PUSHSLICE_LONG_1 = PUSHSLICE_LONG_1;
const PUSHCONT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.PUSHCONT(args, loc);
};
exports.PUSHCONT = PUSHCONT;
const PUSHCONT_SHORT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.codeSliceArg(ctx, instr);
    return c.PUSHCONT_SHORT(args, loc);
};
exports.PUSHCONT_SHORT = PUSHCONT_SHORT;
const STSLICECONST = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.sliceArg(instr);
    return c.STSLICECONST(args, loc);
};
exports.STSLICECONST = STSLICECONST;
const SETCP = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.SETCP(args, loc);
};
exports.SETCP = SETCP;
const SETCP_SHORT = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.SETCP_SHORT(args, loc);
};
exports.SETCP_SHORT = SETCP_SHORT;
const DEBUGMARK = (ctx, instr, loc) => {
    const argsLen = instr.args;
    if (argsLen.length !== 1) {
        throw new $.ParseError(loc, "Expected 1 argument");
    }
    const args = $.singleIntegerArg(instr);
    return c.DEBUGMARK(args, loc);
};
exports.DEBUGMARK = DEBUGMARK;
const convertInstruction = (ctx, instr, loc) => {
    const name = instr.name.name;
    switch (name) {
        case "PUSHNAN":
            return (0, exports.PUSHNAN)(ctx, instr, loc);
        case "ADD":
            return (0, exports.ADD)(ctx, instr, loc);
        case "SUB":
            return (0, exports.SUB)(ctx, instr, loc);
        case "SUBR":
            return (0, exports.SUBR)(ctx, instr, loc);
        case "NEGATE":
            return (0, exports.NEGATE)(ctx, instr, loc);
        case "INC":
            return (0, exports.INC)(ctx, instr, loc);
        case "DEC":
            return (0, exports.DEC)(ctx, instr, loc);
        case "MUL":
            return (0, exports.MUL)(ctx, instr, loc);
        case "POW2":
            return (0, exports.POW2)(ctx, instr, loc);
        case "AND":
            return (0, exports.AND)(ctx, instr, loc);
        case "OR":
            return (0, exports.OR)(ctx, instr, loc);
        case "XOR":
            return (0, exports.XOR)(ctx, instr, loc);
        case "NOT":
            return (0, exports.NOT)(ctx, instr, loc);
        case "FITSX":
            return (0, exports.FITSX)(ctx, instr, loc);
        case "UFITSX":
            return (0, exports.UFITSX)(ctx, instr, loc);
        case "BITSIZE":
            return (0, exports.BITSIZE)(ctx, instr, loc);
        case "UBITSIZE":
            return (0, exports.UBITSIZE)(ctx, instr, loc);
        case "MIN":
            return (0, exports.MIN)(ctx, instr, loc);
        case "MAX":
            return (0, exports.MAX)(ctx, instr, loc);
        case "MINMAX":
            return (0, exports.MINMAX)(ctx, instr, loc);
        case "ABS":
            return (0, exports.ABS)(ctx, instr, loc);
        case "QADD":
            return (0, exports.QADD)(ctx, instr, loc);
        case "QSUB":
            return (0, exports.QSUB)(ctx, instr, loc);
        case "QSUBR":
            return (0, exports.QSUBR)(ctx, instr, loc);
        case "QNEGATE":
            return (0, exports.QNEGATE)(ctx, instr, loc);
        case "QINC":
            return (0, exports.QINC)(ctx, instr, loc);
        case "QDEC":
            return (0, exports.QDEC)(ctx, instr, loc);
        case "QMUL":
            return (0, exports.QMUL)(ctx, instr, loc);
        case "QPOW2":
            return (0, exports.QPOW2)(ctx, instr, loc);
        case "QAND":
            return (0, exports.QAND)(ctx, instr, loc);
        case "QOR":
            return (0, exports.QOR)(ctx, instr, loc);
        case "QXOR":
            return (0, exports.QXOR)(ctx, instr, loc);
        case "QNOT":
            return (0, exports.QNOT)(ctx, instr, loc);
        case "QFITSX":
            return (0, exports.QFITSX)(ctx, instr, loc);
        case "QUFITSX":
            return (0, exports.QUFITSX)(ctx, instr, loc);
        case "QBITSIZE":
            return (0, exports.QBITSIZE)(ctx, instr, loc);
        case "QUBITSIZE":
            return (0, exports.QUBITSIZE)(ctx, instr, loc);
        case "QMIN":
            return (0, exports.QMIN)(ctx, instr, loc);
        case "QMAX":
            return (0, exports.QMAX)(ctx, instr, loc);
        case "QMINMAX":
            return (0, exports.QMINMAX)(ctx, instr, loc);
        case "QABS":
            return (0, exports.QABS)(ctx, instr, loc);
        case "SGN":
            return (0, exports.SGN)(ctx, instr, loc);
        case "LESS":
            return (0, exports.LESS)(ctx, instr, loc);
        case "EQUAL":
            return (0, exports.EQUAL)(ctx, instr, loc);
        case "LEQ":
            return (0, exports.LEQ)(ctx, instr, loc);
        case "GREATER":
            return (0, exports.GREATER)(ctx, instr, loc);
        case "NEQ":
            return (0, exports.NEQ)(ctx, instr, loc);
        case "GEQ":
            return (0, exports.GEQ)(ctx, instr, loc);
        case "CMP":
            return (0, exports.CMP)(ctx, instr, loc);
        case "ISNAN":
            return (0, exports.ISNAN)(ctx, instr, loc);
        case "CHKNAN":
            return (0, exports.CHKNAN)(ctx, instr, loc);
        case "QSGN":
            return (0, exports.QSGN)(ctx, instr, loc);
        case "QLESS":
            return (0, exports.QLESS)(ctx, instr, loc);
        case "QEQUAL":
            return (0, exports.QEQUAL)(ctx, instr, loc);
        case "QLEQ":
            return (0, exports.QLEQ)(ctx, instr, loc);
        case "QGREATER":
            return (0, exports.QGREATER)(ctx, instr, loc);
        case "QNEQ":
            return (0, exports.QNEQ)(ctx, instr, loc);
        case "QGEQ":
            return (0, exports.QGEQ)(ctx, instr, loc);
        case "QCMP":
            return (0, exports.QCMP)(ctx, instr, loc);
        case "SEMPTY":
            return (0, exports.SEMPTY)(ctx, instr, loc);
        case "SDEMPTY":
            return (0, exports.SDEMPTY)(ctx, instr, loc);
        case "SREMPTY":
            return (0, exports.SREMPTY)(ctx, instr, loc);
        case "SDFIRST":
            return (0, exports.SDFIRST)(ctx, instr, loc);
        case "SDLEXCMP":
            return (0, exports.SDLEXCMP)(ctx, instr, loc);
        case "SDEQ":
            return (0, exports.SDEQ)(ctx, instr, loc);
        case "SDPFX":
            return (0, exports.SDPFX)(ctx, instr, loc);
        case "SDPFXREV":
            return (0, exports.SDPFXREV)(ctx, instr, loc);
        case "SDPPFX":
            return (0, exports.SDPPFX)(ctx, instr, loc);
        case "SDPPFXREV":
            return (0, exports.SDPPFXREV)(ctx, instr, loc);
        case "SDSFX":
            return (0, exports.SDSFX)(ctx, instr, loc);
        case "SDSFXREV":
            return (0, exports.SDSFXREV)(ctx, instr, loc);
        case "SDPSFX":
            return (0, exports.SDPSFX)(ctx, instr, loc);
        case "SDPSFXREV":
            return (0, exports.SDPSFXREV)(ctx, instr, loc);
        case "SDCNTLEAD0":
            return (0, exports.SDCNTLEAD0)(ctx, instr, loc);
        case "SDCNTLEAD1":
            return (0, exports.SDCNTLEAD1)(ctx, instr, loc);
        case "SDCNTTRAIL0":
            return (0, exports.SDCNTTRAIL0)(ctx, instr, loc);
        case "SDCNTTRAIL1":
            return (0, exports.SDCNTTRAIL1)(ctx, instr, loc);
        case "NEWC":
            return (0, exports.NEWC)(ctx, instr, loc);
        case "ENDC":
            return (0, exports.ENDC)(ctx, instr, loc);
        case "ENDCST":
            return (0, exports.ENDCST)(ctx, instr, loc);
        case "STBREF":
            return (0, exports.STBREF)(ctx, instr, loc);
        case "STB":
            return (0, exports.STB)(ctx, instr, loc);
        case "STREFR":
            return (0, exports.STREFR)(ctx, instr, loc);
        case "STBREFR":
            return (0, exports.STBREFR)(ctx, instr, loc);
        case "STSLICER":
            return (0, exports.STSLICER)(ctx, instr, loc);
        case "STBR":
            return (0, exports.STBR)(ctx, instr, loc);
        case "STREFQ":
            return (0, exports.STREFQ)(ctx, instr, loc);
        case "STBREFQ":
            return (0, exports.STBREFQ)(ctx, instr, loc);
        case "STSLICEQ":
            return (0, exports.STSLICEQ)(ctx, instr, loc);
        case "STBQ":
            return (0, exports.STBQ)(ctx, instr, loc);
        case "STREFRQ":
            return (0, exports.STREFRQ)(ctx, instr, loc);
        case "STBREFRQ":
            return (0, exports.STBREFRQ)(ctx, instr, loc);
        case "STSLICERQ":
            return (0, exports.STSLICERQ)(ctx, instr, loc);
        case "STBRQ":
            return (0, exports.STBRQ)(ctx, instr, loc);
        case "ENDXC":
            return (0, exports.ENDXC)(ctx, instr, loc);
        case "BDEPTH":
            return (0, exports.BDEPTH)(ctx, instr, loc);
        case "BBITS":
            return (0, exports.BBITS)(ctx, instr, loc);
        case "BREFS":
            return (0, exports.BREFS)(ctx, instr, loc);
        case "BBITREFS":
            return (0, exports.BBITREFS)(ctx, instr, loc);
        case "BREMBITS":
            return (0, exports.BREMBITS)(ctx, instr, loc);
        case "BREMREFS":
            return (0, exports.BREMREFS)(ctx, instr, loc);
        case "BREMBITREFS":
            return (0, exports.BREMBITREFS)(ctx, instr, loc);
        case "BCHKREFS":
            return (0, exports.BCHKREFS)(ctx, instr, loc);
        case "BCHKBITREFS":
            return (0, exports.BCHKBITREFS)(ctx, instr, loc);
        case "BCHKREFSQ":
            return (0, exports.BCHKREFSQ)(ctx, instr, loc);
        case "BCHKBITREFSQ":
            return (0, exports.BCHKBITREFSQ)(ctx, instr, loc);
        case "STZEROES":
            return (0, exports.STZEROES)(ctx, instr, loc);
        case "STONES":
            return (0, exports.STONES)(ctx, instr, loc);
        case "STSAME":
            return (0, exports.STSAME)(ctx, instr, loc);
        case "CTOS":
            return (0, exports.CTOS)(ctx, instr, loc);
        case "ENDS":
            return (0, exports.ENDS)(ctx, instr, loc);
        case "LDREF":
            return (0, exports.LDREF)(ctx, instr, loc);
        case "LDREFRTOS":
            return (0, exports.LDREFRTOS)(ctx, instr, loc);
        case "SDCUTFIRST":
            return (0, exports.SDCUTFIRST)(ctx, instr, loc);
        case "SDSKIPFIRST":
            return (0, exports.SDSKIPFIRST)(ctx, instr, loc);
        case "SDCUTLAST":
            return (0, exports.SDCUTLAST)(ctx, instr, loc);
        case "SDSKIPLAST":
            return (0, exports.SDSKIPLAST)(ctx, instr, loc);
        case "SDSUBSTR":
            return (0, exports.SDSUBSTR)(ctx, instr, loc);
        case "SCUTFIRST":
            return (0, exports.SCUTFIRST)(ctx, instr, loc);
        case "SSKIPFIRST":
            return (0, exports.SSKIPFIRST)(ctx, instr, loc);
        case "SCUTLAST":
            return (0, exports.SCUTLAST)(ctx, instr, loc);
        case "SSKIPLAST":
            return (0, exports.SSKIPLAST)(ctx, instr, loc);
        case "SUBSLICE":
            return (0, exports.SUBSLICE)(ctx, instr, loc);
        case "SPLIT":
            return (0, exports.SPLIT)(ctx, instr, loc);
        case "SPLITQ":
            return (0, exports.SPLITQ)(ctx, instr, loc);
        case "XCTOS":
            return (0, exports.XCTOS)(ctx, instr, loc);
        case "XLOAD":
            return (0, exports.XLOAD)(ctx, instr, loc);
        case "XLOADQ":
            return (0, exports.XLOADQ)(ctx, instr, loc);
        case "SCHKBITS":
            return (0, exports.SCHKBITS)(ctx, instr, loc);
        case "SCHKREFS":
            return (0, exports.SCHKREFS)(ctx, instr, loc);
        case "SCHKBITREFS":
            return (0, exports.SCHKBITREFS)(ctx, instr, loc);
        case "SCHKBITSQ":
            return (0, exports.SCHKBITSQ)(ctx, instr, loc);
        case "SCHKREFSQ":
            return (0, exports.SCHKREFSQ)(ctx, instr, loc);
        case "SCHKBITREFSQ":
            return (0, exports.SCHKBITREFSQ)(ctx, instr, loc);
        case "PLDREFVAR":
            return (0, exports.PLDREFVAR)(ctx, instr, loc);
        case "SBITS":
            return (0, exports.SBITS)(ctx, instr, loc);
        case "SREFS":
            return (0, exports.SREFS)(ctx, instr, loc);
        case "SBITREFS":
            return (0, exports.SBITREFS)(ctx, instr, loc);
        case "LDZEROES":
            return (0, exports.LDZEROES)(ctx, instr, loc);
        case "LDONES":
            return (0, exports.LDONES)(ctx, instr, loc);
        case "LDSAME":
            return (0, exports.LDSAME)(ctx, instr, loc);
        case "SDEPTH":
            return (0, exports.SDEPTH)(ctx, instr, loc);
        case "CDEPTH":
            return (0, exports.CDEPTH)(ctx, instr, loc);
        case "CLEVEL":
            return (0, exports.CLEVEL)(ctx, instr, loc);
        case "CLEVELMASK":
            return (0, exports.CLEVELMASK)(ctx, instr, loc);
        case "CHASHIX":
            return (0, exports.CHASHIX)(ctx, instr, loc);
        case "CDEPTHIX":
            return (0, exports.CDEPTHIX)(ctx, instr, loc);
        case "EXECUTE":
            return (0, exports.EXECUTE)(ctx, instr, loc);
        case "JMPX":
            return (0, exports.JMPX)(ctx, instr, loc);
        case "RET":
            return (0, exports.RET)(ctx, instr, loc);
        case "RETALT":
            return (0, exports.RETALT)(ctx, instr, loc);
        case "RETBOOL":
            return (0, exports.RETBOOL)(ctx, instr, loc);
        case "CALLCC":
            return (0, exports.CALLCC)(ctx, instr, loc);
        case "JMPXDATA":
            return (0, exports.JMPXDATA)(ctx, instr, loc);
        case "CALLXVARARGS":
            return (0, exports.CALLXVARARGS)(ctx, instr, loc);
        case "RETVARARGS":
            return (0, exports.RETVARARGS)(ctx, instr, loc);
        case "JMPXVARARGS":
            return (0, exports.JMPXVARARGS)(ctx, instr, loc);
        case "CALLCCVARARGS":
            return (0, exports.CALLCCVARARGS)(ctx, instr, loc);
        case "RETDATA":
            return (0, exports.RETDATA)(ctx, instr, loc);
        case "RUNVMX":
            return (0, exports.RUNVMX)(ctx, instr, loc);
        case "IFRET":
            return (0, exports.IFRET)(ctx, instr, loc);
        case "IFNOTRET":
            return (0, exports.IFNOTRET)(ctx, instr, loc);
        case "IF":
            return (0, exports.IF)(ctx, instr, loc);
        case "IFNOT":
            return (0, exports.IFNOT)(ctx, instr, loc);
        case "IFJMP":
            return (0, exports.IFJMP)(ctx, instr, loc);
        case "IFNOTJMP":
            return (0, exports.IFNOTJMP)(ctx, instr, loc);
        case "IFELSE":
            return (0, exports.IFELSE)(ctx, instr, loc);
        case "CONDSEL":
            return (0, exports.CONDSEL)(ctx, instr, loc);
        case "CONDSELCHK":
            return (0, exports.CONDSELCHK)(ctx, instr, loc);
        case "IFRETALT":
            return (0, exports.IFRETALT)(ctx, instr, loc);
        case "IFNOTRETALT":
            return (0, exports.IFNOTRETALT)(ctx, instr, loc);
        case "REPEAT":
            return (0, exports.REPEAT)(ctx, instr, loc);
        case "REPEATEND":
            return (0, exports.REPEATEND)(ctx, instr, loc);
        case "UNTIL":
            return (0, exports.UNTIL)(ctx, instr, loc);
        case "UNTILEND":
            return (0, exports.UNTILEND)(ctx, instr, loc);
        case "WHILE":
            return (0, exports.WHILE)(ctx, instr, loc);
        case "WHILEEND":
            return (0, exports.WHILEEND)(ctx, instr, loc);
        case "AGAIN":
            return (0, exports.AGAIN)(ctx, instr, loc);
        case "AGAINEND":
            return (0, exports.AGAINEND)(ctx, instr, loc);
        case "REPEATBRK":
            return (0, exports.REPEATBRK)(ctx, instr, loc);
        case "REPEATENDBRK":
            return (0, exports.REPEATENDBRK)(ctx, instr, loc);
        case "UNTILBRK":
            return (0, exports.UNTILBRK)(ctx, instr, loc);
        case "UNTILENDBRK":
            return (0, exports.UNTILENDBRK)(ctx, instr, loc);
        case "WHILEBRK":
            return (0, exports.WHILEBRK)(ctx, instr, loc);
        case "WHILEENDBRK":
            return (0, exports.WHILEENDBRK)(ctx, instr, loc);
        case "AGAINBRK":
            return (0, exports.AGAINBRK)(ctx, instr, loc);
        case "AGAINENDBRK":
            return (0, exports.AGAINENDBRK)(ctx, instr, loc);
        case "RETURNVARARGS":
            return (0, exports.RETURNVARARGS)(ctx, instr, loc);
        case "SETCONTVARARGS":
            return (0, exports.SETCONTVARARGS)(ctx, instr, loc);
        case "SETNUMVARARGS":
            return (0, exports.SETNUMVARARGS)(ctx, instr, loc);
        case "BLESS":
            return (0, exports.BLESS)(ctx, instr, loc);
        case "BLESSVARARGS":
            return (0, exports.BLESSVARARGS)(ctx, instr, loc);
        case "PUSHCTRX":
            return (0, exports.PUSHCTRX)(ctx, instr, loc);
        case "POPCTRX":
            return (0, exports.POPCTRX)(ctx, instr, loc);
        case "SETCONTCTRX":
            return (0, exports.SETCONTCTRX)(ctx, instr, loc);
        case "SETCONTCTRMANYX":
            return (0, exports.SETCONTCTRMANYX)(ctx, instr, loc);
        case "BOOLAND":
            return (0, exports.BOOLAND)(ctx, instr, loc);
        case "BOOLOR":
            return (0, exports.BOOLOR)(ctx, instr, loc);
        case "COMPOSBOTH":
            return (0, exports.COMPOSBOTH)(ctx, instr, loc);
        case "ATEXIT":
            return (0, exports.ATEXIT)(ctx, instr, loc);
        case "ATEXITALT":
            return (0, exports.ATEXITALT)(ctx, instr, loc);
        case "SETEXITALT":
            return (0, exports.SETEXITALT)(ctx, instr, loc);
        case "THENRET":
            return (0, exports.THENRET)(ctx, instr, loc);
        case "THENRETALT":
            return (0, exports.THENRETALT)(ctx, instr, loc);
        case "INVERT":
            return (0, exports.INVERT)(ctx, instr, loc);
        case "BOOLEVAL":
            return (0, exports.BOOLEVAL)(ctx, instr, loc);
        case "SAMEALT":
            return (0, exports.SAMEALT)(ctx, instr, loc);
        case "SAMEALTSAVE":
            return (0, exports.SAMEALTSAVE)(ctx, instr, loc);
        case "TRY":
            return (0, exports.TRY)(ctx, instr, loc);
        case "SETCPX":
            return (0, exports.SETCPX)(ctx, instr, loc);
        case "STDICT":
            return (0, exports.STDICT)(ctx, instr, loc);
        case "SKIPDICT":
            return (0, exports.SKIPDICT)(ctx, instr, loc);
        case "LDDICTS":
            return (0, exports.LDDICTS)(ctx, instr, loc);
        case "PLDDICTS":
            return (0, exports.PLDDICTS)(ctx, instr, loc);
        case "LDDICT":
            return (0, exports.LDDICT)(ctx, instr, loc);
        case "PLDDICT":
            return (0, exports.PLDDICT)(ctx, instr, loc);
        case "LDDICTQ":
            return (0, exports.LDDICTQ)(ctx, instr, loc);
        case "PLDDICTQ":
            return (0, exports.PLDDICTQ)(ctx, instr, loc);
        case "PFXDICTSET":
            return (0, exports.PFXDICTSET)(ctx, instr, loc);
        case "PFXDICTREPLACE":
            return (0, exports.PFXDICTREPLACE)(ctx, instr, loc);
        case "PFXDICTADD":
            return (0, exports.PFXDICTADD)(ctx, instr, loc);
        case "PFXDICTDEL":
            return (0, exports.PFXDICTDEL)(ctx, instr, loc);
        case "PFXDICTGETQ":
            return (0, exports.PFXDICTGETQ)(ctx, instr, loc);
        case "PFXDICTGET":
            return (0, exports.PFXDICTGET)(ctx, instr, loc);
        case "PFXDICTGETJMP":
            return (0, exports.PFXDICTGETJMP)(ctx, instr, loc);
        case "PFXDICTGETEXEC":
            return (0, exports.PFXDICTGETEXEC)(ctx, instr, loc);
        case "NOP":
            return (0, exports.NOP)(ctx, instr, loc);
        case "SWAP":
            return (0, exports.SWAP)(ctx, instr, loc);
        case "DUP":
            return (0, exports.DUP)(ctx, instr, loc);
        case "OVER":
            return (0, exports.OVER)(ctx, instr, loc);
        case "DROP":
            return (0, exports.DROP)(ctx, instr, loc);
        case "NIP":
            return (0, exports.NIP)(ctx, instr, loc);
        case "ROT":
            return (0, exports.ROT)(ctx, instr, loc);
        case "ROTREV":
            return (0, exports.ROTREV)(ctx, instr, loc);
        case "PICK":
            return (0, exports.PICK)(ctx, instr, loc);
        case "ROLL":
            return (0, exports.ROLL)(ctx, instr, loc);
        case "ROLLREV":
            return (0, exports.ROLLREV)(ctx, instr, loc);
        case "BLKSWX":
            return (0, exports.BLKSWX)(ctx, instr, loc);
        case "REVX":
            return (0, exports.REVX)(ctx, instr, loc);
        case "DROPX":
            return (0, exports.DROPX)(ctx, instr, loc);
        case "TUCK":
            return (0, exports.TUCK)(ctx, instr, loc);
        case "XCHGX":
            return (0, exports.XCHGX)(ctx, instr, loc);
        case "DEPTH":
            return (0, exports.DEPTH)(ctx, instr, loc);
        case "CHKDEPTH":
            return (0, exports.CHKDEPTH)(ctx, instr, loc);
        case "ONLYTOPX":
            return (0, exports.ONLYTOPX)(ctx, instr, loc);
        case "ONLYX":
            return (0, exports.ONLYX)(ctx, instr, loc);
        case "ACCEPT":
            return (0, exports.ACCEPT)(ctx, instr, loc);
        case "SETGASLIMIT":
            return (0, exports.SETGASLIMIT)(ctx, instr, loc);
        case "GASCONSUMED":
            return (0, exports.GASCONSUMED)(ctx, instr, loc);
        case "COMMIT":
            return (0, exports.COMMIT)(ctx, instr, loc);
        case "NOW":
            return (0, exports.NOW)(ctx, instr, loc);
        case "BLOCKLT":
            return (0, exports.BLOCKLT)(ctx, instr, loc);
        case "LTIME":
            return (0, exports.LTIME)(ctx, instr, loc);
        case "RANDSEED":
            return (0, exports.RANDSEED)(ctx, instr, loc);
        case "BALANCE":
            return (0, exports.BALANCE)(ctx, instr, loc);
        case "MYADDR":
            return (0, exports.MYADDR)(ctx, instr, loc);
        case "CONFIGROOT":
            return (0, exports.CONFIGROOT)(ctx, instr, loc);
        case "MYCODE":
            return (0, exports.MYCODE)(ctx, instr, loc);
        case "INCOMINGVALUE":
            return (0, exports.INCOMINGVALUE)(ctx, instr, loc);
        case "STORAGEFEES":
            return (0, exports.STORAGEFEES)(ctx, instr, loc);
        case "PREVBLOCKSINFOTUPLE":
            return (0, exports.PREVBLOCKSINFOTUPLE)(ctx, instr, loc);
        case "UNPACKEDCONFIGTUPLE":
            return (0, exports.UNPACKEDCONFIGTUPLE)(ctx, instr, loc);
        case "DUEPAYMENT":
            return (0, exports.DUEPAYMENT)(ctx, instr, loc);
        case "CONFIGDICT":
            return (0, exports.CONFIGDICT)(ctx, instr, loc);
        case "CONFIGPARAM":
            return (0, exports.CONFIGPARAM)(ctx, instr, loc);
        case "CONFIGOPTPARAM":
            return (0, exports.CONFIGOPTPARAM)(ctx, instr, loc);
        case "PREVMCBLOCKS":
            return (0, exports.PREVMCBLOCKS)(ctx, instr, loc);
        case "PREVKEYBLOCK":
            return (0, exports.PREVKEYBLOCK)(ctx, instr, loc);
        case "PREVMCBLOCKS_100":
            return (0, exports.PREVMCBLOCKS_100)(ctx, instr, loc);
        case "GLOBALID":
            return (0, exports.GLOBALID)(ctx, instr, loc);
        case "GETGASFEE":
            return (0, exports.GETGASFEE)(ctx, instr, loc);
        case "GETSTORAGEFEE":
            return (0, exports.GETSTORAGEFEE)(ctx, instr, loc);
        case "GETFORWARDFEE":
            return (0, exports.GETFORWARDFEE)(ctx, instr, loc);
        case "GETPRECOMPILEDGAS":
            return (0, exports.GETPRECOMPILEDGAS)(ctx, instr, loc);
        case "GETORIGINALFWDFEE":
            return (0, exports.GETORIGINALFWDFEE)(ctx, instr, loc);
        case "GETGASFEESIMPLE":
            return (0, exports.GETGASFEESIMPLE)(ctx, instr, loc);
        case "GETFORWARDFEESIMPLE":
            return (0, exports.GETFORWARDFEESIMPLE)(ctx, instr, loc);
        case "GETGLOBVAR":
            return (0, exports.GETGLOBVAR)(ctx, instr, loc);
        case "SETGLOBVAR":
            return (0, exports.SETGLOBVAR)(ctx, instr, loc);
        case "RANDU256":
            return (0, exports.RANDU256)(ctx, instr, loc);
        case "RAND":
            return (0, exports.RAND)(ctx, instr, loc);
        case "SETRAND":
            return (0, exports.SETRAND)(ctx, instr, loc);
        case "ADDRAND":
            return (0, exports.ADDRAND)(ctx, instr, loc);
        case "HASHCU":
            return (0, exports.HASHCU)(ctx, instr, loc);
        case "HASHSU":
            return (0, exports.HASHSU)(ctx, instr, loc);
        case "SHA256U":
            return (0, exports.SHA256U)(ctx, instr, loc);
        case "CHKSIGNU":
            return (0, exports.CHKSIGNU)(ctx, instr, loc);
        case "CHKSIGNS":
            return (0, exports.CHKSIGNS)(ctx, instr, loc);
        case "ECRECOVER":
            return (0, exports.ECRECOVER)(ctx, instr, loc);
        case "SECP256K1_XONLY_PUBKEY_TWEAK_ADD":
            return (0, exports.SECP256K1_XONLY_PUBKEY_TWEAK_ADD)(ctx, instr, loc);
        case "P256_CHKSIGNU":
            return (0, exports.P256_CHKSIGNU)(ctx, instr, loc);
        case "P256_CHKSIGNS":
            return (0, exports.P256_CHKSIGNS)(ctx, instr, loc);
        case "RIST255_FROMHASH":
            return (0, exports.RIST255_FROMHASH)(ctx, instr, loc);
        case "RIST255_VALIDATE":
            return (0, exports.RIST255_VALIDATE)(ctx, instr, loc);
        case "RIST255_ADD":
            return (0, exports.RIST255_ADD)(ctx, instr, loc);
        case "RIST255_SUB":
            return (0, exports.RIST255_SUB)(ctx, instr, loc);
        case "RIST255_MUL":
            return (0, exports.RIST255_MUL)(ctx, instr, loc);
        case "RIST255_MULBASE":
            return (0, exports.RIST255_MULBASE)(ctx, instr, loc);
        case "RIST255_PUSHL":
            return (0, exports.RIST255_PUSHL)(ctx, instr, loc);
        case "RIST255_QVALIDATE":
            return (0, exports.RIST255_QVALIDATE)(ctx, instr, loc);
        case "RIST255_QADD":
            return (0, exports.RIST255_QADD)(ctx, instr, loc);
        case "RIST255_QSUB":
            return (0, exports.RIST255_QSUB)(ctx, instr, loc);
        case "RIST255_QMUL":
            return (0, exports.RIST255_QMUL)(ctx, instr, loc);
        case "RIST255_QMULBASE":
            return (0, exports.RIST255_QMULBASE)(ctx, instr, loc);
        case "BLS_VERIFY":
            return (0, exports.BLS_VERIFY)(ctx, instr, loc);
        case "BLS_AGGREGATE":
            return (0, exports.BLS_AGGREGATE)(ctx, instr, loc);
        case "BLS_FASTAGGREGATEVERIFY":
            return (0, exports.BLS_FASTAGGREGATEVERIFY)(ctx, instr, loc);
        case "BLS_AGGREGATEVERIFY":
            return (0, exports.BLS_AGGREGATEVERIFY)(ctx, instr, loc);
        case "BLS_G1_ADD":
            return (0, exports.BLS_G1_ADD)(ctx, instr, loc);
        case "BLS_G1_SUB":
            return (0, exports.BLS_G1_SUB)(ctx, instr, loc);
        case "BLS_G1_NEG":
            return (0, exports.BLS_G1_NEG)(ctx, instr, loc);
        case "BLS_G1_MUL":
            return (0, exports.BLS_G1_MUL)(ctx, instr, loc);
        case "BLS_G1_MULTIEXP":
            return (0, exports.BLS_G1_MULTIEXP)(ctx, instr, loc);
        case "BLS_G1_ZERO":
            return (0, exports.BLS_G1_ZERO)(ctx, instr, loc);
        case "BLS_MAP_TO_G1":
            return (0, exports.BLS_MAP_TO_G1)(ctx, instr, loc);
        case "BLS_G1_INGROUP":
            return (0, exports.BLS_G1_INGROUP)(ctx, instr, loc);
        case "BLS_G1_ISZERO":
            return (0, exports.BLS_G1_ISZERO)(ctx, instr, loc);
        case "BLS_G2_ADD":
            return (0, exports.BLS_G2_ADD)(ctx, instr, loc);
        case "BLS_G2_SUB":
            return (0, exports.BLS_G2_SUB)(ctx, instr, loc);
        case "BLS_G2_NEG":
            return (0, exports.BLS_G2_NEG)(ctx, instr, loc);
        case "BLS_G2_MUL":
            return (0, exports.BLS_G2_MUL)(ctx, instr, loc);
        case "BLS_G2_MULTIEXP":
            return (0, exports.BLS_G2_MULTIEXP)(ctx, instr, loc);
        case "BLS_G2_ZERO":
            return (0, exports.BLS_G2_ZERO)(ctx, instr, loc);
        case "BLS_MAP_TO_G2":
            return (0, exports.BLS_MAP_TO_G2)(ctx, instr, loc);
        case "BLS_G2_INGROUP":
            return (0, exports.BLS_G2_INGROUP)(ctx, instr, loc);
        case "BLS_G2_ISZERO":
            return (0, exports.BLS_G2_ISZERO)(ctx, instr, loc);
        case "BLS_PAIRING":
            return (0, exports.BLS_PAIRING)(ctx, instr, loc);
        case "BLS_PUSHR":
            return (0, exports.BLS_PUSHR)(ctx, instr, loc);
        case "CDATASIZEQ":
            return (0, exports.CDATASIZEQ)(ctx, instr, loc);
        case "CDATASIZE":
            return (0, exports.CDATASIZE)(ctx, instr, loc);
        case "SDATASIZEQ":
            return (0, exports.SDATASIZEQ)(ctx, instr, loc);
        case "SDATASIZE":
            return (0, exports.SDATASIZE)(ctx, instr, loc);
        case "LDGRAMS":
            return (0, exports.LDGRAMS)(ctx, instr, loc);
        case "LDVARINT16":
            return (0, exports.LDVARINT16)(ctx, instr, loc);
        case "STGRAMS":
            return (0, exports.STGRAMS)(ctx, instr, loc);
        case "STVARINT16":
            return (0, exports.STVARINT16)(ctx, instr, loc);
        case "LDVARUINT32":
            return (0, exports.LDVARUINT32)(ctx, instr, loc);
        case "LDVARINT32":
            return (0, exports.LDVARINT32)(ctx, instr, loc);
        case "STVARUINT32":
            return (0, exports.STVARUINT32)(ctx, instr, loc);
        case "STVARINT32":
            return (0, exports.STVARINT32)(ctx, instr, loc);
        case "LDMSGADDR":
            return (0, exports.LDMSGADDR)(ctx, instr, loc);
        case "LDMSGADDRQ":
            return (0, exports.LDMSGADDRQ)(ctx, instr, loc);
        case "PARSEMSGADDR":
            return (0, exports.PARSEMSGADDR)(ctx, instr, loc);
        case "PARSEMSGADDRQ":
            return (0, exports.PARSEMSGADDRQ)(ctx, instr, loc);
        case "REWRITESTDADDR":
            return (0, exports.REWRITESTDADDR)(ctx, instr, loc);
        case "REWRITESTDADDRQ":
            return (0, exports.REWRITESTDADDRQ)(ctx, instr, loc);
        case "REWRITEVARADDR":
            return (0, exports.REWRITEVARADDR)(ctx, instr, loc);
        case "REWRITEVARADDRQ":
            return (0, exports.REWRITEVARADDRQ)(ctx, instr, loc);
        case "SENDRAWMSG":
            return (0, exports.SENDRAWMSG)(ctx, instr, loc);
        case "RAWRESERVE":
            return (0, exports.RAWRESERVE)(ctx, instr, loc);
        case "RAWRESERVEX":
            return (0, exports.RAWRESERVEX)(ctx, instr, loc);
        case "SETCODE":
            return (0, exports.SETCODE)(ctx, instr, loc);
        case "SETLIBCODE":
            return (0, exports.SETLIBCODE)(ctx, instr, loc);
        case "CHANGELIB":
            return (0, exports.CHANGELIB)(ctx, instr, loc);
        case "SENDMSG":
            return (0, exports.SENDMSG)(ctx, instr, loc);
        case "PUSHNULL":
            return (0, exports.PUSHNULL)(ctx, instr, loc);
        case "ISNULL":
            return (0, exports.ISNULL)(ctx, instr, loc);
        case "TUPLEVAR":
            return (0, exports.TUPLEVAR)(ctx, instr, loc);
        case "INDEXVAR":
            return (0, exports.INDEXVAR)(ctx, instr, loc);
        case "UNTUPLEVAR":
            return (0, exports.UNTUPLEVAR)(ctx, instr, loc);
        case "UNPACKFIRSTVAR":
            return (0, exports.UNPACKFIRSTVAR)(ctx, instr, loc);
        case "EXPLODEVAR":
            return (0, exports.EXPLODEVAR)(ctx, instr, loc);
        case "SETINDEXVAR":
            return (0, exports.SETINDEXVAR)(ctx, instr, loc);
        case "INDEXVARQ":
            return (0, exports.INDEXVARQ)(ctx, instr, loc);
        case "SETINDEXVARQ":
            return (0, exports.SETINDEXVARQ)(ctx, instr, loc);
        case "TLEN":
            return (0, exports.TLEN)(ctx, instr, loc);
        case "QTLEN":
            return (0, exports.QTLEN)(ctx, instr, loc);
        case "ISTUPLE":
            return (0, exports.ISTUPLE)(ctx, instr, loc);
        case "LAST":
            return (0, exports.LAST)(ctx, instr, loc);
        case "TPUSH":
            return (0, exports.TPUSH)(ctx, instr, loc);
        case "TPOP":
            return (0, exports.TPOP)(ctx, instr, loc);
        case "NULLSWAPIF":
            return (0, exports.NULLSWAPIF)(ctx, instr, loc);
        case "NULLSWAPIFNOT":
            return (0, exports.NULLSWAPIFNOT)(ctx, instr, loc);
        case "NULLROTRIF":
            return (0, exports.NULLROTRIF)(ctx, instr, loc);
        case "NULLROTRIFNOT":
            return (0, exports.NULLROTRIFNOT)(ctx, instr, loc);
        case "NULLSWAPIF2":
            return (0, exports.NULLSWAPIF2)(ctx, instr, loc);
        case "NULLSWAPIFNOT2":
            return (0, exports.NULLSWAPIFNOT2)(ctx, instr, loc);
        case "NULLROTRIF2":
            return (0, exports.NULLROTRIF2)(ctx, instr, loc);
        case "NULLROTRIFNOT2":
            return (0, exports.NULLROTRIFNOT2)(ctx, instr, loc);
        case "ADDDIVMOD":
            return (0, exports.ADDDIVMOD)(ctx, instr, loc);
        case "ADDDIVMODR":
            return (0, exports.ADDDIVMODR)(ctx, instr, loc);
        case "ADDDIVMODC":
            return (0, exports.ADDDIVMODC)(ctx, instr, loc);
        case "DIV":
            return (0, exports.DIV)(ctx, instr, loc);
        case "DIVR":
            return (0, exports.DIVR)(ctx, instr, loc);
        case "DIVC":
            return (0, exports.DIVC)(ctx, instr, loc);
        case "MOD":
            return (0, exports.MOD)(ctx, instr, loc);
        case "MODR":
            return (0, exports.MODR)(ctx, instr, loc);
        case "MODC":
            return (0, exports.MODC)(ctx, instr, loc);
        case "DIVMOD":
            return (0, exports.DIVMOD)(ctx, instr, loc);
        case "DIVMODR":
            return (0, exports.DIVMODR)(ctx, instr, loc);
        case "DIVMODC":
            return (0, exports.DIVMODC)(ctx, instr, loc);
        case "QADDDIVMOD":
            return (0, exports.QADDDIVMOD)(ctx, instr, loc);
        case "QADDDIVMODR":
            return (0, exports.QADDDIVMODR)(ctx, instr, loc);
        case "QADDDIVMODC":
            return (0, exports.QADDDIVMODC)(ctx, instr, loc);
        case "QDIV":
            return (0, exports.QDIV)(ctx, instr, loc);
        case "QDIVR":
            return (0, exports.QDIVR)(ctx, instr, loc);
        case "QDIVC":
            return (0, exports.QDIVC)(ctx, instr, loc);
        case "QMOD":
            return (0, exports.QMOD)(ctx, instr, loc);
        case "QMODR":
            return (0, exports.QMODR)(ctx, instr, loc);
        case "QMODC":
            return (0, exports.QMODC)(ctx, instr, loc);
        case "QDIVMOD":
            return (0, exports.QDIVMOD)(ctx, instr, loc);
        case "QDIVMODR":
            return (0, exports.QDIVMODR)(ctx, instr, loc);
        case "QDIVMODC":
            return (0, exports.QDIVMODC)(ctx, instr, loc);
        case "ADDRSHIFTMOD":
            return (0, exports.ADDRSHIFTMOD)(ctx, instr, loc);
        case "ADDRSHIFTMODR":
            return (0, exports.ADDRSHIFTMODR)(ctx, instr, loc);
        case "ADDRSHIFTMODC":
            return (0, exports.ADDRSHIFTMODC)(ctx, instr, loc);
        case "RSHIFTR":
            return (0, exports.RSHIFTR)(ctx, instr, loc);
        case "RSHIFTC":
            return (0, exports.RSHIFTC)(ctx, instr, loc);
        case "MODPOW2":
            return (0, exports.MODPOW2)(ctx, instr, loc);
        case "MODPOW2R":
            return (0, exports.MODPOW2R)(ctx, instr, loc);
        case "MODPOW2C":
            return (0, exports.MODPOW2C)(ctx, instr, loc);
        case "RSHIFTMOD":
            return (0, exports.RSHIFTMOD)(ctx, instr, loc);
        case "RSHIFTMODR":
            return (0, exports.RSHIFTMODR)(ctx, instr, loc);
        case "RSHIFTMODC":
            return (0, exports.RSHIFTMODC)(ctx, instr, loc);
        case "QADDRSHIFTMOD":
            return (0, exports.QADDRSHIFTMOD)(ctx, instr, loc);
        case "QADDRSHIFTMODR":
            return (0, exports.QADDRSHIFTMODR)(ctx, instr, loc);
        case "QADDRSHIFTMODC":
            return (0, exports.QADDRSHIFTMODC)(ctx, instr, loc);
        case "QRSHIFTR":
            return (0, exports.QRSHIFTR)(ctx, instr, loc);
        case "QRSHIFTC":
            return (0, exports.QRSHIFTC)(ctx, instr, loc);
        case "QMODPOW2":
            return (0, exports.QMODPOW2)(ctx, instr, loc);
        case "QMODPOW2R":
            return (0, exports.QMODPOW2R)(ctx, instr, loc);
        case "QMODPOW2C":
            return (0, exports.QMODPOW2C)(ctx, instr, loc);
        case "QRSHIFTMOD":
            return (0, exports.QRSHIFTMOD)(ctx, instr, loc);
        case "QRSHIFTMODR":
            return (0, exports.QRSHIFTMODR)(ctx, instr, loc);
        case "QRSHIFTMODC":
            return (0, exports.QRSHIFTMODC)(ctx, instr, loc);
        case "MULADDDIVMOD":
            return (0, exports.MULADDDIVMOD)(ctx, instr, loc);
        case "MULADDDIVMODR":
            return (0, exports.MULADDDIVMODR)(ctx, instr, loc);
        case "MULADDDIVMODC":
            return (0, exports.MULADDDIVMODC)(ctx, instr, loc);
        case "MULDIV":
            return (0, exports.MULDIV)(ctx, instr, loc);
        case "MULDIVR":
            return (0, exports.MULDIVR)(ctx, instr, loc);
        case "MULDIVC":
            return (0, exports.MULDIVC)(ctx, instr, loc);
        case "MULMOD":
            return (0, exports.MULMOD)(ctx, instr, loc);
        case "MULMODR":
            return (0, exports.MULMODR)(ctx, instr, loc);
        case "MULMODC":
            return (0, exports.MULMODC)(ctx, instr, loc);
        case "MULDIVMOD":
            return (0, exports.MULDIVMOD)(ctx, instr, loc);
        case "MULDIVMODR":
            return (0, exports.MULDIVMODR)(ctx, instr, loc);
        case "MULDIVMODC":
            return (0, exports.MULDIVMODC)(ctx, instr, loc);
        case "QMULADDDIVMOD":
            return (0, exports.QMULADDDIVMOD)(ctx, instr, loc);
        case "QMULADDDIVMODR":
            return (0, exports.QMULADDDIVMODR)(ctx, instr, loc);
        case "QMULADDDIVMODC":
            return (0, exports.QMULADDDIVMODC)(ctx, instr, loc);
        case "QMULDIV":
            return (0, exports.QMULDIV)(ctx, instr, loc);
        case "QMULDIVR":
            return (0, exports.QMULDIVR)(ctx, instr, loc);
        case "QMULDIVC":
            return (0, exports.QMULDIVC)(ctx, instr, loc);
        case "QMULMOD":
            return (0, exports.QMULMOD)(ctx, instr, loc);
        case "QMULMODR":
            return (0, exports.QMULMODR)(ctx, instr, loc);
        case "QMULMODC":
            return (0, exports.QMULMODC)(ctx, instr, loc);
        case "QMULDIVMOD":
            return (0, exports.QMULDIVMOD)(ctx, instr, loc);
        case "QMULDIVMODR":
            return (0, exports.QMULDIVMODR)(ctx, instr, loc);
        case "QMULDIVMODC":
            return (0, exports.QMULDIVMODC)(ctx, instr, loc);
        case "MULADDRSHIFTMOD":
            return (0, exports.MULADDRSHIFTMOD)(ctx, instr, loc);
        case "MULADDRSHIFTRMOD":
            return (0, exports.MULADDRSHIFTRMOD)(ctx, instr, loc);
        case "MULADDRSHIFTCMOD":
            return (0, exports.MULADDRSHIFTCMOD)(ctx, instr, loc);
        case "MULRSHIFT":
            return (0, exports.MULRSHIFT)(ctx, instr, loc);
        case "MULRSHIFTR":
            return (0, exports.MULRSHIFTR)(ctx, instr, loc);
        case "MULRSHIFTC":
            return (0, exports.MULRSHIFTC)(ctx, instr, loc);
        case "MULMODPOW2":
            return (0, exports.MULMODPOW2)(ctx, instr, loc);
        case "MULMODPOW2R":
            return (0, exports.MULMODPOW2R)(ctx, instr, loc);
        case "MULMODPOW2C":
            return (0, exports.MULMODPOW2C)(ctx, instr, loc);
        case "MULRSHIFTMOD":
            return (0, exports.MULRSHIFTMOD)(ctx, instr, loc);
        case "MULRSHIFTRMOD":
            return (0, exports.MULRSHIFTRMOD)(ctx, instr, loc);
        case "MULRSHIFTCMOD":
            return (0, exports.MULRSHIFTCMOD)(ctx, instr, loc);
        case "QMULADDRSHIFTMOD":
            return (0, exports.QMULADDRSHIFTMOD)(ctx, instr, loc);
        case "QMULADDRSHIFTRMOD":
            return (0, exports.QMULADDRSHIFTRMOD)(ctx, instr, loc);
        case "QMULADDRSHIFTCMOD":
            return (0, exports.QMULADDRSHIFTCMOD)(ctx, instr, loc);
        case "QMULRSHIFT":
            return (0, exports.QMULRSHIFT)(ctx, instr, loc);
        case "QMULRSHIFTR":
            return (0, exports.QMULRSHIFTR)(ctx, instr, loc);
        case "QMULRSHIFTC":
            return (0, exports.QMULRSHIFTC)(ctx, instr, loc);
        case "QMULMODPOW2":
            return (0, exports.QMULMODPOW2)(ctx, instr, loc);
        case "QMULMODPOW2R":
            return (0, exports.QMULMODPOW2R)(ctx, instr, loc);
        case "QMULMODPOW2C":
            return (0, exports.QMULMODPOW2C)(ctx, instr, loc);
        case "QMULRSHIFTMOD":
            return (0, exports.QMULRSHIFTMOD)(ctx, instr, loc);
        case "QMULRSHIFTRMOD":
            return (0, exports.QMULRSHIFTRMOD)(ctx, instr, loc);
        case "QMULRSHIFTCMOD":
            return (0, exports.QMULRSHIFTCMOD)(ctx, instr, loc);
        case "LSHIFTADDDIVMOD":
            return (0, exports.LSHIFTADDDIVMOD)(ctx, instr, loc);
        case "LSHIFTADDDIVMODR":
            return (0, exports.LSHIFTADDDIVMODR)(ctx, instr, loc);
        case "LSHIFTADDDIVMODC":
            return (0, exports.LSHIFTADDDIVMODC)(ctx, instr, loc);
        case "LSHIFTDIV":
            return (0, exports.LSHIFTDIV)(ctx, instr, loc);
        case "LSHIFTDIVR":
            return (0, exports.LSHIFTDIVR)(ctx, instr, loc);
        case "LSHIFTDIVC":
            return (0, exports.LSHIFTDIVC)(ctx, instr, loc);
        case "LSHIFTMOD":
            return (0, exports.LSHIFTMOD)(ctx, instr, loc);
        case "LSHIFTMODR":
            return (0, exports.LSHIFTMODR)(ctx, instr, loc);
        case "LSHIFTMODC":
            return (0, exports.LSHIFTMODC)(ctx, instr, loc);
        case "LSHIFTDIVMOD":
            return (0, exports.LSHIFTDIVMOD)(ctx, instr, loc);
        case "LSHIFTDIVMODR":
            return (0, exports.LSHIFTDIVMODR)(ctx, instr, loc);
        case "LSHIFTDIVMODC":
            return (0, exports.LSHIFTDIVMODC)(ctx, instr, loc);
        case "QLSHIFTADDDIVMOD":
            return (0, exports.QLSHIFTADDDIVMOD)(ctx, instr, loc);
        case "QLSHIFTADDDIVMODR":
            return (0, exports.QLSHIFTADDDIVMODR)(ctx, instr, loc);
        case "QLSHIFTADDDIVMODC":
            return (0, exports.QLSHIFTADDDIVMODC)(ctx, instr, loc);
        case "QLSHIFTDIV":
            return (0, exports.QLSHIFTDIV)(ctx, instr, loc);
        case "QLSHIFTDIVR":
            return (0, exports.QLSHIFTDIVR)(ctx, instr, loc);
        case "QLSHIFTDIVC":
            return (0, exports.QLSHIFTDIVC)(ctx, instr, loc);
        case "QLSHIFTMOD":
            return (0, exports.QLSHIFTMOD)(ctx, instr, loc);
        case "QLSHIFTMODR":
            return (0, exports.QLSHIFTMODR)(ctx, instr, loc);
        case "QLSHIFTMODC":
            return (0, exports.QLSHIFTMODC)(ctx, instr, loc);
        case "QLSHIFTDIVMOD":
            return (0, exports.QLSHIFTDIVMOD)(ctx, instr, loc);
        case "QLSHIFTDIVMODR":
            return (0, exports.QLSHIFTDIVMODR)(ctx, instr, loc);
        case "QLSHIFTDIVMODC":
            return (0, exports.QLSHIFTDIVMODC)(ctx, instr, loc);
        case "STIX":
            return (0, exports.STIX)(ctx, instr, loc);
        case "STUX":
            return (0, exports.STUX)(ctx, instr, loc);
        case "STIXR":
            return (0, exports.STIXR)(ctx, instr, loc);
        case "STUXR":
            return (0, exports.STUXR)(ctx, instr, loc);
        case "STIXQ":
            return (0, exports.STIXQ)(ctx, instr, loc);
        case "STUXQ":
            return (0, exports.STUXQ)(ctx, instr, loc);
        case "STIXRQ":
            return (0, exports.STIXRQ)(ctx, instr, loc);
        case "STUXRQ":
            return (0, exports.STUXRQ)(ctx, instr, loc);
        case "STILE4":
            return (0, exports.STILE4)(ctx, instr, loc);
        case "STULE4":
            return (0, exports.STULE4)(ctx, instr, loc);
        case "STILE8":
            return (0, exports.STILE8)(ctx, instr, loc);
        case "STULE8":
            return (0, exports.STULE8)(ctx, instr, loc);
        case "LDIX":
            return (0, exports.LDIX)(ctx, instr, loc);
        case "LDUX":
            return (0, exports.LDUX)(ctx, instr, loc);
        case "PLDIX":
            return (0, exports.PLDIX)(ctx, instr, loc);
        case "PLDUX":
            return (0, exports.PLDUX)(ctx, instr, loc);
        case "LDIXQ":
            return (0, exports.LDIXQ)(ctx, instr, loc);
        case "LDUXQ":
            return (0, exports.LDUXQ)(ctx, instr, loc);
        case "PLDIXQ":
            return (0, exports.PLDIXQ)(ctx, instr, loc);
        case "PLDUXQ":
            return (0, exports.PLDUXQ)(ctx, instr, loc);
        case "LDSLICEX":
            return (0, exports.LDSLICEX)(ctx, instr, loc);
        case "PLDSLICEX":
            return (0, exports.PLDSLICEX)(ctx, instr, loc);
        case "LDSLICEXQ":
            return (0, exports.LDSLICEXQ)(ctx, instr, loc);
        case "PLDSLICEXQ":
            return (0, exports.PLDSLICEXQ)(ctx, instr, loc);
        case "LDILE4":
            return (0, exports.LDILE4)(ctx, instr, loc);
        case "LDULE4":
            return (0, exports.LDULE4)(ctx, instr, loc);
        case "LDILE8":
            return (0, exports.LDILE8)(ctx, instr, loc);
        case "LDULE8":
            return (0, exports.LDULE8)(ctx, instr, loc);
        case "PLDILE4":
            return (0, exports.PLDILE4)(ctx, instr, loc);
        case "PLDULE4":
            return (0, exports.PLDULE4)(ctx, instr, loc);
        case "PLDILE8":
            return (0, exports.PLDILE8)(ctx, instr, loc);
        case "PLDULE8":
            return (0, exports.PLDULE8)(ctx, instr, loc);
        case "LDILE4Q":
            return (0, exports.LDILE4Q)(ctx, instr, loc);
        case "LDULE4Q":
            return (0, exports.LDULE4Q)(ctx, instr, loc);
        case "LDILE8Q":
            return (0, exports.LDILE8Q)(ctx, instr, loc);
        case "LDULE8Q":
            return (0, exports.LDULE8Q)(ctx, instr, loc);
        case "PLDILE4Q":
            return (0, exports.PLDILE4Q)(ctx, instr, loc);
        case "PLDULE4Q":
            return (0, exports.PLDULE4Q)(ctx, instr, loc);
        case "PLDILE8Q":
            return (0, exports.PLDILE8Q)(ctx, instr, loc);
        case "PLDULE8Q":
            return (0, exports.PLDULE8Q)(ctx, instr, loc);
        case "DICTIGETJMP":
            return (0, exports.DICTIGETJMP)(ctx, instr, loc);
        case "DICTUGETJMP":
            return (0, exports.DICTUGETJMP)(ctx, instr, loc);
        case "DICTIGETEXEC":
            return (0, exports.DICTIGETEXEC)(ctx, instr, loc);
        case "DICTUGETEXEC":
            return (0, exports.DICTUGETEXEC)(ctx, instr, loc);
        case "DICTIGETJMPZ":
            return (0, exports.DICTIGETJMPZ)(ctx, instr, loc);
        case "DICTUGETJMPZ":
            return (0, exports.DICTUGETJMPZ)(ctx, instr, loc);
        case "DICTIGETEXECZ":
            return (0, exports.DICTIGETEXECZ)(ctx, instr, loc);
        case "DICTUGETEXECZ":
            return (0, exports.DICTUGETEXECZ)(ctx, instr, loc);
        case "DICTGET":
            return (0, exports.DICTGET)(ctx, instr, loc);
        case "DICTGETREF":
            return (0, exports.DICTGETREF)(ctx, instr, loc);
        case "DICTIGET":
            return (0, exports.DICTIGET)(ctx, instr, loc);
        case "DICTIGETREF":
            return (0, exports.DICTIGETREF)(ctx, instr, loc);
        case "DICTUGET":
            return (0, exports.DICTUGET)(ctx, instr, loc);
        case "DICTUGETREF":
            return (0, exports.DICTUGETREF)(ctx, instr, loc);
        case "DICTSET":
            return (0, exports.DICTSET)(ctx, instr, loc);
        case "DICTSETREF":
            return (0, exports.DICTSETREF)(ctx, instr, loc);
        case "DICTISET":
            return (0, exports.DICTISET)(ctx, instr, loc);
        case "DICTISETREF":
            return (0, exports.DICTISETREF)(ctx, instr, loc);
        case "DICTUSET":
            return (0, exports.DICTUSET)(ctx, instr, loc);
        case "DICTUSETREF":
            return (0, exports.DICTUSETREF)(ctx, instr, loc);
        case "DICTSETGET":
            return (0, exports.DICTSETGET)(ctx, instr, loc);
        case "DICTSETGETREF":
            return (0, exports.DICTSETGETREF)(ctx, instr, loc);
        case "DICTISETGET":
            return (0, exports.DICTISETGET)(ctx, instr, loc);
        case "DICTISETGETREF":
            return (0, exports.DICTISETGETREF)(ctx, instr, loc);
        case "DICTUSETGET":
            return (0, exports.DICTUSETGET)(ctx, instr, loc);
        case "DICTUSETGETREF":
            return (0, exports.DICTUSETGETREF)(ctx, instr, loc);
        case "DICTREPLACE":
            return (0, exports.DICTREPLACE)(ctx, instr, loc);
        case "DICTREPLACEREF":
            return (0, exports.DICTREPLACEREF)(ctx, instr, loc);
        case "DICTIREPLACE":
            return (0, exports.DICTIREPLACE)(ctx, instr, loc);
        case "DICTIREPLACEREF":
            return (0, exports.DICTIREPLACEREF)(ctx, instr, loc);
        case "DICTUREPLACE":
            return (0, exports.DICTUREPLACE)(ctx, instr, loc);
        case "DICTUREPLACEREF":
            return (0, exports.DICTUREPLACEREF)(ctx, instr, loc);
        case "DICTREPLACEGET":
            return (0, exports.DICTREPLACEGET)(ctx, instr, loc);
        case "DICTREPLACEGETREF":
            return (0, exports.DICTREPLACEGETREF)(ctx, instr, loc);
        case "DICTIREPLACEGET":
            return (0, exports.DICTIREPLACEGET)(ctx, instr, loc);
        case "DICTIREPLACEGETREF":
            return (0, exports.DICTIREPLACEGETREF)(ctx, instr, loc);
        case "DICTUREPLACEGET":
            return (0, exports.DICTUREPLACEGET)(ctx, instr, loc);
        case "DICTUREPLACEGETREF":
            return (0, exports.DICTUREPLACEGETREF)(ctx, instr, loc);
        case "DICTADD":
            return (0, exports.DICTADD)(ctx, instr, loc);
        case "DICTADDREF":
            return (0, exports.DICTADDREF)(ctx, instr, loc);
        case "DICTIADD":
            return (0, exports.DICTIADD)(ctx, instr, loc);
        case "DICTIADDREF":
            return (0, exports.DICTIADDREF)(ctx, instr, loc);
        case "DICTUADD":
            return (0, exports.DICTUADD)(ctx, instr, loc);
        case "DICTUADDREF":
            return (0, exports.DICTUADDREF)(ctx, instr, loc);
        case "DICTADDGET":
            return (0, exports.DICTADDGET)(ctx, instr, loc);
        case "DICTADDGETREF":
            return (0, exports.DICTADDGETREF)(ctx, instr, loc);
        case "DICTIADDGET":
            return (0, exports.DICTIADDGET)(ctx, instr, loc);
        case "DICTIADDGETREF":
            return (0, exports.DICTIADDGETREF)(ctx, instr, loc);
        case "DICTUADDGET":
            return (0, exports.DICTUADDGET)(ctx, instr, loc);
        case "DICTUADDGETREF":
            return (0, exports.DICTUADDGETREF)(ctx, instr, loc);
        case "DICTDELGET":
            return (0, exports.DICTDELGET)(ctx, instr, loc);
        case "DICTDELGETREF":
            return (0, exports.DICTDELGETREF)(ctx, instr, loc);
        case "DICTIDELGET":
            return (0, exports.DICTIDELGET)(ctx, instr, loc);
        case "DICTIDELGETREF":
            return (0, exports.DICTIDELGETREF)(ctx, instr, loc);
        case "DICTUDELGET":
            return (0, exports.DICTUDELGET)(ctx, instr, loc);
        case "DICTUDELGETREF":
            return (0, exports.DICTUDELGETREF)(ctx, instr, loc);
        case "DICTMIN":
            return (0, exports.DICTMIN)(ctx, instr, loc);
        case "DICTMINREF":
            return (0, exports.DICTMINREF)(ctx, instr, loc);
        case "DICTIMIN":
            return (0, exports.DICTIMIN)(ctx, instr, loc);
        case "DICTIMINREF":
            return (0, exports.DICTIMINREF)(ctx, instr, loc);
        case "DICTUMIN":
            return (0, exports.DICTUMIN)(ctx, instr, loc);
        case "DICTUMINREF":
            return (0, exports.DICTUMINREF)(ctx, instr, loc);
        case "DICTMAX":
            return (0, exports.DICTMAX)(ctx, instr, loc);
        case "DICTMAXREF":
            return (0, exports.DICTMAXREF)(ctx, instr, loc);
        case "DICTIMAX":
            return (0, exports.DICTIMAX)(ctx, instr, loc);
        case "DICTIMAXREF":
            return (0, exports.DICTIMAXREF)(ctx, instr, loc);
        case "DICTUMAX":
            return (0, exports.DICTUMAX)(ctx, instr, loc);
        case "DICTUMAXREF":
            return (0, exports.DICTUMAXREF)(ctx, instr, loc);
        case "DICTREMMIN":
            return (0, exports.DICTREMMIN)(ctx, instr, loc);
        case "DICTREMMINREF":
            return (0, exports.DICTREMMINREF)(ctx, instr, loc);
        case "DICTIREMMIN":
            return (0, exports.DICTIREMMIN)(ctx, instr, loc);
        case "DICTIREMMINREF":
            return (0, exports.DICTIREMMINREF)(ctx, instr, loc);
        case "DICTUREMMIN":
            return (0, exports.DICTUREMMIN)(ctx, instr, loc);
        case "DICTUREMMINREF":
            return (0, exports.DICTUREMMINREF)(ctx, instr, loc);
        case "DICTREMMAX":
            return (0, exports.DICTREMMAX)(ctx, instr, loc);
        case "DICTREMMAXREF":
            return (0, exports.DICTREMMAXREF)(ctx, instr, loc);
        case "DICTIREMMAX":
            return (0, exports.DICTIREMMAX)(ctx, instr, loc);
        case "DICTIREMMAXREF":
            return (0, exports.DICTIREMMAXREF)(ctx, instr, loc);
        case "DICTUREMMAX":
            return (0, exports.DICTUREMMAX)(ctx, instr, loc);
        case "DICTUREMMAXREF":
            return (0, exports.DICTUREMMAXREF)(ctx, instr, loc);
        case "DICTSETB":
            return (0, exports.DICTSETB)(ctx, instr, loc);
        case "DICTISETB":
            return (0, exports.DICTISETB)(ctx, instr, loc);
        case "DICTUSETB":
            return (0, exports.DICTUSETB)(ctx, instr, loc);
        case "DICTSETGETB":
            return (0, exports.DICTSETGETB)(ctx, instr, loc);
        case "DICTISETGETB":
            return (0, exports.DICTISETGETB)(ctx, instr, loc);
        case "DICTUSETGETB":
            return (0, exports.DICTUSETGETB)(ctx, instr, loc);
        case "DICTREPLACEB":
            return (0, exports.DICTREPLACEB)(ctx, instr, loc);
        case "DICTIREPLACEB":
            return (0, exports.DICTIREPLACEB)(ctx, instr, loc);
        case "DICTUREPLACEB":
            return (0, exports.DICTUREPLACEB)(ctx, instr, loc);
        case "DICTREPLACEGETB":
            return (0, exports.DICTREPLACEGETB)(ctx, instr, loc);
        case "DICTIREPLACEGETB":
            return (0, exports.DICTIREPLACEGETB)(ctx, instr, loc);
        case "DICTUREPLACEGETB":
            return (0, exports.DICTUREPLACEGETB)(ctx, instr, loc);
        case "DICTADDB":
            return (0, exports.DICTADDB)(ctx, instr, loc);
        case "DICTIADDB":
            return (0, exports.DICTIADDB)(ctx, instr, loc);
        case "DICTUADDB":
            return (0, exports.DICTUADDB)(ctx, instr, loc);
        case "DICTADDGETB":
            return (0, exports.DICTADDGETB)(ctx, instr, loc);
        case "DICTIADDGETB":
            return (0, exports.DICTIADDGETB)(ctx, instr, loc);
        case "DICTUADDGETB":
            return (0, exports.DICTUADDGETB)(ctx, instr, loc);
        case "DICTDEL":
            return (0, exports.DICTDEL)(ctx, instr, loc);
        case "DICTIDEL":
            return (0, exports.DICTIDEL)(ctx, instr, loc);
        case "DICTUDEL":
            return (0, exports.DICTUDEL)(ctx, instr, loc);
        case "DICTGETOPTREF":
            return (0, exports.DICTGETOPTREF)(ctx, instr, loc);
        case "DICTIGETOPTREF":
            return (0, exports.DICTIGETOPTREF)(ctx, instr, loc);
        case "DICTUGETOPTREF":
            return (0, exports.DICTUGETOPTREF)(ctx, instr, loc);
        case "DICTSETGETOPTREF":
            return (0, exports.DICTSETGETOPTREF)(ctx, instr, loc);
        case "DICTISETGETOPTREF":
            return (0, exports.DICTISETGETOPTREF)(ctx, instr, loc);
        case "DICTUSETGETOPTREF":
            return (0, exports.DICTUSETGETOPTREF)(ctx, instr, loc);
        case "SUBDICTGET":
            return (0, exports.SUBDICTGET)(ctx, instr, loc);
        case "SUBDICTIGET":
            return (0, exports.SUBDICTIGET)(ctx, instr, loc);
        case "SUBDICTUGET":
            return (0, exports.SUBDICTUGET)(ctx, instr, loc);
        case "SUBDICTRPGET":
            return (0, exports.SUBDICTRPGET)(ctx, instr, loc);
        case "SUBDICTIRPGET":
            return (0, exports.SUBDICTIRPGET)(ctx, instr, loc);
        case "SUBDICTURPGET":
            return (0, exports.SUBDICTURPGET)(ctx, instr, loc);
        case "THROWANY":
            return (0, exports.THROWANY)(ctx, instr, loc);
        case "THROWARGANY":
            return (0, exports.THROWARGANY)(ctx, instr, loc);
        case "THROWANYIFNOT":
            return (0, exports.THROWANYIFNOT)(ctx, instr, loc);
        case "THROWARGANYIFNOT":
            return (0, exports.THROWARGANYIFNOT)(ctx, instr, loc);
        case "DICTGETNEXT":
            return (0, exports.DICTGETNEXT)(ctx, instr, loc);
        case "DICTGETNEXTEQ":
            return (0, exports.DICTGETNEXTEQ)(ctx, instr, loc);
        case "DICTGETPREV":
            return (0, exports.DICTGETPREV)(ctx, instr, loc);
        case "DICTGETPREVEQ":
            return (0, exports.DICTGETPREVEQ)(ctx, instr, loc);
        case "DICTIGETNEXT":
            return (0, exports.DICTIGETNEXT)(ctx, instr, loc);
        case "DICTIGETNEXTEQ":
            return (0, exports.DICTIGETNEXTEQ)(ctx, instr, loc);
        case "DICTIGETPREV":
            return (0, exports.DICTIGETPREV)(ctx, instr, loc);
        case "DICTIGETPREVEQ":
            return (0, exports.DICTIGETPREVEQ)(ctx, instr, loc);
        case "DICTUGETNEXT":
            return (0, exports.DICTUGETNEXT)(ctx, instr, loc);
        case "DICTUGETNEXTEQ":
            return (0, exports.DICTUGETNEXTEQ)(ctx, instr, loc);
        case "DICTUGETPREV":
            return (0, exports.DICTUGETPREV)(ctx, instr, loc);
        case "DICTUGETPREVEQ":
            return (0, exports.DICTUGETPREVEQ)(ctx, instr, loc);
        case "ADDINT":
            return (0, exports.ADDINT)(ctx, instr, loc);
        case "MULINT":
            return (0, exports.MULINT)(ctx, instr, loc);
        case "QADDINT":
            return (0, exports.QADDINT)(ctx, instr, loc);
        case "QMULINT":
            return (0, exports.QMULINT)(ctx, instr, loc);
        case "EQINT":
            return (0, exports.EQINT)(ctx, instr, loc);
        case "LESSINT":
            return (0, exports.LESSINT)(ctx, instr, loc);
        case "GTINT":
            return (0, exports.GTINT)(ctx, instr, loc);
        case "NEQINT":
            return (0, exports.NEQINT)(ctx, instr, loc);
        case "QEQINT":
            return (0, exports.QEQINT)(ctx, instr, loc);
        case "QLESSINT":
            return (0, exports.QLESSINT)(ctx, instr, loc);
        case "QGTINT":
            return (0, exports.QGTINT)(ctx, instr, loc);
        case "QNEQINT":
            return (0, exports.QNEQINT)(ctx, instr, loc);
        case "PUSHPOW2DEC":
            return (0, exports.PUSHPOW2DEC)(ctx, instr, loc);
        case "PUSHNEGPOW2":
            return (0, exports.PUSHNEGPOW2)(ctx, instr, loc);
        case "FITS":
            return (0, exports.FITS)(ctx, instr, loc);
        case "UFITS":
            return (0, exports.UFITS)(ctx, instr, loc);
        case "QFITS":
            return (0, exports.QFITS)(ctx, instr, loc);
        case "QUFITS":
            return (0, exports.QUFITS)(ctx, instr, loc);
        case "SETCONTCTRMANY":
            return (0, exports.SETCONTCTRMANY)(ctx, instr, loc);
        case "CALLCCARGS":
            return (0, exports.CALLCCARGS)(ctx, instr, loc);
        case "TRYARGS":
            return (0, exports.TRYARGS)(ctx, instr, loc);
        case "PLDREFIDX":
            return (0, exports.PLDREFIDX)(ctx, instr, loc);
        case "CHASHI":
            return (0, exports.CHASHI)(ctx, instr, loc);
        case "CDEPTHI":
            return (0, exports.CDEPTHI)(ctx, instr, loc);
        case "JMPDICT":
            return (0, exports.JMPDICT)(ctx, instr, loc);
        case "PREPAREDICT":
            return (0, exports.PREPAREDICT)(ctx, instr, loc);
        case "THROWARG":
            return (0, exports.THROWARG)(ctx, instr, loc);
        case "THROWARGIF":
            return (0, exports.THROWARGIF)(ctx, instr, loc);
        case "THROWARGIFNOT":
            return (0, exports.THROWARGIFNOT)(ctx, instr, loc);
        case "JMPXARGS":
            return (0, exports.JMPXARGS)(ctx, instr, loc);
        case "RETARGS":
            return (0, exports.RETARGS)(ctx, instr, loc);
        case "RETURNARGS":
            return (0, exports.RETURNARGS)(ctx, instr, loc);
        case "BLKDROP":
            return (0, exports.BLKDROP)(ctx, instr, loc);
        case "TUPLE":
            return (0, exports.TUPLE)(ctx, instr, loc);
        case "INDEX":
            return (0, exports.INDEX)(ctx, instr, loc);
        case "UNTUPLE":
            return (0, exports.UNTUPLE)(ctx, instr, loc);
        case "UNPACKFIRST":
            return (0, exports.UNPACKFIRST)(ctx, instr, loc);
        case "EXPLODE":
            return (0, exports.EXPLODE)(ctx, instr, loc);
        case "SETINDEX":
            return (0, exports.SETINDEX)(ctx, instr, loc);
        case "INDEXQ":
            return (0, exports.INDEXQ)(ctx, instr, loc);
        case "SETINDEXQ":
            return (0, exports.SETINDEXQ)(ctx, instr, loc);
        case "XC2PU":
            return (0, exports.XC2PU)(ctx, instr, loc);
        case "XCPU2":
            return (0, exports.XCPU2)(ctx, instr, loc);
        case "PUSH3":
            return (0, exports.PUSH3)(ctx, instr, loc);
        case "XCHG2":
            return (0, exports.XCHG2)(ctx, instr, loc);
        case "XCPU":
            return (0, exports.XCPU)(ctx, instr, loc);
        case "PUSH2":
            return (0, exports.PUSH2)(ctx, instr, loc);
        case "PUXC":
            return (0, exports.PUXC)(ctx, instr, loc);
        case "XCPUXC":
            return (0, exports.XCPUXC)(ctx, instr, loc);
        case "PUXC2":
            return (0, exports.PUXC2)(ctx, instr, loc);
        case "PUXCPU":
            return (0, exports.PUXCPU)(ctx, instr, loc);
        case "PU2XC":
            return (0, exports.PU2XC)(ctx, instr, loc);
        case "BLKSWAP":
            return (0, exports.BLKSWAP)(ctx, instr, loc);
        case "REVERSE":
            return (0, exports.REVERSE)(ctx, instr, loc);
        case "SETCONTARGS":
            return (0, exports.SETCONTARGS)(ctx, instr, loc);
        case "BLESSARGS":
            return (0, exports.BLESSARGS)(ctx, instr, loc);
        case "STIR":
            return (0, exports.STIR)(ctx, instr, loc);
        case "STUR":
            return (0, exports.STUR)(ctx, instr, loc);
        case "STIQ":
            return (0, exports.STIQ)(ctx, instr, loc);
        case "STUQ":
            return (0, exports.STUQ)(ctx, instr, loc);
        case "STIRQ":
            return (0, exports.STIRQ)(ctx, instr, loc);
        case "STURQ":
            return (0, exports.STURQ)(ctx, instr, loc);
        case "PLDI":
            return (0, exports.PLDI)(ctx, instr, loc);
        case "PLDU":
            return (0, exports.PLDU)(ctx, instr, loc);
        case "LDIQ":
            return (0, exports.LDIQ)(ctx, instr, loc);
        case "LDUQ":
            return (0, exports.LDUQ)(ctx, instr, loc);
        case "PLDIQ":
            return (0, exports.PLDIQ)(ctx, instr, loc);
        case "PLDUQ":
            return (0, exports.PLDUQ)(ctx, instr, loc);
        case "PLDUZ":
            return (0, exports.PLDUZ)(ctx, instr, loc);
        case "PLDSLICE":
            return (0, exports.PLDSLICE)(ctx, instr, loc);
        case "LDSLICEQ":
            return (0, exports.LDSLICEQ)(ctx, instr, loc);
        case "PLDSLICEQ":
            return (0, exports.PLDSLICEQ)(ctx, instr, loc);
        case "IFBITJMP":
            return (0, exports.IFBITJMP)(ctx, instr, loc);
        case "IFNBITJMP":
            return (0, exports.IFNBITJMP)(ctx, instr, loc);
        case "INDEX2":
            return (0, exports.INDEX2)(ctx, instr, loc);
        case "INDEX3":
            return (0, exports.INDEX3)(ctx, instr, loc);
        case "PUSHPOW2":
            return (0, exports.PUSHPOW2)(ctx, instr, loc);
        case "BLKPUSH":
            return (0, exports.BLKPUSH)(ctx, instr, loc);
        case "BLKDROP2":
            return (0, exports.BLKDROP2)(ctx, instr, loc);
        case "GETGLOB":
            return (0, exports.GETGLOB)(ctx, instr, loc);
        case "SETGLOB":
            return (0, exports.SETGLOB)(ctx, instr, loc);
        case "GETPARAM":
            return (0, exports.GETPARAM)(ctx, instr, loc);
        case "PUSHREF":
            return (0, exports.PUSHREF)(ctx, instr, loc);
        case "PUSHREFSLICE":
            return (0, exports.PUSHREFSLICE)(ctx, instr, loc);
        case "PUSHREFCONT":
            return (0, exports.PUSHREFCONT)(ctx, instr, loc);
        case "CALLREF":
            return (0, exports.CALLREF)(ctx, instr, loc);
        case "JMPREF":
            return (0, exports.JMPREF)(ctx, instr, loc);
        case "JMPREFDATA":
            return (0, exports.JMPREFDATA)(ctx, instr, loc);
        case "IFREF":
            return (0, exports.IFREF)(ctx, instr, loc);
        case "IFNOTREF":
            return (0, exports.IFNOTREF)(ctx, instr, loc);
        case "IFJMPREF":
            return (0, exports.IFJMPREF)(ctx, instr, loc);
        case "IFNOTJMPREF":
            return (0, exports.IFNOTJMPREF)(ctx, instr, loc);
        case "IFREFELSE":
            return (0, exports.IFREFELSE)(ctx, instr, loc);
        case "IFELSEREF":
            return (0, exports.IFELSEREF)(ctx, instr, loc);
        case "IFREFELSEREF":
            return (0, exports.IFREFELSEREF)(ctx, instr, loc);
        case "IFBITJMPREF":
            return (0, exports.IFBITJMPREF)(ctx, instr, loc);
        case "IFNBITJMPREF":
            return (0, exports.IFNBITJMPREF)(ctx, instr, loc);
        case "DICTPUSHCONST":
            return (0, exports.DICTPUSHCONST)(ctx, instr, loc);
        case "PFXDICTSWITCH":
            return (0, exports.PFXDICTSWITCH)(ctx, instr, loc);
        case "SDBEGINSX":
            return (0, exports.SDBEGINSX)(ctx, instr, loc);
        case "SDBEGINSXQ":
            return (0, exports.SDBEGINSXQ)(ctx, instr, loc);
        case "SDBEGINS":
            return (0, exports.SDBEGINS)(ctx, instr, loc);
        case "SDBEGINSQ":
            return (0, exports.SDBEGINSQ)(ctx, instr, loc);
        case "STREFCONST":
            return (0, exports.STREFCONST)(ctx, instr, loc);
        case "STREF2CONST":
            return (0, exports.STREF2CONST)(ctx, instr, loc);
        case "THROWANYIF":
            return (0, exports.THROWANYIF)(ctx, instr, loc);
        case "THROWARGANYIF":
            return (0, exports.THROWARGANYIF)(ctx, instr, loc);
        case "DEBUGSTR":
            return (0, exports.DEBUGSTR)(ctx, instr, loc);
        case "SETCONTCTR":
            return (0, exports.SETCONTCTR)(ctx, instr, loc);
        case "SETRETCTR":
            return (0, exports.SETRETCTR)(ctx, instr, loc);
        case "SETALTCTR":
            return (0, exports.SETALTCTR)(ctx, instr, loc);
        case "POPSAVE":
            return (0, exports.POPSAVE)(ctx, instr, loc);
        case "SAVECTR":
            return (0, exports.SAVECTR)(ctx, instr, loc);
        case "SAVEALTCTR":
            return (0, exports.SAVEALTCTR)(ctx, instr, loc);
        case "SAVEBOTHCTR":
            return (0, exports.SAVEBOTHCTR)(ctx, instr, loc);
        case "RUNVM":
            return (0, exports.RUNVM)(ctx, instr, loc);
        case "SWAP2":
            return (0, exports.SWAP2)(ctx, instr, loc);
        case "DROP2":
            return (0, exports.DROP2)(ctx, instr, loc);
        case "DUP2":
            return (0, exports.DUP2)(ctx, instr, loc);
        case "OVER2":
            return (0, exports.OVER2)(ctx, instr, loc);
        case "ADDRSHIFT_MOD":
            return (0, exports.ADDRSHIFT_MOD)(ctx, instr, loc);
        case "ADDRSHIFTR_MOD":
            return (0, exports.ADDRSHIFTR_MOD)(ctx, instr, loc);
        case "ADDRSHIFTC_MOD":
            return (0, exports.ADDRSHIFTC_MOD)(ctx, instr, loc);
        case "RSHIFT_":
            return (0, exports.RSHIFT_)(ctx, instr, loc);
        case "RSHIFTR_":
            return (0, exports.RSHIFTR_)(ctx, instr, loc);
        case "RSHIFTC_":
            return (0, exports.RSHIFTC_)(ctx, instr, loc);
        case "MODPOW2_":
            return (0, exports.MODPOW2_)(ctx, instr, loc);
        case "MODPOW2R_":
            return (0, exports.MODPOW2R_)(ctx, instr, loc);
        case "MODPOW2C_":
            return (0, exports.MODPOW2C_)(ctx, instr, loc);
        case "RSHIFT_MOD":
            return (0, exports.RSHIFT_MOD)(ctx, instr, loc);
        case "RSHIFTR_MOD":
            return (0, exports.RSHIFTR_MOD)(ctx, instr, loc);
        case "RSHIFTC_MOD":
            return (0, exports.RSHIFTC_MOD)(ctx, instr, loc);
        case "MULADDRSHIFT_MOD":
            return (0, exports.MULADDRSHIFT_MOD)(ctx, instr, loc);
        case "MULADDRSHIFTR_MOD":
            return (0, exports.MULADDRSHIFTR_MOD)(ctx, instr, loc);
        case "MULADDRSHIFTC_MOD":
            return (0, exports.MULADDRSHIFTC_MOD)(ctx, instr, loc);
        case "MULRSHIFT_":
            return (0, exports.MULRSHIFT_)(ctx, instr, loc);
        case "MULRSHIFTR_":
            return (0, exports.MULRSHIFTR_)(ctx, instr, loc);
        case "MULRSHIFTC_":
            return (0, exports.MULRSHIFTC_)(ctx, instr, loc);
        case "MULMODPOW2_":
            return (0, exports.MULMODPOW2_)(ctx, instr, loc);
        case "MULMODPOW2R_":
            return (0, exports.MULMODPOW2R_)(ctx, instr, loc);
        case "MULMODPOW2C_":
            return (0, exports.MULMODPOW2C_)(ctx, instr, loc);
        case "MULRSHIFT_MOD":
            return (0, exports.MULRSHIFT_MOD)(ctx, instr, loc);
        case "MULRSHIFTR_MOD":
            return (0, exports.MULRSHIFTR_MOD)(ctx, instr, loc);
        case "MULRSHIFTC_MOD":
            return (0, exports.MULRSHIFTC_MOD)(ctx, instr, loc);
        case "LSHIFT_ADDDIVMOD":
            return (0, exports.LSHIFT_ADDDIVMOD)(ctx, instr, loc);
        case "LSHIFT_ADDDIVMODR":
            return (0, exports.LSHIFT_ADDDIVMODR)(ctx, instr, loc);
        case "LSHIFT_ADDDIVMODC":
            return (0, exports.LSHIFT_ADDDIVMODC)(ctx, instr, loc);
        case "LSHIFT_DIV":
            return (0, exports.LSHIFT_DIV)(ctx, instr, loc);
        case "LSHIFT_DIVR":
            return (0, exports.LSHIFT_DIVR)(ctx, instr, loc);
        case "LSHIFT_DIVC":
            return (0, exports.LSHIFT_DIVC)(ctx, instr, loc);
        case "LSHIFT_MOD":
            return (0, exports.LSHIFT_MOD)(ctx, instr, loc);
        case "LSHIFT_MODR":
            return (0, exports.LSHIFT_MODR)(ctx, instr, loc);
        case "LSHIFT_MODC":
            return (0, exports.LSHIFT_MODC)(ctx, instr, loc);
        case "LSHIFT_DIVMOD":
            return (0, exports.LSHIFT_DIVMOD)(ctx, instr, loc);
        case "LSHIFT_DIVMODR":
            return (0, exports.LSHIFT_DIVMODR)(ctx, instr, loc);
        case "LSHIFT_DIVMODC":
            return (0, exports.LSHIFT_DIVMODC)(ctx, instr, loc);
        case "HASHEXT":
            return (0, exports.HASHEXT)(ctx, instr, loc);
        case "HASHEXTR":
            return (0, exports.HASHEXTR)(ctx, instr, loc);
        case "HASHEXTA":
            return (0, exports.HASHEXTA)(ctx, instr, loc);
        case "HASHEXTAR":
            return (0, exports.HASHEXTAR)(ctx, instr, loc);
        case "STREF":
            return (0, exports.STREF)(ctx, instr, loc);
        case "STREF_ALT":
            return (0, exports.STREF_ALT)(ctx, instr, loc);
        case "STSLICE":
            return (0, exports.STSLICE)(ctx, instr, loc);
        case "STSLICE_ALT":
            return (0, exports.STSLICE_ALT)(ctx, instr, loc);
        case "XCHG3":
            return (0, exports.XCHG3)(ctx, instr, loc);
        case "XCHG3_ALT":
            return (0, exports.XCHG3_ALT)(ctx, instr, loc);
        case "STI":
            return (0, exports.STI)(ctx, instr, loc);
        case "STI_ALT":
            return (0, exports.STI_ALT)(ctx, instr, loc);
        case "STU":
            return (0, exports.STU)(ctx, instr, loc);
        case "STU_ALT":
            return (0, exports.STU_ALT)(ctx, instr, loc);
        case "LDI":
            return (0, exports.LDI)(ctx, instr, loc);
        case "LDI_ALT":
            return (0, exports.LDI_ALT)(ctx, instr, loc);
        case "LDU":
            return (0, exports.LDU)(ctx, instr, loc);
        case "LDU_ALT":
            return (0, exports.LDU_ALT)(ctx, instr, loc);
        case "LDSLICE":
            return (0, exports.LDSLICE)(ctx, instr, loc);
        case "LDSLICE_ALT":
            return (0, exports.LDSLICE_ALT)(ctx, instr, loc);
        case "LSHIFT":
            return (0, exports.LSHIFT)(ctx, instr, loc);
        case "LSHIFT_1":
            return (0, exports.LSHIFT_1)(ctx, instr, loc);
        case "QLSHIFT":
            return (0, exports.QLSHIFT)(ctx, instr, loc);
        case "QLSHIFT_1":
            return (0, exports.QLSHIFT_1)(ctx, instr, loc);
        case "BCHKBITS":
            return (0, exports.BCHKBITS)(ctx, instr, loc);
        case "BCHKBITS_1":
            return (0, exports.BCHKBITS_1)(ctx, instr, loc);
        case "BCHKBITSQ":
            return (0, exports.BCHKBITSQ)(ctx, instr, loc);
        case "BCHKBITSQ_1":
            return (0, exports.BCHKBITSQ_1)(ctx, instr, loc);
        case "RSHIFT":
            return (0, exports.RSHIFT)(ctx, instr, loc);
        case "RSHIFT_1":
            return (0, exports.RSHIFT_1)(ctx, instr, loc);
        case "RSHIFT_ALT":
            return (0, exports.RSHIFT_ALT)(ctx, instr, loc);
        case "QRSHIFT":
            return (0, exports.QRSHIFT)(ctx, instr, loc);
        case "QRSHIFT_1":
            return (0, exports.QRSHIFT_1)(ctx, instr, loc);
        case "QRSHIFT_ALT":
            return (0, exports.QRSHIFT_ALT)(ctx, instr, loc);
        case "CALLDICT":
            return (0, exports.CALLDICT)(ctx, instr, loc);
        case "CALLDICT_LONG":
            return (0, exports.CALLDICT_LONG)(ctx, instr, loc);
        case "THROW_SHORT":
            return (0, exports.THROW_SHORT)(ctx, instr, loc);
        case "THROW":
            return (0, exports.THROW)(ctx, instr, loc);
        case "THROWIF_SHORT":
            return (0, exports.THROWIF_SHORT)(ctx, instr, loc);
        case "THROWIF":
            return (0, exports.THROWIF)(ctx, instr, loc);
        case "THROWIFNOT_SHORT":
            return (0, exports.THROWIFNOT_SHORT)(ctx, instr, loc);
        case "THROWIFNOT":
            return (0, exports.THROWIFNOT)(ctx, instr, loc);
        case "PUSHINT":
            return (0, exports.PUSHINT)(ctx, instr, loc);
        case "PUSHINT_8":
            return (0, exports.PUSHINT_8)(ctx, instr, loc);
        case "PUSHINT_16":
            return (0, exports.PUSHINT_16)(ctx, instr, loc);
        case "PUSHINT_LONG":
            return (0, exports.PUSHINT_LONG)(ctx, instr, loc);
        case "XCHG_LONG":
            return (0, exports.XCHG_LONG)(ctx, instr, loc);
        case "XCHG_0":
            return (0, exports.XCHG_0)(ctx, instr, loc);
        case "XCHG_1":
            return (0, exports.XCHG_1)(ctx, instr, loc);
        case "XCHG_3":
            return (0, exports.XCHG_3)(ctx, instr, loc);
        case "DUMPSTK":
            return (0, exports.DUMPSTK)(ctx, instr, loc);
        case "DEBUG":
            return (0, exports.DEBUG)(ctx, instr, loc);
        case "STRDUMP":
            return (0, exports.STRDUMP)(ctx, instr, loc);
        case "DEBUG_1":
            return (0, exports.DEBUG_1)(ctx, instr, loc);
        case "DUMP":
            return (0, exports.DUMP)(ctx, instr, loc);
        case "DEBUG_2":
            return (0, exports.DEBUG_2)(ctx, instr, loc);
        case "PUSHCTR":
            return (0, exports.PUSHCTR)(ctx, instr, loc);
        case "PUSH":
            return (0, exports.PUSH)(ctx, instr, loc);
        case "PUSH_LONG":
            return (0, exports.PUSH_LONG)(ctx, instr, loc);
        case "POPCTR":
            return (0, exports.POPCTR)(ctx, instr, loc);
        case "POP":
            return (0, exports.POP)(ctx, instr, loc);
        case "POP_LONG":
            return (0, exports.POP_LONG)(ctx, instr, loc);
        case "CALLXARGS":
            return (0, exports.CALLXARGS)(ctx, instr, loc);
        case "CALLXARGS_1":
            return (0, exports.CALLXARGS_1)(ctx, instr, loc);
        case "PUSHSLICE":
            return (0, exports.PUSHSLICE)(ctx, instr, loc);
        case "PUSHSLICE_REFS_1":
            return (0, exports.PUSHSLICE_REFS_1)(ctx, instr, loc);
        case "PUSHSLICE_LONG_1":
            return (0, exports.PUSHSLICE_LONG_1)(ctx, instr, loc);
        case "PUSHCONT":
            return (0, exports.PUSHCONT)(ctx, instr, loc);
        case "PUSHCONT_SHORT":
            return (0, exports.PUSHCONT_SHORT)(ctx, instr, loc);
        case "STSLICECONST":
            return (0, exports.STSLICECONST)(ctx, instr, loc);
        case "SETCP":
            return (0, exports.SETCP)(ctx, instr, loc);
        case "SETCP_SHORT":
            return (0, exports.SETCP_SHORT)(ctx, instr, loc);
        case "DEBUGMARK":
            return (0, exports.DEBUGMARK)(ctx, instr, loc);
    }
    throw new Error(`Unexpected instruction: ${name}`);
};
exports.convertInstruction = convertInstruction;
