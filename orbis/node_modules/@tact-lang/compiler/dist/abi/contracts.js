"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractFunctions = void 0;
const ops_1 = require("../generator/writers/ops");
const writeExpression_1 = require("../generator/writers/writeExpression");
const errors_1 = require("../error/errors");
const resolveDescriptors_1 = require("../types/resolveDescriptors");
const resolveExpression_1 = require("../types/resolveExpression");
exports.ContractFunctions = new Map([
    [
        "toCell",
        {
            name: "toCell",
            isStatic: false,
            resolve: (_ctx, args, ref) => {
                if (args.length !== 1) {
                    (0, errors_1.throwCompilationError)("toCell() expects no arguments", ref);
                }
                return { kind: "ref", name: "Cell", optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 1) {
                    (0, errors_1.throwCompilationError)("toCell() expects no arguments", ref);
                }
                const arg = args[0];
                if (arg.kind !== "ref") {
                    (0, errors_1.throwCompilationError)(`toCell() is not implemented for type '${arg.kind}'`, ref);
                }
                const builder = lazyBitBuilder(resolved, ctx);
                return `${ops_1.ops.writerCell(arg.name, ctx)}(${resolved.map((v) => (0, writeExpression_1.writeExpression)(v, ctx)).join(", ")}, ${builder})`;
            },
        },
    ],
    [
        "toSlice",
        {
            name: "toSlice",
            isStatic: false,
            resolve: (ctx, args, ref) => {
                if (args.length !== 1) {
                    (0, errors_1.throwCompilationError)("toSlice() expects no arguments", ref);
                }
                return { kind: "ref", name: "Slice", optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 1) {
                    (0, errors_1.throwCompilationError)("toSlice() expects no arguments", ref);
                }
                const arg = args[0];
                if (arg.kind !== "ref") {
                    (0, errors_1.throwCompilationError)(`toSlice() is not implemented for type '${arg.kind}'`, ref);
                }
                const builder = lazyBitBuilder(resolved, ctx);
                return `${ops_1.ops.writerCell(arg.name, ctx)}(${resolved.map((v) => (0, writeExpression_1.writeExpression)(v, ctx)).join(", ")}, ${builder}).begin_parse()`;
            },
        },
    ],
    [
        "fromCell",
        {
            name: "fromCell",
            isStatic: true,
            resolve: (ctx, args, ref) => {
                if (args.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromCell() expects one argument", ref);
                }
                const contract = args[0];
                const cell = args[1];
                if (contract.kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromCell() is implemented only for struct/contract types", ref);
                }
                const contractTy = (0, resolveDescriptors_1.getType)(ctx, contract.name);
                if (contractTy.kind !== "contract") {
                    (0, errors_1.throwCompilationError)("fromCell() is implemented only for struct/contract types", ref);
                }
                if (cell.kind !== "ref" || cell.name !== "Cell") {
                    (0, errors_1.throwCompilationError)("fromCell() expects a Cell as an argument", ref);
                }
                return { kind: "ref", name: contract.name, optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromCell() expects one argument", ref);
                }
                const contract = args[0];
                const cell = args[1];
                if (contract.kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromCell() is implemented only for struct/contract types", ref);
                }
                if (cell.kind !== "ref" || cell.name !== "Cell") {
                    (0, errors_1.throwCompilationError)("fromCell() expects a Cell as an argument", ref);
                }
                const skip = skipLazyBit(contract.name, ctx);
                return `${ops_1.ops.readerNonModifying(contract.name, ctx)}(${(0, writeExpression_1.writeExpression)(resolved[1], ctx)}.begin_parse()${skip})`;
            },
        },
    ],
    [
        "fromSlice",
        {
            name: "fromSlice",
            isStatic: true,
            resolve: (ctx, args, ref) => {
                if (args.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromSlice() expects one argument", ref);
                }
                const contract = args[0];
                const slice = args[1];
                if (contract.kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromSlice() is implemented only for struct/contract types", ref);
                }
                const contractTy = (0, resolveDescriptors_1.getType)(ctx, contract.name);
                if (contractTy.kind !== "contract") {
                    (0, errors_1.throwCompilationError)("fromSlice() is implemented only for struct/contract types", ref);
                }
                if (slice.kind !== "ref" || slice.name !== "Slice") {
                    (0, errors_1.throwCompilationError)("fromSlice() expects a Slice as an argument", ref);
                }
                return { kind: "ref", name: contract.name, optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromSlice() expects one argument", ref);
                }
                const contract = args[0];
                const slice = args[1];
                if (contract.kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromSlice() is implemented only for struct/contract types", ref);
                }
                if (slice.kind !== "ref" || slice.name !== "Slice") {
                    (0, errors_1.throwCompilationError)("fromSlice() expects a Slice as an argument", ref);
                }
                const skip = skipLazyBit(contract.name, ctx);
                return `${ops_1.ops.readerNonModifying(contract.name, ctx)}(${(0, writeExpression_1.writeExpression)(resolved[1], ctx)}${skip})`;
            },
        },
    ],
]);
function lazyBitBuilder(resolved, ctx) {
    const arg = resolved[0];
    const type = (0, resolveExpression_1.getExpType)(ctx.ctx, arg);
    if (type.kind === "ref") {
        const ty = (0, resolveDescriptors_1.getTypeOrUndefined)(ctx.ctx, type.name);
        if (ty) {
            if (ty.init?.kind === "init-function") {
                return `begin_cell().store_uint(1, 1)`;
            }
        }
    }
    return `begin_cell()`;
}
function skipLazyBit(contractName, ctx) {
    const ty = (0, resolveDescriptors_1.getType)(ctx.ctx, contractName);
    return ty.init?.kind === "init-function" ? ".skip_bits(1)" : "";
}
