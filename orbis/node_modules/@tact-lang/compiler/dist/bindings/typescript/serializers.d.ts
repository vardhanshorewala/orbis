import type { ABITypeRef } from "@ton/core";
import type { Writer } from "../../utils/Writer";
type Serializer<T> = {
    tsType: (v: T) => string;
    tsLoad: (v: T, slice: string, field: string, w: Writer) => void;
    tsLoadTuple: (v: T, reader: string, field: string, w: Writer, fromGet: boolean) => void;
    tsStore: (v: T, builder: string, field: string, w: Writer) => void;
    tsStoreTuple: (v: T, to: string, field: string, w: Writer) => void;
    abiMatcher: (src: ABITypeRef) => T | null;
};
export type MapSerializerDescrKey = {
    kind: "int" | "uint";
    bits: number;
} | {
    kind: "address";
};
export type MapSerializerDescrValue = {
    kind: "int" | "uint";
    bits: number;
} | {
    kind: "varuint";
    length: number;
} | {
    kind: "varint";
    length: number;
} | {
    kind: "boolean";
} | {
    kind: "address";
} | {
    kind: "cell";
} | {
    kind: "struct";
    type: string;
};
type MapSerializerDescr = {
    key: MapSerializerDescrKey;
    value: MapSerializerDescrValue;
};
export declare function getKeyParser(src: MapSerializerDescrKey): string;
export declare function getValueParser(src: MapSerializerDescrValue): string;
export declare const mapSerializers: Serializer<MapSerializerDescr>;
export declare const serializers: Serializer<any>[];
export {};
