"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asmText = exports.stdLibFiles = exports.createVirtualFileSystem = exports.TactConstEvalError = exports.TactInternalCompilerError = exports.TactCompilationError = exports.TactError = exports.precompile = exports.build = exports.enableFeatures = void 0;
var build_1 = require("./pipeline/build");
Object.defineProperty(exports, "enableFeatures", { enumerable: true, get: function () { return build_1.enableFeatures; } });
Object.defineProperty(exports, "build", { enumerable: true, get: function () { return build_1.build; } });
var precompile_1 = require("./pipeline/precompile");
Object.defineProperty(exports, "precompile", { enumerable: true, get: function () { return precompile_1.precompile; } });
var errors_1 = require("./error/errors");
Object.defineProperty(exports, "TactError", { enumerable: true, get: function () { return errors_1.TactError; } });
Object.defineProperty(exports, "TactCompilationError", { enumerable: true, get: function () { return errors_1.TactCompilationError; } });
Object.defineProperty(exports, "TactInternalCompilerError", { enumerable: true, get: function () { return errors_1.TactInternalCompilerError; } });
Object.defineProperty(exports, "TactConstEvalError", { enumerable: true, get: function () { return errors_1.TactConstEvalError; } });
__exportStar(require("./config/parseConfig"), exports);
var createVirtualFileSystem_1 = require("./vfs/createVirtualFileSystem");
Object.defineProperty(exports, "createVirtualFileSystem", { enumerable: true, get: function () { return createVirtualFileSystem_1.createVirtualFileSystem; } });
__exportStar(require("./browser"), exports);
__exportStar(require("./context/logger"), exports);
__exportStar(require("./error/errors"), exports);
__exportStar(require("./verify"), exports);
__exportStar(require("./ast/ast-printer"), exports);
__exportStar(require("./ast/ast"), exports);
__exportStar(require("./context/context"), exports);
__exportStar(require("./context/store"), exports);
__exportStar(require("./grammar"), exports);
__exportStar(require("./optimizer/constEval"), exports);
__exportStar(require("./pipeline/build"), exports);
__exportStar(require("./pipeline/precompile"), exports);
__exportStar(require("./types/resolveDescriptors"), exports);
__exportStar(require("./types/types"), exports);
var stdlib_1 = require("./stdlib/stdlib");
Object.defineProperty(exports, "stdLibFiles", { enumerable: true, get: function () { return stdlib_1.files; } });
__exportStar(require("./ast/ast-helpers"), exports);
__exportStar(require("./ast/util"), exports);
__exportStar(require("./imports/source"), exports);
__exportStar(require("./imports/path"), exports);
__exportStar(require("./grammar"), exports);
__exportStar(require("./grammar/src-info"), exports);
__exportStar(require("./optimizer/interpreter"), exports);
__exportStar(require("./asm/coverage"), exports);
__exportStar(require("./asm/logs"), exports);
__exportStar(require("./asm/runtime"), exports);
exports.asmText = __importStar(require("./asm/text"));
__exportStar(require("./asm/trace"), exports);
