import type * as Ast from "../../ast/ast";
import type { TypeRef } from "../../types/types";
import type { WriterContext } from "../Writer";
import type { CompilerContext } from "../../context/context";
import type { SrcInfo } from "../../grammar";
export declare function writeValue(val: Ast.Literal, optional: boolean, wCtx: WriterContext): string;
export declare function writePathExpression(path: Ast.Id[]): string;
export declare function writeExpression(f: Ast.Expression, wCtx: WriterContext): string;
export declare function constEval(expr: Ast.Expression, ctx: CompilerContext): Ast.Literal | Ast.Expression;
export declare function writeExpressionInCondition(expr: Ast.Expression, wCtx: WriterContext): string;
export declare function writeTypescriptValue(ctx: CompilerContext, val: Ast.Literal | undefined, type: TypeRef, loc: SrcInfo): string | undefined;
