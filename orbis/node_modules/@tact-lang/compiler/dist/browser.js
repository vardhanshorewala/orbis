"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = run;
const parseConfig_1 = require("./config/parseConfig");
const build_1 = require("./pipeline/build");
const createVirtualFileSystem_1 = require("./vfs/createVirtualFileSystem");
const Stdlib = __importStar(require("./stdlib/stdlib"));
async function run(args) {
    // Verify config
    const config = (0, parseConfig_1.verifyConfig)(args.config);
    // Create project's writable fs
    const project = (0, createVirtualFileSystem_1.createVirtualFileSystem)("/", args.files, false);
    // Create stdlib path
    const stdlib = (0, createVirtualFileSystem_1.createVirtualFileSystem)("@stdlib", Stdlib.files);
    // Compile
    let success = true;
    let errorCollection = [];
    for (const p of config.projects) {
        const built = await (0, build_1.build)({
            config: p,
            project,
            stdlib,
            logger: args.logger,
        });
        success = success && built.ok;
        if (!built.ok) {
            errorCollection = { ...errorCollection, ...built.error };
        }
    }
    return { ok: success, error: errorCollection };
}
