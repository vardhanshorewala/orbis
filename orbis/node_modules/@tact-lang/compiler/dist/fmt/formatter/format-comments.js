"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatComment = void 0;
exports.formatTrailingComments = formatTrailingComments;
exports.formatInlineComments = formatInlineComments;
exports.formatComments = formatComments;
exports.formatLineComments = formatLineComments;
const cst_helpers_1 = require("../cst/cst-helpers");
const helpers_1 = require("./helpers");
function formatTrailingComments(code, node, startFrom, withSpace) {
    if (!node || startFrom < 0)
        return;
    const afterBody = node.children.slice(startFrom + 1);
    if (afterBody.length === 0)
        return;
    const comments = (0, cst_helpers_1.filterComments)(afterBody);
    if (comments.length > 0) {
        // if there are any newlines before, add a single newline
        const firstLeaf = afterBody.at(0);
        if (firstLeaf?.$ === "leaf" && firstLeaf.text.includes("\n")) {
            code.newLine();
        }
    }
    formatComments(code, comments, withSpace);
}
function formatInlineComments(node, code, start, end, withSpace) {
    const comments = (0, helpers_1.getCommentsBetween)(node, start, end);
    formatComments(code, comments, withSpace);
}
function formatComments(code, comments, withSpace) {
    if (comments.length === 0)
        return;
    if (withSpace) {
        code.space();
    }
    for (const comment of comments) {
        code.add((0, cst_helpers_1.visit)(comment));
    }
}
function formatLineComments(code, comments) {
    if (comments.length === 0)
        return;
    for (const comment of comments) {
        code.add((0, cst_helpers_1.visit)(comment).trim());
        code.newLine();
    }
}
const formatComment = (code, comment) => {
    code.add((0, cst_helpers_1.visit)(comment).trim());
};
exports.formatComment = formatComment;
