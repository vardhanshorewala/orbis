"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeBuilder = void 0;
class CodeBuilder {
    indentStr;
    parts = [];
    currentIndent = "";
    indentStack = [];
    atLineStart = true;
    constructor(indentStr = "    ") {
        this.indentStr = indentStr;
    }
    addPart(part) {
        if (part.length === 0)
            return this;
        if (this.atLineStart) {
            this.parts.push(this.currentIndent);
            this.atLineStart = false;
        }
        this.parts.push(part);
        return this;
    }
    add(part) {
        this.addPart(part);
        return this;
    }
    addIf(cond, part) {
        if (cond) {
            this.addPart(part);
        }
        return this;
    }
    space() {
        if (!this.atLineStart) {
            this.parts.push(" ");
        }
        return this;
    }
    apply(callback, node) {
        callback(this, node);
        return this;
    }
    applyOpt(callback, node) {
        if (!node)
            return this;
        callback(this, node);
        return this;
    }
    newLine() {
        this.parts.push("\n");
        this.atLineStart = true;
        return this;
    }
    newLines(count) {
        if (count <= 0) {
            return this;
        }
        for (let i = 0; i < count; i++) {
            this.newLine();
        }
        this.atLineStart = true;
        return this;
    }
    indent() {
        this.indentStack.push(this.currentIndent);
        this.currentIndent += this.indentStr;
        return this;
    }
    dedent() {
        const last = this.indentStack.pop();
        if (last !== undefined) {
            this.currentIndent = last;
        }
        return this;
    }
    indentCustom(len) {
        this.indentStack.push(this.currentIndent);
        this.currentIndent = " ".repeat(len);
        return this;
    }
    lineLength() {
        let sum = 0;
        for (let i = 0; i < this.parts.length; i++) {
            const index = this.parts.length - 1 - i;
            const element = this.parts[index];
            if (typeof element !== "undefined" && element !== "\n") {
                sum += element.length;
                continue;
            }
            break;
        }
        return sum;
    }
    trimNewlines() {
        let toRemove = 0;
        for (; toRemove < this.parts.length; toRemove++) {
            const index = this.parts.length - 1 - toRemove;
            const element = this.parts[index];
            if (element === "\n") {
                continue;
            }
            break;
        }
        this.parts = this.parts.slice(0, this.parts.length - toRemove);
        return this;
    }
    toString() {
        return this.parts.join("");
    }
}
exports.CodeBuilder = CodeBuilder;
