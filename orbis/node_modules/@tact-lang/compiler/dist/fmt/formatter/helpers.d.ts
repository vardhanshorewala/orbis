import type { Cst, CstNode } from "../cst/cst-parser";
import type { CodeBuilder } from "./code-builder";
export declare const formatSeparatedList: (code: CodeBuilder, node: CstNode, formatItem: (code: CodeBuilder, item: CstNode) => void, options?: {
    startIndex?: number;
    endIndex?: number;
    wrapperLeft?: string;
    wrapperRight?: string;
    extraWrapperSpace?: string;
    suffixElement?: string;
    needSeparatorAfterSuffixElement?: boolean;
    separator?: string;
    spaceBeforeIfNotMultiline?: boolean;
    provideTrailingComments?: (item: Cst) => undefined | CstNode[];
}) => void;
export declare const getCommentsBetween: (node: CstNode, startNode: undefined | Cst, endNode: undefined | Cst) => CstNode[];
export declare const getLeafsBetween: (node: CstNode, startNode: undefined | Cst, endNode: undefined | Cst) => Cst[];
export declare const idText: (node: Cst) => string;
export declare const formatId: (code: CodeBuilder, node: Cst) => void;
export declare function declName(node: CstNode): string;
export declare function containsSeveralNewlines(text: string): boolean;
export declare function multilineComments(comments: readonly Cst[]): boolean;
export declare function isIgnoreDirective(statement: CstNode): boolean;
export declare function hasIgnoreDirective(declaration: CstNode): boolean;
