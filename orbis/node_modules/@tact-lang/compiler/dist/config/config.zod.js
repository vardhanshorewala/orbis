"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configSchema = exports.projectSchema = exports.modeSchema = exports.optionsSchema = exports.optimizationOptionsSchema = exports.safetyOptionsSchema = void 0;
// Generated by ts-to-zod
const zod_1 = require("zod");
exports.safetyOptionsSchema = zod_1.z.object({
    nullChecks: zod_1.z.boolean().optional(),
});
exports.optimizationOptionsSchema = zod_1.z.object({
    alwaysSaveContractData: zod_1.z.boolean().optional(),
    internalExternalReceiversOutsideMethodsMap: zod_1.z.boolean().optional(),
});
/**
 * Per-project configuration options
 *
 * Read more: https://docs.tact-lang.org/book/config#projects
 */
exports.optionsSchema = zod_1.z.object({
    /**
     * If set to true, enables debug output of a contract and allows usage of `dump()` function,
     * which is useful for debugging purposes.
     *
     * Read more: https://docs.tact-lang.org/book/debug
     */
    debug: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables support of external message receivers.
     *
     * Read more: https://docs.tact-lang.org/book/external
     */
    external: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables generation of a getter with IPFS links describing the contract's ABI.
     *
     * Read more: https://docs.tact-lang.org/ref/evolution/otp-003
     */
    ipfsAbiGetter: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables generation of a getter with a list of interfaces provided by the contract.
     *
     * Read more: https://docs.tact-lang.org/book/contracts#interfaces
     */
    interfacesGetter: zod_1.z.boolean().optional(),
    /**
     * Experimental options that might be removed in the future. Use with caution!
     */
    experimental: zod_1.z
        .object({
        /**
         * If set to true, enables inlining of all functions in contracts.
         * This can reduce gas usage at the cost of bigger contracts.
         */
        inline: zod_1.z.boolean().optional(),
    })
        .optional(),
    /**
     * Safety options for the contract.
     */
    safety: exports.safetyOptionsSchema.optional(),
    /**
     * Optimization options for the contract.
     */
    optimizations: exports.optimizationOptionsSchema.optional(),
    /**
     * If set to true, enables generation of `lazy_deployment_completed()` getter.
     * Does nothing if contract parameters are declared.
     */
    enableLazyDeploymentCompletedGetter: zod_1.z.boolean().optional(),
});
exports.modeSchema = zod_1.z.union([
    zod_1.z.literal("fullWithDecompilation"),
    zod_1.z.literal("full"),
    zod_1.z.literal("funcOnly"),
    zod_1.z.literal("checkOnly"),
]);
/**
 * Per-project configuration options
 *
 * Read more: https://docs.tact-lang.org/book/config#projects
 */
exports.projectSchema = zod_1.z.object({
    /**
     * Name of the project. All generated files are prefixed with it.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-name
     */
    name: zod_1.z.string(),
    /**
     * Path to the project's Tact file. You can only specify one Tact file per project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-path
     */
    path: zod_1.z.string(),
    /**
     * Path to the directory where all generated files will be placed.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-output
     */
    output: zod_1.z.string(),
    /**
     * Compilation options for the project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-options
     */
    options: exports.optionsSchema.optional(),
    /**
     * Compilation mode of the project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-mode
     */
    mode: exports.modeSchema.optional(),
    /**
     * Set verbosity level (higher = more details), default: 1
     */
    verbose: zod_1.z.number().optional(),
});
/**
 * Compiler configuration schema
 *
 * Read more: https://docs.tact-lang.org/book/config
 */
exports.configSchema = zod_1.z.object({
    /**
     * A property for specifying a path or URL to the JSON schema of tact.config.json
     *
     * Read more: https://docs.tact-lang.org/book/config#schema
     */
    $schema: zod_1.z.string().optional(),
    /**
     * List of Tact projects with respective compilation options. Each .tact file represents its own Tact project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects
     */
    projects: zod_1.z.array(exports.projectSchema),
});
