import type { DebugSymbols } from "@scaleton/func-debug-symbols";
import type { BlockNode, InstructionNode, MethodNode, ProcedureNode, ProgramNode } from "../ast/ast";
export interface AssemblyWriterOptions {
    /**
     * If true, some instructions will be output as aliases for readability:
     *
     * For example:
     * - `1 PUSHINT` -> `ONE`
     * - `s0 s1 XCHG` -> `SWAP`
     *
     * `true` by default.
     */
    readonly useAliases?: boolean;
    /**
     * Don't add any additional header comments in file, by default: false
     */
    readonly withoutHeader?: boolean;
    /**
     * If true, shows `//` comment with hex bitcode:
     * ```
     * CTOS                                          // 0xD0
     * 4 LDU                                         // 0xD3 03
     * s0 s1 XCHG                                    // 0x0
     * 1 PUSHINT                                     // 0x7 1
     * AND                                           // 0xB
     * ```
     *
     * `false` by default.
     */
    readonly outputBitcodeAfterInstruction?: boolean;
    readonly debugSymbols?: DebugSymbols;
}
export declare class AssemblyWriter {
    private readonly writer;
    private readonly knownGlobals;
    private readonly knownMethods;
    private readonly knownProcedures;
    private readonly cp0;
    private readonly options;
    constructor(options: AssemblyWriterOptions);
    protected resolveGlobalName(index: number): string;
    protected resolveMethodName(methodId: number): string;
    protected resolveProcedureName(hash: string): string;
    protected writeProgramNode(node: ProgramNode): void;
    protected writeMethodNode(node: MethodNode): void;
    protected writeProcedureNode(node: ProcedureNode): void;
    protected writeBlockNode(node: BlockNode, top: boolean): void;
    protected maybeSpecificWrite(node: InstructionNode): string | null;
    protected writeInstructionNode(node: InstructionNode): void;
    private writeBinaryRepresentationIfNeeded;
    protected writeNode(node: ProgramNode | MethodNode | ProcedureNode | BlockNode | InstructionNode, top?: boolean): void;
    protected output(): string;
    static write(node: ProgramNode | MethodNode | ProcedureNode | BlockNode, options: AssemblyWriterOptions): string;
}
//# sourceMappingURL=assembly-writer.d.ts.map