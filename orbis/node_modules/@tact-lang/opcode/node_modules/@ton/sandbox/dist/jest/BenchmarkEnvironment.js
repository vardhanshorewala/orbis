"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sandboxMetricRawFile = void 0;
const path_1 = require("path");
const node_fs_1 = require("node:fs");
const jest_environment_node_1 = __importDefault(require("jest-environment-node"));
const BenchmarkCommand_1 = require("./BenchmarkCommand");
const metric_1 = require("../metric");
exports.sandboxMetricRawFile = '.sandbox-metric-raw.jsonl';
class BenchmarkEnvironment extends jest_environment_node_1.default {
    constructor(config, context) {
        super(config, context);
        this.command = new BenchmarkCommand_1.BenchmarkCommand(config.projectConfig.testEnvironmentCommand);
        this.rootDir = config.globalConfig.rootDir;
    }
    async setup() {
        if (this.command.doBenchmark) {
            (0, metric_1.createMetricStore)(this.global);
        }
    }
    get resultFile() {
        return (0, path_1.join)(this.rootDir, exports.sandboxMetricRawFile);
    }
    async teardown() {
        if (this.command.doBenchmark) {
            const store = (0, metric_1.getMetricStore)(this.global) || [];
            const fileName = this.resultFile;
            const folder = (0, path_1.dirname)(fileName);
            if (!(0, node_fs_1.existsSync)(folder)) {
                (0, node_fs_1.mkdirSync)(folder, { recursive: true });
            }
            if (!(0, node_fs_1.existsSync)(fileName)) {
                (0, node_fs_1.writeFileSync)(fileName, '');
            }
            for (const item of store) {
                (0, node_fs_1.appendFileSync)(fileName, JSON.stringify(item) + '\n');
            }
            (0, metric_1.resetMetricStore)(this.global);
        }
        await super.teardown();
    }
}
exports.default = BenchmarkEnvironment;
