import { AddressFriendly, ContractMethodName, ContractName, Metric, OpCode, SnapshotMetric } from './collectMetric';
export type KindDelta = 'undefined' | 'init' | 'same' | 'increase' | 'decrease';
export type PathDelta = string;
export type ItemDelta = {
    kind: KindDelta;
    path: PathDelta;
    before: number;
    after: number;
};
export type ListDelta = Record<PathDelta, ItemDelta>;
export type DeltaMetric = {
    kind: KindDelta;
    value: string;
};
export declare const undefinedDeltaMetric: () => DeltaMetric;
export type ColorDelta = (metric: DeltaMetric) => string;
export type DeltaMetrics = Record<string, DeltaMetric>;
export type MethodDelta = Record<ContractMethodName | OpCode, DeltaMetrics>;
export type ContractDelta = Record<ContractName | AddressFriendly, MethodDelta>;
export type DeltaResult = {
    label: string;
    createdAt: Date;
    result: ContractDelta;
};
export type DeltaRow = [contract: string, method: string, ...values: DeltaMetric[]];
export type FlatDeltaResult = {
    header: string[];
    rows: DeltaRow[];
};
export declare function toFlatDeltaResult(deltas: DeltaResult[]): {
    header: string[];
    rows: DeltaRow[];
};
export declare function aggregatedCompareMetric(before: Metric, after: Metric, basePath?: string[]): ListDelta;
export declare function prepareDelta(pair: {
    after: SnapshotMetric;
    before?: SnapshotMetric;
}): DeltaResult;
export declare function makeGasReport(list: SnapshotMetric[]): Array<DeltaResult>;
