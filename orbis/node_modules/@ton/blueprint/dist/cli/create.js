"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const path_1 = __importDefault(require("path"));
const posix_1 = __importDefault(require("path/posix"));
const promises_1 = require("fs/promises");
const arg_1 = __importDefault(require("arg"));
const utils_1 = require("../config/utils");
const tact_config_1 = require("../config/tact.config");
const Runner_1 = require("./Runner");
const template_1 = require("../template");
const utils_2 = require("../utils");
const build_1 = require("../build");
const constants_1 = require("./constants");
async function createFile(templatePath, realPath, replaces) {
    const template = (await (0, promises_1.readFile)(templatePath)).toString('utf-8');
    const lines = template.split('\n');
    const fileName = (0, template_1.executeTemplate)(lines.shift(), replaces);
    const contents = (0, template_1.executeTemplate)(lines.join('\n'), replaces);
    const p = path_1.default.join(realPath, fileName);
    const file = await (0, promises_1.open)(p, 'a+');
    if ((await file.stat()).size > 0) {
        console.warn(`${p} already exists, not changing.`);
        await file.close();
        return;
    }
    await file.writeFile(contents);
    await file.close();
}
async function createFiles(templatePath, realPath, replaces) {
    const contents = await (0, promises_1.readdir)(templatePath);
    for (const file of contents) {
        const tp = path_1.default.join(templatePath, file);
        const rp = path_1.default.join(realPath, file);
        if ((await (0, promises_1.lstat)(tp)).isDirectory()) {
            await createFiles(tp, rp, replaces);
        }
        else {
            await (0, promises_1.mkdir)(path_1.default.dirname(rp), {
                recursive: true,
            });
            await createFile(tp, realPath, replaces);
        }
    }
}
function getFileExtension(lang) {
    if (lang === 'func')
        return 'fc';
    if (lang === 'tolk')
        return 'tolk';
    return 'tact';
}
function addToTactConfig(contractName, contractPath) {
    const tactConfig = (0, tact_config_1.getRootTactConfig)();
    const projectConfig = {
        name: contractName,
        path: contractPath,
        output: path_1.default.join('build', contractName),
        options: {
            debug: false,
            external: false,
        },
        mode: 'full',
    };
    const newConfig = {
        ...tactConfig,
        projects: [...tactConfig.projects, projectConfig],
    };
    (0, tact_config_1.updateRootTactConfig)(newConfig);
}
const create = async (_args, ui) => {
    const localArgs = (0, arg_1.default)({
        '--type': String,
        ...constants_1.helpArgs,
    });
    if (localArgs['--help']) {
        ui.write(constants_1.helpMessages['create']);
        return;
    }
    const name = (0, Runner_1.extractFirstArg)(localArgs) ?? (await ui.input('Contract name (PascalCase)'));
    (0, utils_2.assertValidContractName)(name);
    const which = (await (0, utils_2.selectOption)(constants_1.templateTypes, {
        ui,
        msg: 'What type of contract do you want to create?',
        hint: localArgs['--type'],
    })).value;
    const [lang, template] = which.split('-');
    const snakeName = (0, utils_2.toSnakeCase)(name);
    const contractPath = posix_1.default.join('contracts', snakeName + '.' + getFileExtension(lang));
    const replaces = {
        name,
        loweredName: name.substring(0, 1).toLowerCase() + name.substring(1),
        snakeName,
        contractPath,
    };
    const config = await (0, utils_1.getConfig)();
    if (lang === 'tact') {
        await createFiles(path_1.default.join(template_1.TEMPLATES_DIR, lang, template), process.cwd(), replaces);
        addToTactConfig(name, contractPath);
        await (0, build_1.buildOne)(name, ui);
    }
    else {
        const commonPath = config?.separateCompilables ? 'common' : 'not-separated-common';
        await createFiles(path_1.default.join(template_1.TEMPLATES_DIR, lang, commonPath), process.cwd(), replaces);
        await createFiles(path_1.default.join(template_1.TEMPLATES_DIR, lang, template), process.cwd(), replaces);
    }
};
exports.create = create;
