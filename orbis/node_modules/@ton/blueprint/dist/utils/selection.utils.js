"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findScripts = exports.findContracts = exports.findCompiles = void 0;
exports.selectOption = selectOption;
exports.selectFile = selectFile;
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const fs_1 = require("fs");
const tact_config_1 = require("../config/tact.config");
const compile_1 = require("../compile/compile");
const paths_1 = require("../paths");
const object_utils_1 = require("./object.utils");
const utils_1 = require("../config/utils");
const file_utils_1 = require("./file.utils");
const findCompiles = async (directory) => {
    const dir = directory ?? (await (0, compile_1.getCompilablesDirectory)());
    if (!(0, fs_1.existsSync)(dir)) {
        return [];
    }
    const files = await promises_1.default.readdir(dir, {
        recursive: (await (0, utils_1.getConfig)())?.recursiveWrappers ?? false,
        withFileTypes: true,
    });
    const compilables = files.filter((file) => file.isFile() && file.name.endsWith(compile_1.COMPILE_END));
    return compilables.map(file_utils_1.extractFile).map((file) => ({
        path: path_1.default.join(file.path, file.name),
        name: file.name.slice(0, file.name.length - compile_1.COMPILE_END.length),
    }));
};
exports.findCompiles = findCompiles;
const findContracts = async () => {
    const compilables = await (0, exports.findCompiles)();
    const tactRootConfig = (0, tact_config_1.getRootTactConfig)();
    return (0, object_utils_1.distinct)([
        ...compilables.map((file) => file.name),
        ...(tactRootConfig?.projects.map((project) => project.name) ?? []),
    ]);
};
exports.findContracts = findContracts;
const findScripts = async () => {
    const dirents = await promises_1.default.readdir(paths_1.SCRIPTS_DIR, {
        recursive: true,
        withFileTypes: true,
    });
    const scripts = dirents.filter((dirent) => dirent.isFile() && dirent.name.endsWith('.ts'));
    return scripts
        .map(file_utils_1.extractFile)
        .map((script) => ({
        name: path_1.default.join(script.path.slice(paths_1.SCRIPTS_DIR.length + 1), path_1.default.parse(script.name).name),
        path: path_1.default.join(script.path, script.name),
    }))
        .sort((a, b) => (a.name >= b.name ? 1 : -1));
};
exports.findScripts = findScripts;
async function selectOption(options, opts) {
    if (opts.hint) {
        const found = options.find((o) => o.value === opts.hint);
        if (found === undefined) {
            throw new Error(`Could not find option '${opts.hint}'`);
        }
        return found;
    }
    else {
        return await opts.ui.choose(opts.msg, options, (o) => o.name);
    }
}
async function selectFile(files, opts) {
    let selected;
    if (opts.hint) {
        const found = files.find((f) => f.name.toLowerCase() === opts.hint?.toLowerCase());
        if (found === undefined) {
            throw new Error(`Could not find file with name '${opts.hint}'`);
        }
        selected = found;
        opts.ui.write(`Using file: ${selected.name}`);
    }
    else {
        if (files.length === 1) {
            selected = files[0];
            opts.ui.write(`Using file: ${selected.name}`);
        }
        else {
            selected = await opts.ui.choose('Choose file to use', files, (f) => f.name);
        }
    }
    return {
        ...selected,
        module: opts.import !== false ? await Promise.resolve(`${selected.path}`).then(s => __importStar(require(s))) : undefined,
    };
}
