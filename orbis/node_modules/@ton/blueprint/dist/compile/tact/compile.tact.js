"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTactConfigForContract = getTactConfigForContract;
exports.getTactVersion = getTactVersion;
exports.extractContractConfig = extractContractConfig;
exports.doCompileTact = doCompileTact;
const path_1 = __importDefault(require("path"));
const compiler_1 = require("@tact-lang/compiler");
const core_1 = require("@ton/core");
const paths_1 = require("../../paths");
const OverwritableVirtualFileSystem_1 = require("./OverwritableVirtualFileSystem");
const tact_config_1 = require("../../config/tact.config");
function findTactBoc(fs) {
    let buf = undefined;
    for (const [k, v] of fs) {
        if (k.endsWith('.code.boc')) {
            buf = v;
            break;
        }
    }
    if (buf === undefined) {
        throw new Error('Could not find boc in tact compilation result');
    }
    return core_1.Cell.fromBoc(buf)[0];
}
function getTactConfigForContract(name) {
    const config = (0, tact_config_1.getRootTactConfig)();
    const projects = config.projects.filter((project) => project.name === name);
    if (!projects.length) {
        return;
    }
    return {
        ...config,
        projects,
    };
}
function getRootTactConfigOptionsForContract(name) {
    const filteredTactConfig = getTactConfigForContract(name);
    if (!filteredTactConfig) {
        return;
    }
    const [project] = filteredTactConfig.projects;
    return project?.options;
}
async function getTactVersion() {
    const packageJsonPath = require.resolve('@tact-lang/compiler/package.json');
    const { version } = await Promise.resolve(`${packageJsonPath}`).then(s => __importStar(require(s)));
    return version;
}
function isLegacyTactConfig(config) {
    return 'lang' in config;
}
function extractContractConfig(config, name) {
    const project = config.projects.find((p) => p.name === name);
    if (!project) {
        throw new Error(`Config for project ${name} not found`);
    }
    return project;
}
function getTactBuildProject(config, name) {
    if (isLegacyTactConfig(config)) {
        const rootConfigOptions = getRootTactConfigOptionsForContract(name);
        return {
            name: 'tact',
            path: config.target,
            output: path_1.default.join(paths_1.BUILD_DIR, name),
            options: { ...rootConfigOptions, ...config.options },
        };
    }
    return extractContractConfig(config, name);
}
async function doCompileTact(config, name) {
    const fs = new OverwritableVirtualFileSystem_1.OverwritableVirtualFileSystem(process.cwd());
    const buildConfig = {
        config: getTactBuildProject(config, name),
        stdlib: (0, compiler_1.createVirtualFileSystem)('@stdlib', compiler_1.stdLibFiles),
        project: fs,
    };
    const res = await (0, compiler_1.build)(buildConfig);
    if (!res.ok) {
        throw new Error('Could not compile tact');
    }
    const code = findTactBoc(fs.overwrites);
    return {
        lang: 'tact',
        fs: fs.overwrites,
        code,
        options: buildConfig.config.options,
        version: await getTactVersion(),
    };
}
