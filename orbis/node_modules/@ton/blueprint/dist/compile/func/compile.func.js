"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFuncVersion = getFuncVersion;
exports.doCompileFunc = doCompileFunc;
const core_1 = require("@ton/core");
const func_js_1 = require("@ton-community/func-js");
async function getFuncVersion() {
    return (await (0, func_js_1.compilerVersion)()).funcVersion;
}
async function doCompileFunc(config) {
    const cr = await (0, func_js_1.compileFunc)(config);
    if (cr.status === 'error') {
        throw new Error(cr.message);
    }
    let targets = [];
    if (config.targets) {
        targets = config.targets;
    }
    else if (Array.isArray(config.sources)) {
        targets = config.sources.map((s) => s.filename);
    }
    const result = {
        lang: 'func',
        fiftCode: cr.fiftCode,
        code: core_1.Cell.fromBase64(cr.codeBoc),
        targets,
        snapshot: cr.snapshot,
        version: await getFuncVersion(),
        debugInfo: cr.debugInfo,
        marks: cr.debugMarksBoc === undefined ? undefined : core_1.Cell.fromBase64(cr.debugMarksBoc),
    };
    if (config.debugInfo) {
        const crRegular = await (0, func_js_1.compileFunc)({
            ...config,
            debugInfo: false,
        });
        if (crRegular.status === 'error') {
            throw new Error('Debug info compilation succeeded, but regular compilation failed, please report this bug: ' +
                crRegular.message);
        }
        if (!core_1.Cell.fromBase64(crRegular.codeBoc).hash().equals(result.code.hash())) {
            console.error('Debug info compilation yielded different code than regular compilation, please report this bug.');
        }
        let sandbox;
        try {
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            sandbox = require('@ton/sandbox');
        }
        catch (_) {
            console.error('Could not register debug info in sandbox because it is not installed.');
        }
        if (sandbox?.registerCompiledContract) {
            sandbox.registerCompiledContract(result.code, result.debugInfo, result.marks);
        }
    }
    return result;
}
