#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const arg_1 = __importDefault(require("arg"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const _1 = require(".");
async function tolkJsCli() {
    const args = (0, arg_1.default)({
        '--version': Boolean,
        '--help': Boolean,
        '--require-version': String,
        '--output-json': String,
        '--output-fift': String,
        '--experimental-options': String,
        '--cwd': String,
        '-v': '--version',
        '-h': '--help',
        '-o': '--output-json',
        '-x': '--experimental-options',
        '-C': '--cwd',
    });
    if (args['--help']) {
        console.log(`Usage: tolk-js [OPTIONS] entrypointFileName.tolk
Options:
-h, --help — print this help and exit
-v, --version — print Tolk compiler version and exit
--require-version <version> — exit if Tolk compiler version differs from the required
--output-json <filename>, -o <filename> — output .json file with BoC, Fift code, and some other stuff
--output-fif <filename> - output .fif file with Fift code output
--experimental-options <names> - set experimental compiler options, comma-separated
--cwd <path>, -C <path> — sets cwd to locate .tolk files (doesn't affect output paths)
`);
        process.exit(0);
    }
    const version = await (0, _1.getTolkCompilerVersion)();
    if (args['--version']) {
        console.log(`Tolk compiler v${version}`);
        process.exit(0);
    }
    if (args['--require-version'] !== undefined && version !== args['--require-version']) {
        throw `Failed to run tolk-js: --require-version = ${args['--require-version']}, but Tolk compiler version = ${version}`;
    }
    if (args._.length !== 1) {
        throw 'entrypointFileName wasn\'t specified. Run with -h to see help.';
    }
    console.log(`Compiling using Tolk v${version}`);
    const cwd = args['--cwd'];
    const result = await (0, _1.runTolkCompiler)({
        entrypointFileName: args._[0],
        experimentalOptions: args['--experimental-options'],
        fsReadCallback: p => fs_1.default.readFileSync(cwd ? path_1.default.join(cwd, p) : p, 'utf-8'),
    });
    if (result.status === 'error') {
        throw result.message;
    }
    if (args['--output-json']) {
        fs_1.default.writeFileSync(args['--output-json'], JSON.stringify({
            artifactVersion: 1,
            tolkVersion: version,
            fiftCode: result.fiftCode,
            codeBoc64: result.codeBoc64,
            codeHashHex: result.codeHashHex,
            sourcesSnapshot: result.sourcesSnapshot,
        }, null, 2));
    }
    if (args['--output-fift']) {
        fs_1.default.writeFileSync(args['--output-fift'], result.fiftCode);
    }
    console.log('Compiled successfully!');
    if (!args['--output-json'] && !args['--output-fift']) {
        console.warn('Warning: No output options were specified. Run with -h to see help.');
    }
    else {
        console.log('Written output files.');
    }
}
tolkJsCli().catch(ex => {
    console.error(ex);
    process.exit(1);
});
