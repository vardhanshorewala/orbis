"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setGlobalVersion = exports.fetchConfig = void 0;
const core_1 = require("@ton/core");
async function fetchConfig(network, maxRetries = 5) {
    let apiDomain;
    let retryLeft = maxRetries;
    if (network == 'testnet') {
        apiDomain = 'testnet.toncenter.com';
    }
    else if (network == 'mainnet') {
        apiDomain = 'toncenter.com';
    }
    else {
        throw new RangeError(`Unknown network: ${network}`);
    }
    const sleep = (timeout) => new Promise((resolve) => {
        setTimeout(resolve, timeout);
    });
    const headers = new Headers();
    headers.append('Accept', 'application/json');
    do {
        try {
            const resp = await fetch(`https://${apiDomain}/api/v2/getConfigAll`, {
                method: 'GET',
                headers,
            });
            const jsonResp = await resp.json();
            if (jsonResp.ok) {
                return core_1.Cell.fromBase64(jsonResp.result.config.bytes);
            }
            else {
                throw new Error(JSON.stringify(jsonResp));
            }
        }
        catch (e) {
            retryLeft--;
            // eslint-disable-next-line no-console
            console.error(`Error fetching config:${e.toString()}`);
            await sleep(1000);
        }
    } while (retryLeft > 0);
    throw new Error(`Failed to fetch config after ${maxRetries} attempts`);
}
exports.fetchConfig = fetchConfig;
function setGlobalVersion(config, version, capabilites) {
    const parsedConfig = core_1.Dictionary.loadDirect(core_1.Dictionary.Keys.Int(32), core_1.Dictionary.Values.Cell(), config);
    let changed = false;
    const param8 = parsedConfig.get(8);
    if (!param8) {
        throw new Error('[setGlobalVersion] parameter 8 is not found!');
    }
    const ds = param8.beginParse();
    const tag = ds.loadUint(8);
    const curVersion = ds.loadUint(32);
    const newValue = (0, core_1.beginCell)().storeUint(tag, 8);
    if (curVersion != version) {
        changed = true;
    }
    newValue.storeUint(version, 32);
    if (capabilites) {
        const curCapabilities = ds.loadUintBig(64);
        if (capabilites != curCapabilities) {
            changed = true;
        }
        newValue.storeUint(capabilites, 64);
    }
    else {
        newValue.storeSlice(ds);
    }
    // If any changes, serialize
    if (changed) {
        parsedConfig.set(8, newValue.endCell());
        return (0, core_1.beginCell)().storeDictDirect(parsedConfig).endCell();
    }
    return config;
}
exports.setGlobalVersion = setGlobalVersion;
