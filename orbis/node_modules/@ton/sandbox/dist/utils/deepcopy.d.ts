/// <reference types="node" />
import { Address, Cell, Dictionary, DictionaryKeyTypes } from '@ton/core';
type Primitive = undefined | null | boolean | number | string | bigint | symbol;
type DeepCopiable = Primitive | Buffer | Address | Cell | Map<DeepCopiable, DeepCopiable> | DeepCopiable[] | Partial<{
    [key: Partial<string | number | symbol>]: DeepCopiable;
}> | Dictionary<DictionaryKeyTypes, DeepCopiable>;
type InterfaceToType<T> = {
    [key in keyof T]: InterfaceToType<T[key]>;
};
type IsCopiable<T> = T extends DeepCopiable ? true : InterfaceToType<T> extends DeepCopiable ? true : false;
export declare function deepcopy<T extends IsCopiable<T> extends true ? unknown : DeepCopiable>(obj: T): T;
export {};
