"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugTransaction = exports.debugGetMethod = void 0;
const Net = __importStar(require("net"));
const Debuggee_1 = require("./Debuggee");
const TVMDebugSession_1 = require("./TVMDebugSession");
const port = 42069;
function initDebuggee(executor) {
    let dbg;
    const promise = new Promise((resolve) => {
        dbg = new Debuggee_1.Debuggee(executor, resolve);
    });
    return { dbg, promise };
}
async function debugGetMethod(executor, args, debugInfo) {
    // eslint-disable-next-line no-console
    console.log('Launched get method debug session. Please connect using the extension.');
    const { dbg, promise } = initDebuggee(executor);
    dbg.prepareGetMethod(args, debugInfo);
    const server = Net.createServer((socket) => {
        const session = new TVMDebugSession_1.TVMDebugSession(dbg);
        session.setRunAsServer(true);
        session.start(socket, socket);
    }).listen(port);
    const result = await promise;
    server.close();
    return result;
}
exports.debugGetMethod = debugGetMethod;
async function debugTransaction(executor, args, debugInfo) {
    // eslint-disable-next-line no-console
    console.log('Launched transaction debug session. Please connect using the extension.');
    const { dbg, promise } = initDebuggee(executor);
    dbg.prepareTransaction(args, debugInfo);
    const server = Net.createServer((socket) => {
        const session = new TVMDebugSession_1.TVMDebugSession(dbg);
        session.setRunAsServer(true);
        session.start(socket, socket);
    }).listen(port);
    const result = await promise;
    server.close();
    return result;
}
exports.debugTransaction = debugTransaction;
