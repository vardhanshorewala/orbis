/// <reference types="node" />
import { Builder } from '@ton/core';
import { Slice } from '@ton/core';
import { Cell } from '@ton/core';
import { Dictionary } from '@ton/core';
export declare function bitLen(n: number): number;
export interface Bool {
    readonly kind: 'Bool';
    readonly value: boolean;
}
export declare function loadBool(slice: Slice): Bool;
export declare function storeBool(bool: Bool): (builder: Builder) => void;
export declare function loadBoolFalse(slice: Slice): Bool;
export declare function loadBoolTrue(slice: Slice): Bool;
export declare function copyCellToBuilder(from: Cell, to: Builder): void;
export interface Unit {
    readonly kind: 'Unit';
}
export interface True {
    readonly kind: 'True';
}
export type Maybe<X> = Maybe_nothing<X> | Maybe_just<X>;
export interface Maybe_nothing<X> {
    readonly kind: 'Maybe_nothing';
}
export interface Maybe_just<X> {
    readonly kind: 'Maybe_just';
    readonly value: X;
}
export interface Hashmap<X> {
    readonly kind: 'Hashmap';
    readonly n: number;
    readonly l: number;
    readonly m: number;
    readonly label: HmLabel;
    readonly node: HashmapNode<X>;
}
export type HashmapNode<X> = HashmapNode_hmn_leaf<X> | HashmapNode_hmn_fork<X>;
export interface HashmapNode_hmn_leaf<X> {
    readonly kind: 'HashmapNode_hmn_leaf';
    readonly value: X;
}
export interface HashmapNode_hmn_fork<X> {
    readonly kind: 'HashmapNode_hmn_fork';
    readonly n: number;
    readonly left: Hashmap<X>;
    readonly right: Hashmap<X>;
}
export type HmLabel = HmLabel_hml_short | HmLabel_hml_long | HmLabel_hml_same;
export interface HmLabel_hml_short {
    readonly kind: 'HmLabel_hml_short';
    readonly m: number;
    readonly n: number;
    readonly len: Unary;
    readonly s: Array<boolean>;
}
export interface HmLabel_hml_long {
    readonly kind: 'HmLabel_hml_long';
    readonly m: number;
    readonly n: number;
    readonly s: Array<boolean>;
}
export interface HmLabel_hml_same {
    readonly kind: 'HmLabel_hml_same';
    readonly m: number;
    readonly v: boolean;
    readonly n: number;
}
export type Unary = Unary_unary_zero | Unary_unary_succ;
export interface Unary_unary_zero {
    readonly kind: 'Unary_unary_zero';
}
export interface Unary_unary_succ {
    readonly kind: 'Unary_unary_succ';
    readonly n: number;
    readonly x: Unary;
}
export interface Coins {
    readonly kind: 'Coins';
    readonly grams: bigint;
}
export interface ExtraCurrencyCollection {
    readonly kind: 'ExtraCurrencyCollection';
    readonly dict: Dictionary<number, bigint>;
}
export interface SigPubKey {
    readonly kind: 'SigPubKey';
    readonly pubkey: Buffer;
}
export interface CryptoSignatureSimple {
    readonly kind: 'CryptoSignatureSimple';
    readonly R: Buffer;
    readonly s: Buffer;
}
export type CryptoSignature = CryptoSignature_chained_signature | CryptoSignature__;
export interface CryptoSignature_chained_signature {
    readonly kind: 'CryptoSignature_chained_signature';
    readonly signed_cert: SignedCertificate;
    readonly temp_key_signature: CryptoSignatureSimple;
}
export interface CryptoSignature__ {
    readonly kind: 'CryptoSignature__';
    readonly anon0: CryptoSignatureSimple;
}
export interface Certificate {
    readonly kind: 'Certificate';
    readonly temp_key: SigPubKey;
    readonly valid_since: number;
    readonly valid_until: number;
}
export interface SignedCertificate {
    readonly kind: 'SignedCertificate';
    readonly certificate: Certificate;
    readonly certificate_signature: CryptoSignature;
}
export type ValidatorDescr = ValidatorDescr_validator | ValidatorDescr_validator_addr;
export interface ValidatorDescr_validator {
    readonly kind: 'ValidatorDescr_validator';
    readonly public_key: SigPubKey;
    readonly weight: bigint;
}
export interface ValidatorDescr_validator_addr {
    readonly kind: 'ValidatorDescr_validator_addr';
    readonly public_key: SigPubKey;
    readonly weight: bigint;
    readonly adnl_addr: Buffer;
}
export type ValidatorSet = ValidatorSet_validators | ValidatorSet_validators_ext;
export interface ValidatorSet_validators {
    readonly kind: 'ValidatorSet_validators';
    readonly utime_since: number;
    readonly utime_until: number;
    readonly total: number;
    readonly main: number;
    readonly list: Dictionary<number, ValidatorDescr>;
}
export interface ValidatorSet_validators_ext {
    readonly kind: 'ValidatorSet_validators_ext';
    readonly utime_since: number;
    readonly utime_until: number;
    readonly total: number;
    readonly main: number;
    readonly total_weight: bigint;
    readonly list: Dictionary<number, ValidatorDescr>;
}
export type ConfigParam = ConfigParam__ | ConfigParam__1 | ConfigParam__2 | ConfigParam__3 | ConfigParam__4 | ConfigParam__5 | ConfigParam__6 | ConfigParam__7 | ConfigParam__8 | ConfigParam__9 | ConfigParam__10 | ConfigParam__11 | ConfigParam__12 | ConfigParam__13 | ConfigParam__14 | ConfigParam__15 | ConfigParam__16 | ConfigParam__17 | ConfigParam__18 | ConfigParam__19 | ConfigParam_config_mc_gas_prices | ConfigParam_config_gas_prices | ConfigParam_config_mc_block_limits | ConfigParam_config_block_limits | ConfigParam_config_mc_fwd_prices | ConfigParam_config_fwd_prices | ConfigParam__26 | ConfigParam__27 | ConfigParam__28 | ConfigParam__29 | ConfigParam__30 | ConfigParam__31 | ConfigParam__32 | ConfigParam__33 | ConfigParam__34 | ConfigParam__35 | ConfigParam__36 | ConfigParam__37 | ConfigParam__38 | ConfigParam__39 | ConfigParam__40 | ConfigParam__41 | ConfigParam__42 | ConfigParam__43 | ConfigParam__44 | ConfigParam__45;
export interface ConfigParam__ {
    readonly kind: 'ConfigParam__';
    readonly config_addr: Buffer;
}
export interface ConfigParam__1 {
    readonly kind: 'ConfigParam__1';
    readonly elector_addr: Buffer;
}
export interface ConfigParam__2 {
    readonly kind: 'ConfigParam__2';
    readonly minter_addr: Buffer;
}
export interface ConfigParam__3 {
    readonly kind: 'ConfigParam__3';
    readonly fee_collector_addr: Buffer;
}
export interface ConfigParam__4 {
    readonly kind: 'ConfigParam__4';
    readonly dns_root_addr: Buffer;
}
export interface ConfigParam__5 {
    readonly kind: 'ConfigParam__5';
    readonly anon0: BurningConfig;
}
export interface ConfigParam__6 {
    readonly kind: 'ConfigParam__6';
    readonly mint_new_price: bigint;
    readonly mint_add_price: bigint;
}
export interface ConfigParam__7 {
    readonly kind: 'ConfigParam__7';
    readonly to_mint: ExtraCurrencyCollection;
}
export interface ConfigParam__8 {
    readonly kind: 'ConfigParam__8';
    readonly anon0: GlobalVersion;
}
export interface ConfigParam__9 {
    readonly kind: 'ConfigParam__9';
    readonly mandatory_params: Dictionary<number, True>;
}
export interface ConfigParam__10 {
    readonly kind: 'ConfigParam__10';
    readonly critical_params: Dictionary<number, True>;
}
export interface ConfigParam__11 {
    readonly kind: 'ConfigParam__11';
    readonly anon0: ConfigVotingSetup;
}
export interface ConfigParam__12 {
    readonly kind: 'ConfigParam__12';
    readonly workchains: Dictionary<number, WorkchainDescr>;
}
export interface ConfigParam__13 {
    readonly kind: 'ConfigParam__13';
    readonly anon0: ComplaintPricing;
}
export interface ConfigParam__14 {
    readonly kind: 'ConfigParam__14';
    readonly anon0: BlockCreateFees;
}
export interface ConfigParam__15 {
    readonly kind: 'ConfigParam__15';
    readonly validators_elected_for: number;
    readonly elections_start_before: number;
    readonly elections_end_before: number;
    readonly stake_held_for: number;
}
export interface ConfigParam__16 {
    readonly kind: 'ConfigParam__16';
    readonly max_validators: number;
    readonly max_main_validators: number;
    readonly min_validators: number;
}
export interface ConfigParam__17 {
    readonly kind: 'ConfigParam__17';
    readonly min_stake: bigint;
    readonly max_stake: bigint;
    readonly min_total_stake: bigint;
    readonly max_stake_factor: number;
}
export interface ConfigParam__18 {
    readonly kind: 'ConfigParam__18';
    readonly anon0: Dictionary<number, StoragePrices>;
}
export interface ConfigParam__19 {
    readonly kind: 'ConfigParam__19';
    readonly global_id: number;
}
export interface ConfigParam_config_mc_gas_prices {
    readonly kind: 'ConfigParam_config_mc_gas_prices';
    readonly anon0: GasLimitsPrices;
}
export interface ConfigParam_config_gas_prices {
    readonly kind: 'ConfigParam_config_gas_prices';
    readonly anon0: GasLimitsPrices;
}
export interface ConfigParam_config_mc_block_limits {
    readonly kind: 'ConfigParam_config_mc_block_limits';
    readonly anon0: BlockLimits;
}
export interface ConfigParam_config_block_limits {
    readonly kind: 'ConfigParam_config_block_limits';
    readonly anon0: BlockLimits;
}
export interface ConfigParam_config_mc_fwd_prices {
    readonly kind: 'ConfigParam_config_mc_fwd_prices';
    readonly anon0: MsgForwardPrices;
}
export interface ConfigParam_config_fwd_prices {
    readonly kind: 'ConfigParam_config_fwd_prices';
    readonly anon0: MsgForwardPrices;
}
export interface ConfigParam__26 {
    readonly kind: 'ConfigParam__26';
    readonly anon0: CatchainConfig;
}
export interface ConfigParam__27 {
    readonly kind: 'ConfigParam__27';
    readonly anon0: ConsensusConfig;
}
export interface ConfigParam__28 {
    readonly kind: 'ConfigParam__28';
    readonly fundamental_smc_addr: Dictionary<bigint, True>;
}
export interface ConfigParam__29 {
    readonly kind: 'ConfigParam__29';
    readonly prev_validators: ValidatorSet;
}
export interface ConfigParam__30 {
    readonly kind: 'ConfigParam__30';
    readonly prev_temp_validators: ValidatorSet;
}
export interface ConfigParam__31 {
    readonly kind: 'ConfigParam__31';
    readonly cur_validators: ValidatorSet;
}
export interface ConfigParam__32 {
    readonly kind: 'ConfigParam__32';
    readonly cur_temp_validators: ValidatorSet;
}
export interface ConfigParam__33 {
    readonly kind: 'ConfigParam__33';
    readonly next_validators: ValidatorSet;
}
export interface ConfigParam__34 {
    readonly kind: 'ConfigParam__34';
    readonly next_temp_validators: ValidatorSet;
}
export interface ConfigParam__35 {
    readonly kind: 'ConfigParam__35';
    readonly anon0: Dictionary<bigint, ValidatorSignedTempKey>;
}
export interface ConfigParam__36 {
    readonly kind: 'ConfigParam__36';
    readonly anon0: MisbehaviourPunishmentConfig;
}
export interface ConfigParam__37 {
    readonly kind: 'ConfigParam__37';
    readonly anon0: SizeLimitsConfig;
}
export interface ConfigParam__38 {
    readonly kind: 'ConfigParam__38';
    readonly anon0: SuspendedAddressList;
}
export interface ConfigParam__39 {
    readonly kind: 'ConfigParam__39';
    readonly anon0: PrecompiledContractsConfig;
}
export interface ConfigParam__40 {
    readonly kind: 'ConfigParam__40';
    readonly anon0: OracleBridgeParams;
}
export interface ConfigParam__41 {
    readonly kind: 'ConfigParam__41';
    readonly anon0: OracleBridgeParams;
}
export interface ConfigParam__42 {
    readonly kind: 'ConfigParam__42';
    readonly anon0: OracleBridgeParams;
}
export interface ConfigParam__43 {
    readonly kind: 'ConfigParam__43';
    readonly anon0: JettonBridgeParams;
}
export interface ConfigParam__44 {
    readonly kind: 'ConfigParam__44';
    readonly anon0: JettonBridgeParams;
}
export interface ConfigParam__45 {
    readonly kind: 'ConfigParam__45';
    readonly anon0: JettonBridgeParams;
}
export interface BurningConfig {
    readonly kind: 'BurningConfig';
    readonly blackhole_addr: Maybe<Buffer>;
    readonly fee_burn_num: number;
    readonly fee_burn_denom: number;
}
export interface GlobalVersion {
    readonly kind: 'GlobalVersion';
    readonly version: number;
    readonly capabilities: bigint;
}
export interface ConfigProposalSetup {
    readonly kind: 'ConfigProposalSetup';
    readonly min_tot_rounds: number;
    readonly max_tot_rounds: number;
    readonly min_wins: number;
    readonly max_losses: number;
    readonly min_store_sec: number;
    readonly max_store_sec: number;
    readonly bit_price: number;
    readonly _cell_price: number;
}
export interface ConfigVotingSetup {
    readonly kind: 'ConfigVotingSetup';
    readonly normal_params: ConfigProposalSetup;
    readonly critical_params: ConfigProposalSetup;
}
export interface ConfigProposal {
    readonly kind: 'ConfigProposal';
    readonly param_id: number;
    readonly param_value: Maybe<Cell>;
    readonly if_hash_equal: Maybe<bigint>;
}
export interface ConfigProposalStatus {
    readonly kind: 'ConfigProposalStatus';
    readonly expires: number;
    readonly proposal: ConfigProposal;
    readonly is_critical: Bool;
    readonly voters: Dictionary<number, True>;
    readonly remaining_weight: bigint;
    readonly validator_set_id: bigint;
    readonly rounds_remaining: number;
    readonly wins: number;
    readonly losses: number;
}
export type WorkchainFormat = WorkchainFormat_wfmt_basic | WorkchainFormat_wfmt_ext;
export interface WorkchainFormat_wfmt_basic {
    readonly kind: 'WorkchainFormat_wfmt_basic';
    readonly vm_version: number;
    readonly vm_mode: bigint;
}
export interface WorkchainFormat_wfmt_ext {
    readonly kind: 'WorkchainFormat_wfmt_ext';
    readonly min_addr_len: number;
    readonly max_addr_len: number;
    readonly addr_len_step: number;
    readonly workchain_type_id: number;
}
export interface WcSplitMergeTimings {
    readonly kind: 'WcSplitMergeTimings';
    readonly split_merge_delay: number;
    readonly split_merge_interval: number;
    readonly min_split_merge_interval: number;
    readonly max_split_merge_delay: number;
}
export type WorkchainDescr = WorkchainDescr_workchain | WorkchainDescr_workchain_v2;
export interface WorkchainDescr_workchain {
    readonly kind: 'WorkchainDescr_workchain';
    readonly enabled_since: number;
    readonly monitor_min_split: number;
    readonly min_split: number;
    readonly max_split: number;
    readonly basic: number;
    readonly active: Bool;
    readonly accept_msgs: Bool;
    readonly flags: number;
    readonly zerostate_root_hash: Buffer;
    readonly zerostate_file_hash: Buffer;
    readonly version: number;
    readonly format: WorkchainFormat;
}
export interface WorkchainDescr_workchain_v2 {
    readonly kind: 'WorkchainDescr_workchain_v2';
    readonly enabled_since: number;
    readonly monitor_min_split: number;
    readonly min_split: number;
    readonly max_split: number;
    readonly basic: number;
    readonly active: Bool;
    readonly accept_msgs: Bool;
    readonly flags: number;
    readonly zerostate_root_hash: Buffer;
    readonly zerostate_file_hash: Buffer;
    readonly version: number;
    readonly format: WorkchainFormat;
    readonly split_merge_timings: WcSplitMergeTimings;
}
export interface ComplaintPricing {
    readonly kind: 'ComplaintPricing';
    readonly deposit: bigint;
    readonly bit_price: bigint;
    readonly _cell_price: bigint;
}
export interface BlockCreateFees {
    readonly kind: 'BlockCreateFees';
    readonly masterchain_block_fee: bigint;
    readonly basechain_block_fee: bigint;
}
export interface StoragePrices {
    readonly kind: 'StoragePrices';
    readonly utime_since: number;
    readonly bit_price_ps: bigint;
    readonly _cell_price_ps: bigint;
    readonly mc_bit_price_ps: bigint;
    readonly mc_cell_price_ps: bigint;
}
export type GasLimitsPrices = GasLimitsPrices_gas_prices | GasLimitsPrices_gas_prices_ext | GasLimitsPrices_gas_flat_pfx;
export interface GasLimitsPrices_gas_prices {
    readonly kind: 'GasLimitsPrices_gas_prices';
    readonly gas_price: bigint;
    readonly gas_limit: bigint;
    readonly gas_credit: bigint;
    readonly block_gas_limit: bigint;
    readonly freeze_due_limit: bigint;
    readonly delete_due_limit: bigint;
}
export interface GasLimitsPrices_gas_prices_ext {
    readonly kind: 'GasLimitsPrices_gas_prices_ext';
    readonly gas_price: bigint;
    readonly gas_limit: bigint;
    readonly special_gas_limit: bigint;
    readonly gas_credit: bigint;
    readonly block_gas_limit: bigint;
    readonly freeze_due_limit: bigint;
    readonly delete_due_limit: bigint;
}
export interface GasLimitsPrices_gas_flat_pfx {
    readonly kind: 'GasLimitsPrices_gas_flat_pfx';
    readonly flat_gas_limit: bigint;
    readonly flat_gas_price: bigint;
    readonly other: GasLimitsPrices;
}
export interface ParamLimits {
    readonly kind: 'ParamLimits';
    readonly underload: number;
    readonly soft_limit: number;
    readonly hard_limit: number;
}
export interface BlockLimits {
    readonly kind: 'BlockLimits';
    readonly bytes: ParamLimits;
    readonly gas: ParamLimits;
    readonly lt_delta: ParamLimits;
}
export interface MsgForwardPrices {
    readonly kind: 'MsgForwardPrices';
    readonly lump_price: bigint;
    readonly bit_price: bigint;
    readonly _cell_price: bigint;
    readonly ihr_price_factor: number;
    readonly first_frac: number;
    readonly next_frac: number;
}
export type CatchainConfig = CatchainConfig_catchain_config | CatchainConfig_catchain_config_new;
export interface CatchainConfig_catchain_config {
    readonly kind: 'CatchainConfig_catchain_config';
    readonly mc_catchain_lifetime: number;
    readonly shard_catchain_lifetime: number;
    readonly shard_validators_lifetime: number;
    readonly shard_validators_num: number;
}
export interface CatchainConfig_catchain_config_new {
    readonly kind: 'CatchainConfig_catchain_config_new';
    readonly flags: number;
    readonly shuffle_mc_validators: Bool;
    readonly mc_catchain_lifetime: number;
    readonly shard_catchain_lifetime: number;
    readonly shard_validators_lifetime: number;
    readonly shard_validators_num: number;
}
export type ConsensusConfig = ConsensusConfig_consensus_config | ConsensusConfig_consensus_config_new | ConsensusConfig_consensus_config_v3 | ConsensusConfig_consensus_config_v4;
export interface ConsensusConfig_consensus_config {
    readonly kind: 'ConsensusConfig_consensus_config';
    readonly round_candidates: number;
    readonly next_candidate_delay_ms: number;
    readonly consensus_timeout_ms: number;
    readonly fast_attempts: number;
    readonly attempt_duration: number;
    readonly catchain_max_deps: number;
    readonly max_block_bytes: number;
    readonly max_collated_bytes: number;
}
export interface ConsensusConfig_consensus_config_new {
    readonly kind: 'ConsensusConfig_consensus_config_new';
    readonly flags: number;
    readonly new_catchain_ids: Bool;
    readonly round_candidates: number;
    readonly next_candidate_delay_ms: number;
    readonly consensus_timeout_ms: number;
    readonly fast_attempts: number;
    readonly attempt_duration: number;
    readonly catchain_max_deps: number;
    readonly max_block_bytes: number;
    readonly max_collated_bytes: number;
}
export interface ConsensusConfig_consensus_config_v3 {
    readonly kind: 'ConsensusConfig_consensus_config_v3';
    readonly flags: number;
    readonly new_catchain_ids: Bool;
    readonly round_candidates: number;
    readonly next_candidate_delay_ms: number;
    readonly consensus_timeout_ms: number;
    readonly fast_attempts: number;
    readonly attempt_duration: number;
    readonly catchain_max_deps: number;
    readonly max_block_bytes: number;
    readonly max_collated_bytes: number;
    readonly proto_version: number;
}
export interface ConsensusConfig_consensus_config_v4 {
    readonly kind: 'ConsensusConfig_consensus_config_v4';
    readonly flags: number;
    readonly new_catchain_ids: Bool;
    readonly round_candidates: number;
    readonly next_candidate_delay_ms: number;
    readonly consensus_timeout_ms: number;
    readonly fast_attempts: number;
    readonly attempt_duration: number;
    readonly catchain_max_deps: number;
    readonly max_block_bytes: number;
    readonly max_collated_bytes: number;
    readonly proto_version: number;
    readonly catchain_max_blocks_coeff: number;
}
export interface ValidatorTempKey {
    readonly kind: 'ValidatorTempKey';
    readonly adnl_addr: Buffer;
    readonly temp_public_key: SigPubKey;
    readonly seqno: number;
    readonly valid_until: number;
}
export interface ValidatorSignedTempKey {
    readonly kind: 'ValidatorSignedTempKey';
    readonly key: ValidatorTempKey;
    readonly signature: CryptoSignature;
}
export interface MisbehaviourPunishmentConfig {
    readonly kind: 'MisbehaviourPunishmentConfig';
    readonly default_flat_fine: bigint;
    readonly default_proportional_fine: number;
    readonly severity_flat_mult: number;
    readonly severity_proportional_mult: number;
    readonly unpunishable_interval: number;
    readonly long_interval: number;
    readonly long_flat_mult: number;
    readonly long_proportional_mult: number;
    readonly medium_interval: number;
    readonly medium_flat_mult: number;
    readonly medium_proportional_mult: number;
}
export type SizeLimitsConfig = SizeLimitsConfig_size_limits_config | SizeLimitsConfig_size_limits_config_v2;
export interface SizeLimitsConfig_size_limits_config {
    readonly kind: 'SizeLimitsConfig_size_limits_config';
    readonly max_msg_bits: number;
    readonly max_msg_cells: number;
    readonly max_library_cells: number;
    readonly max_vm_data_depth: number;
    readonly max_ext_msg_size: number;
    readonly max_ext_msg_depth: number;
}
export interface SizeLimitsConfig_size_limits_config_v2 {
    readonly kind: 'SizeLimitsConfig_size_limits_config_v2';
    readonly max_msg_bits: number;
    readonly max_msg_cells: number;
    readonly max_library_cells: number;
    readonly max_vm_data_depth: number;
    readonly max_ext_msg_size: number;
    readonly max_ext_msg_depth: number;
    readonly max_acc_state_cells: number;
    readonly max_acc_state_bits: number;
    readonly max_acc_public_libraries: number;
    readonly defer_out_queue_size_limit: number;
    readonly max_msg_extra_currencies: number;
    readonly max_acc_fixed_prefix_length: number;
}
export interface SuspendedAddressList {
    readonly kind: 'SuspendedAddressList';
    readonly addresses: Dictionary<bigint, Unit>;
    readonly suspended_until: number;
}
export interface PrecompiledSmc {
    readonly kind: 'PrecompiledSmc';
    readonly gas_usage: bigint;
}
export interface PrecompiledContractsConfig {
    readonly kind: 'PrecompiledContractsConfig';
    readonly list: Dictionary<bigint, PrecompiledSmc>;
}
export interface OracleBridgeParams {
    readonly kind: 'OracleBridgeParams';
    readonly bridge_address: Buffer;
    readonly oracle_mutlisig_address: Buffer;
    readonly oracles: Dictionary<bigint, bigint>;
    readonly external_chain_address: Buffer;
}
export interface JettonBridgePrices {
    readonly kind: 'JettonBridgePrices';
    readonly bridge_burn_fee: bigint;
    readonly bridge_mint_fee: bigint;
    readonly wallet_min_tons_for_storage: bigint;
    readonly wallet_gas_consumption: bigint;
    readonly minter_min_tons_for_storage: bigint;
    readonly discover_gas_consumption: bigint;
}
export type JettonBridgeParams = JettonBridgeParams_jetton_bridge_params_v0 | JettonBridgeParams_jetton_bridge_params_v1;
export interface JettonBridgeParams_jetton_bridge_params_v0 {
    readonly kind: 'JettonBridgeParams_jetton_bridge_params_v0';
    readonly bridge_address: Buffer;
    readonly oracles_address: Buffer;
    readonly oracles: Dictionary<bigint, bigint>;
    readonly state_flags: number;
    readonly burn_bridge_fee: bigint;
}
export interface JettonBridgeParams_jetton_bridge_params_v1 {
    readonly kind: 'JettonBridgeParams_jetton_bridge_params_v1';
    readonly bridge_address: Buffer;
    readonly oracles_address: Buffer;
    readonly oracles: Dictionary<bigint, bigint>;
    readonly state_flags: number;
    readonly prices: JettonBridgePrices;
    readonly external_chain_address: Buffer;
}
export declare function loadUnit(slice: Slice): Unit;
export declare function storeUnit(unit: Unit): (builder: Builder) => void;
export declare function loadTrue(slice: Slice): True;
export declare function storeTrue(true0: True): (builder: Builder) => void;
export declare function loadMaybe<X>(slice: Slice, loadX: (slice: Slice) => X): Maybe<X>;
export declare function storeMaybe<X>(maybe: Maybe<X>, storeX: (x: X) => (builder: Builder) => void): (builder: Builder) => void;
export declare function hashmap_get_l(label: HmLabel): number;
export declare function loadHashmap<X>(slice: Slice, n: number, loadX: (slice: Slice) => X): Hashmap<X>;
export declare function storeHashmap<X>(hashmap: Hashmap<X>, storeX: (x: X) => (builder: Builder) => void): (builder: Builder) => void;
export declare function loadHashmapNode<X>(slice: Slice, arg0: number, loadX: (slice: Slice) => X): HashmapNode<X>;
export declare function storeHashmapNode<X>(hashmapNode: HashmapNode<X>, storeX: (x: X) => (builder: Builder) => void): (builder: Builder) => void;
export declare function hmLabel_hml_short_get_n(len: Unary): number;
export declare function loadHmLabel(slice: Slice, m: number): HmLabel;
export declare function storeHmLabel(hmLabel: HmLabel): (builder: Builder) => void;
export declare function unary_unary_succ_get_n(x: Unary): number;
export declare function loadUnary(slice: Slice): Unary;
export declare function storeUnary(unary: Unary): (builder: Builder) => void;
export declare function loadCoins(slice: Slice): Coins;
export declare function storeCoins(coins: Coins): (builder: Builder) => void;
export declare function loadExtraCurrencyCollection(slice: Slice): ExtraCurrencyCollection;
export declare function storeExtraCurrencyCollection(extraCurrencyCollection: ExtraCurrencyCollection): (builder: Builder) => void;
export declare function loadSigPubKey(slice: Slice): SigPubKey;
export declare function storeSigPubKey(sigPubKey: SigPubKey): (builder: Builder) => void;
export declare function loadCryptoSignatureSimple(slice: Slice): CryptoSignatureSimple;
export declare function storeCryptoSignatureSimple(cryptoSignatureSimple: CryptoSignatureSimple): (builder: Builder) => void;
export declare function loadCryptoSignature(slice: Slice): CryptoSignature;
export declare function storeCryptoSignature(cryptoSignature: CryptoSignature): (builder: Builder) => void;
export declare function loadCertificate(slice: Slice): Certificate;
export declare function storeCertificate(certificate: Certificate): (builder: Builder) => void;
export declare function loadSignedCertificate(slice: Slice): SignedCertificate;
export declare function storeSignedCertificate(signedCertificate: SignedCertificate): (builder: Builder) => void;
export declare function loadValidatorDescr(slice: Slice): ValidatorDescr;
export declare function storeValidatorDescr(validatorDescr: ValidatorDescr): (builder: Builder) => void;
export declare function loadValidatorSet(slice: Slice): ValidatorSet;
export declare function storeValidatorSet(validatorSet: ValidatorSet): (builder: Builder) => void;
export declare function loadConfigParam(slice: Slice, arg0: number): ConfigParam;
export declare function storeConfigParam(configParam: ConfigParam): (builder: Builder) => void;
export declare function loadBurningConfig(slice: Slice): BurningConfig;
export declare function storeBurningConfig(burningConfig: BurningConfig): (builder: Builder) => void;
export declare function loadGlobalVersion(slice: Slice): GlobalVersion;
export declare function storeGlobalVersion(globalVersion: GlobalVersion): (builder: Builder) => void;
export declare function loadConfigProposalSetup(slice: Slice): ConfigProposalSetup;
export declare function storeConfigProposalSetup(configProposalSetup: ConfigProposalSetup): (builder: Builder) => void;
export declare function loadConfigVotingSetup(slice: Slice): ConfigVotingSetup;
export declare function storeConfigVotingSetup(configVotingSetup: ConfigVotingSetup): (builder: Builder) => void;
export declare function loadConfigProposal(slice: Slice): ConfigProposal;
export declare function storeConfigProposal(configProposal: ConfigProposal): (builder: Builder) => void;
export declare function loadConfigProposalStatus(slice: Slice): ConfigProposalStatus;
export declare function storeConfigProposalStatus(configProposalStatus: ConfigProposalStatus): (builder: Builder) => void;
export declare function loadWorkchainFormat(slice: Slice, arg0: number): WorkchainFormat;
export declare function storeWorkchainFormat(workchainFormat: WorkchainFormat): (builder: Builder) => void;
export declare function loadWcSplitMergeTimings(slice: Slice): WcSplitMergeTimings;
export declare function storeWcSplitMergeTimings(wcSplitMergeTimings: WcSplitMergeTimings): (builder: Builder) => void;
export declare function loadWorkchainDescr(slice: Slice): WorkchainDescr;
export declare function storeWorkchainDescr(workchainDescr: WorkchainDescr): (builder: Builder) => void;
export declare function loadComplaintPricing(slice: Slice): ComplaintPricing;
export declare function storeComplaintPricing(complaintPricing: ComplaintPricing): (builder: Builder) => void;
export declare function loadBlockCreateFees(slice: Slice): BlockCreateFees;
export declare function storeBlockCreateFees(blockCreateFees: BlockCreateFees): (builder: Builder) => void;
export declare function loadStoragePrices(slice: Slice): StoragePrices;
export declare function storeStoragePrices(storagePrices: StoragePrices): (builder: Builder) => void;
export declare function loadGasLimitsPrices(slice: Slice): GasLimitsPrices;
export declare function storeGasLimitsPrices(gasLimitsPrices: GasLimitsPrices): (builder: Builder) => void;
export declare function loadParamLimits(slice: Slice): ParamLimits;
export declare function storeParamLimits(paramLimits: ParamLimits): (builder: Builder) => void;
export declare function loadBlockLimits(slice: Slice): BlockLimits;
export declare function storeBlockLimits(blockLimits: BlockLimits): (builder: Builder) => void;
export declare function loadMsgForwardPrices(slice: Slice): MsgForwardPrices;
export declare function storeMsgForwardPrices(msgForwardPrices: MsgForwardPrices): (builder: Builder) => void;
export declare function loadCatchainConfig(slice: Slice): CatchainConfig;
export declare function storeCatchainConfig(catchainConfig: CatchainConfig): (builder: Builder) => void;
export declare function loadConsensusConfig(slice: Slice): ConsensusConfig;
export declare function storeConsensusConfig(consensusConfig: ConsensusConfig): (builder: Builder) => void;
export declare function loadValidatorTempKey(slice: Slice): ValidatorTempKey;
export declare function storeValidatorTempKey(validatorTempKey: ValidatorTempKey): (builder: Builder) => void;
export declare function loadValidatorSignedTempKey(slice: Slice): ValidatorSignedTempKey;
export declare function storeValidatorSignedTempKey(validatorSignedTempKey: ValidatorSignedTempKey): (builder: Builder) => void;
export declare function loadMisbehaviourPunishmentConfig(slice: Slice): MisbehaviourPunishmentConfig;
export declare function storeMisbehaviourPunishmentConfig(misbehaviourPunishmentConfig: MisbehaviourPunishmentConfig): (builder: Builder) => void;
export declare function loadSizeLimitsConfig(slice: Slice): SizeLimitsConfig;
export declare function storeSizeLimitsConfig(sizeLimitsConfig: SizeLimitsConfig): (builder: Builder) => void;
export declare function loadSuspendedAddressList(slice: Slice): SuspendedAddressList;
export declare function storeSuspendedAddressList(suspendedAddressList: SuspendedAddressList): (builder: Builder) => void;
export declare function loadPrecompiledSmc(slice: Slice): PrecompiledSmc;
export declare function storePrecompiledSmc(precompiledSmc: PrecompiledSmc): (builder: Builder) => void;
export declare function loadPrecompiledContractsConfig(slice: Slice): PrecompiledContractsConfig;
export declare function storePrecompiledContractsConfig(precompiledContractsConfig: PrecompiledContractsConfig): (builder: Builder) => void;
export declare function loadOracleBridgeParams(slice: Slice): OracleBridgeParams;
export declare function storeOracleBridgeParams(oracleBridgeParams: OracleBridgeParams): (builder: Builder) => void;
export declare function loadJettonBridgePrices(slice: Slice): JettonBridgePrices;
export declare function storeJettonBridgePrices(jettonBridgePrices: JettonBridgePrices): (builder: Builder) => void;
export declare function loadJettonBridgeParams(slice: Slice): JettonBridgeParams;
export declare function storeJettonBridgeParams(jettonBridgeParams: JettonBridgeParams): (builder: Builder) => void;
