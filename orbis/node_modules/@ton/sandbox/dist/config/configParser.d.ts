import { Cell } from '@ton/core';
import { ConfigParam } from './config.tlb-gen';
declare const configNormalization: {
    readonly ConfigParam__: "ConfigParam__0";
    readonly ConfigParam_config_mc_gas_prices: "ConfigParam__20";
    readonly ConfigParam_config_gas_prices: "ConfigParam__21";
    readonly ConfigParam_config_mc_block_limits: "ConfigParam__22";
    readonly ConfigParam_config_block_limits: "ConfigParam__23";
    readonly ConfigParam_config_mc_fwd_prices: "ConfigParam__24";
    readonly ConfigParam_config_fwd_prices: "ConfigParam__25";
};
type NormalizeKind<K extends string> = K extends keyof typeof configNormalization ? (typeof configNormalization)[K] : K;
type KindToNumber<K extends string> = NormalizeKind<K> extends `ConfigParam__${infer N extends number}` ? N : never;
type BlockchainConfig = {
    [K in ConfigParam as KindToNumber<K['kind']>]: K;
};
export declare function loadConfig(configCellOrBase64: string | Cell): BlockchainConfig;
export declare function updateConfig(config: Cell, ...params: ConfigParam[]): Cell;
export {};
