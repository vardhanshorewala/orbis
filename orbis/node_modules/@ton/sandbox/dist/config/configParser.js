"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfig = exports.loadConfig = void 0;
const core_1 = require("@ton/core");
const config_tlb_gen_1 = require("./config.tlb-gen");
const configNormalization = {
    ConfigParam__: 'ConfigParam__0',
    ConfigParam_config_mc_gas_prices: 'ConfigParam__20',
    ConfigParam_config_gas_prices: 'ConfigParam__21',
    ConfigParam_config_mc_block_limits: 'ConfigParam__22',
    ConfigParam_config_block_limits: 'ConfigParam__23',
    ConfigParam_config_mc_fwd_prices: 'ConfigParam__24',
    ConfigParam_config_fwd_prices: 'ConfigParam__25',
};
function loadConfigDict(configCellOrBase64) {
    return (typeof configCellOrBase64 === 'string' ? core_1.Cell.fromBase64(configCellOrBase64) : configCellOrBase64)
        .beginParse()
        .loadDictDirect(core_1.Dictionary.Keys.Int(32), core_1.Dictionary.Values.Cell());
}
function loadConfig(configCellOrBase64) {
    const configDict = loadConfigDict(configCellOrBase64);
    const parsedConfig = {};
    for (const [id, configParam] of configDict) {
        try {
            // @ts-expect-error Should load OK as in tlb
            parsedConfig[id] = (0, config_tlb_gen_1.loadConfigParam)(configParam.beginParse(), id);
        }
        catch (err) {
            if (!(err instanceof Error) ||
                !err.message.startsWith('Expected one of "ConfigParam__", "ConfigParam__1", "ConfigParam__2"')) {
                throw err;
            }
            // Ignore unknown params otherwise. Params -999, -1000 and -1001 are not described in tlb
        }
    }
    return parsedConfig;
}
exports.loadConfig = loadConfig;
function updateConfig(config, ...params) {
    const configDict = loadConfigDict(config);
    for (const param of params) {
        const normalizedKind = configNormalization[param.kind] ?? param.kind;
        const id = Number(normalizedKind.slice('ConfigParam__'.length));
        configDict.set(id, (0, core_1.beginCell)().store((0, config_tlb_gen_1.storeConfigParam)(param)).endCell());
    }
    return (0, core_1.beginCell)().storeDictDirect(configDict).endCell();
}
exports.updateConfig = updateConfig;
