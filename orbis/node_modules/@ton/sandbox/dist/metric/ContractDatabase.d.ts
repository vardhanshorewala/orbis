import { ContractABI } from '@ton/core';
import { CodeHash, Metric, OpCode } from './collectMetric';
type Condition = {
    codeHash: CodeHash;
    opCode: OpCode;
    receiver: 'internal' | 'external-in' | 'external-out';
};
export type ContractDataKey = CodeHash | string;
export type ContractData = Record<ContractDataKey, ContractABI | ContractDataKey>;
export declare class ContractDatabase {
    protected list: Map<ContractDataKey, ContractABI>;
    protected match: Map<ContractDataKey, ContractDataKey>;
    constructor(abiList: Map<ContractDataKey, ContractABI>, codeHashMatch: Map<ContractDataKey, ContractDataKey>);
    static from(data: ContractData): ContractDatabase;
    get data(): ContractData;
    origin(needle: ContractDataKey): string;
    get(needle: ContractDataKey): ContractABI | undefined;
    extract(metric: Metric): void;
    by(where: Partial<Condition>): Partial<Metric>;
}
export {};
