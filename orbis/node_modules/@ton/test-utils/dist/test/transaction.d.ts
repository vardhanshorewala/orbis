import { AccountStatus, Address, Cell, Transaction } from '@ton/core';
import { CompareResult } from './interface';
export type ExtendedTransaction = Transaction & {
    mode?: number;
};
export type FlatTransaction = {
    from?: Address;
    to?: Address;
    on?: Address;
    value?: bigint;
    ec?: [number, bigint][];
    body?: Cell;
    inMessageBounced?: boolean;
    inMessageBounceable?: boolean;
    op?: number;
    initData?: Cell;
    initCode?: Cell;
    deploy: boolean;
    lt: bigint;
    now: number;
    outMessagesCount: number;
    oldStatus: AccountStatus;
    endStatus: AccountStatus;
    totalFees?: bigint;
    aborted?: boolean;
    destroyed?: boolean;
    exitCode?: number;
    actionResultCode?: number;
    success?: boolean;
    mode?: number;
};
type WithFunctions<T> = {
    [K in keyof T]: T[K] | ((x: T[K]) => boolean);
};
export type FlatTransactionComparable = Partial<WithFunctions<FlatTransaction>>;
export declare function flattenTransaction(tx: ExtendedTransaction): FlatTransaction;
export declare function compareTransaction(tx: FlatTransaction, cmp: FlatTransactionComparable): boolean;
export declare function compareTransactionForTest(subject: any, cmp: FlatTransactionComparable): CompareResult;
export declare function findTransaction<T extends Transaction>(txs: T | T[], match: FlatTransactionComparable): T | undefined;
export declare function findTransactionRequired<T extends Transaction>(txs: T | T[], match: FlatTransactionComparable): T;
export declare function filterTransactions<T extends Transaction>(txs: T[], match: FlatTransactionComparable): T[];
export {};
