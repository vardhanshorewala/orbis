"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettifyTransaction = exports.extractFailReason = void 0;
const errors_json_1 = __importDefault(require("../errors.json"));
const transaction_1 = require("../test/transaction");
const ContractsMeta_1 = require("./ContractsMeta");
const typedErrors = errors_json_1.default;
function extractError(tx, errors) {
    return errors?.[String(tx.exitCode)] ?? errors?.[String(tx.actionResultCode)];
}
function extractFailReason(tx) {
    if (tx.success) {
        return undefined;
    }
    const destination = tx.to;
    if (!destination) {
        return extractError(tx, typedErrors);
    }
    const meta = ContractsMeta_1.contractsMeta.get(destination);
    return extractError(tx, meta?.abi?.errors) ?? extractError(tx, typedErrors);
}
exports.extractFailReason = extractFailReason;
function prettifyOpcode(address, op) {
    if (!address || op === undefined) {
        return op?.toString();
    }
    const meta = ContractsMeta_1.contractsMeta.get(address);
    if (!meta?.abi?.types) {
        return op.toString();
    }
    const methodType = meta.abi.types.find((type) => type.header === op);
    let label = op.toString();
    if (methodType) {
        label += ` (${methodType.name})`;
    }
    return label;
}
function prettifyAddress(address) {
    if (!address) {
        return undefined;
    }
    const meta = ContractsMeta_1.contractsMeta.get(address);
    if (!meta) {
        return address.toString();
    }
    let contractLabel = meta.abi?.name ?? meta.wrapperName;
    if (meta.treasurySeed) {
        contractLabel = contractLabel === undefined ? meta.treasurySeed : `${contractLabel}-${meta.treasurySeed}`;
    }
    if (contractLabel === undefined) {
        return address.toString();
    }
    return `${address.toString()} (${contractLabel})`;
}
function prettifyTransaction(tx) {
    const flatTx = (0, transaction_1.flattenTransaction)(tx);
    return {
        ...flatTx,
        failReason: extractFailReason(flatTx),
        to: prettifyAddress(flatTx.to),
        from: prettifyAddress(flatTx.from),
        on: prettifyAddress(flatTx.on),
        op: prettifyOpcode(flatTx.to, flatTx.op),
    };
}
exports.prettifyTransaction = prettifyTransaction;
